shadow$provide.module$node_modules$ol$Observable = function(global, require, module, exports) {
  function unByKey(key) {
    if (Array.isArray(key)) {
      for (let i = 0, ii = key.length; i < ii; ++i) {
        (0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(key[i]);
      }
    } else {
      (0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(key);
    }
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, unByKey:{enumerable:!0, get:function() {
    return unByKey;
  }}});
  global = require("module$node_modules$ol$events$EventType");
  module = require("module$node_modules$ol$events$Target");
  var require$_DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events");
  module = require.esmDefault(module);
  var default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Observable extends module.default {
    constructor() {
      super();
      this.on = this.onInternal;
      this.once = this.onceInternal;
      this.un = this.unInternal;
      this.revision_ = 0;
    }
    changed() {
      ++this.revision_;
      this.dispatchEvent(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE);
    }
    getRevision() {
      return this.revision_;
    }
    onInternal(type, listener) {
      if (Array.isArray(type)) {
        const len = type.length, keys = Array(len);
        for (let i = 0; i < len; ++i) {
          keys[i] = (0,require$_DOT__SLASH_events_DOT_js.listen)(this, type[i], listener);
        }
        return keys;
      }
      return (0,require$_DOT__SLASH_events_DOT_js.listen)(this, type, listener);
    }
    onceInternal(type, listener) {
      let key;
      if (Array.isArray(type)) {
        const len = type.length;
        key = Array(len);
        for (let i = 0; i < len; ++i) {
          key[i] = (0,require$_DOT__SLASH_events_DOT_js.listenOnce)(this, type[i], listener);
        }
      } else {
        key = (0,require$_DOT__SLASH_events_DOT_js.listenOnce)(this, type, listener);
      }
      return listener.ol_key = key;
    }
    unInternal(type, listener) {
      const key = listener.ol_key;
      if (key) {
        unByKey(key);
      } else if (Array.isArray(type)) {
        for (let i = 0, ii = type.length; i < ii; ++i) {
          this.removeEventListener(type[i], listener);
        }
      } else {
        this.removeEventListener(type, listener);
      }
    }
  }
  Observable.prototype.on;
  Observable.prototype.once;
  Observable.prototype.un;
  const $$default = Observable;
};

//# sourceMappingURL=module$node_modules$ol$Observable.js.map
