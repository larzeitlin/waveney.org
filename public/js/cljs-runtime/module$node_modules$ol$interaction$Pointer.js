shadow$provide.module$node_modules$ol$interaction$Pointer = function(global, require, module, exports) {
  function centroid(pointerEvents) {
    const length = pointerEvents.length;
    let clientX = 0, clientY = 0;
    for (let i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX, clientY += pointerEvents[i].clientY;
    }
    return {clientX:clientX / length, clientY:clientY / length};
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, centroid:{enumerable:!0, get:function() {
    return centroid;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$MapBrowserEventType");
  module = require("module$node_modules$ol$interaction$Interaction");
  var default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js = require.esmDefault(global);
  require = require.esmDefault(module);
  class PointerInteraction extends require.default {
    constructor(options) {
      options = options ? options : {};
      super(options);
      options.handleDownEvent && (this.handleDownEvent = options.handleDownEvent);
      options.handleDragEvent && (this.handleDragEvent = options.handleDragEvent);
      options.handleMoveEvent && (this.handleMoveEvent = options.handleMoveEvent);
      options.handleUpEvent && (this.handleUpEvent = options.handleUpEvent);
      options.stopDown && (this.stopDown = options.stopDown);
      this.handlingDownUpSequence = !1;
      this.targetPointers = [];
    }
    getPointerCount() {
      return this.targetPointers.length;
    }
    handleDownEvent(mapBrowserEvent) {
      return !1;
    }
    handleDragEvent(mapBrowserEvent) {
    }
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return !0;
      }
      let stopEvent = !1;
      this.updateTrackedPointers_(mapBrowserEvent);
      this.handlingDownUpSequence ? mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERDRAG ? (this.handleDragEvent(mapBrowserEvent), mapBrowserEvent.originalEvent.preventDefault()) : mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERUP && (this.handlingDownUpSequence = this.handleUpEvent(mapBrowserEvent) && 0 < this.targetPointers.length) : mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERDOWN ? 
      (this.handlingDownUpSequence = mapBrowserEvent = this.handleDownEvent(mapBrowserEvent), stopEvent = this.stopDown(mapBrowserEvent)) : mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERMOVE && this.handleMoveEvent(mapBrowserEvent);
      return !stopEvent;
    }
    handleMoveEvent(mapBrowserEvent) {
    }
    handleUpEvent(mapBrowserEvent) {
      return !1;
    }
    stopDown(handled) {
      return handled;
    }
    updateTrackedPointers_(mapBrowserEvent) {
      mapBrowserEvent.activePointers && (this.targetPointers = mapBrowserEvent.activePointers);
    }
  }
  const $$default = PointerInteraction;
};

//# sourceMappingURL=module$node_modules$ol$interaction$Pointer.js.map
