shadow$provide.module$node_modules$ol$interaction$MouseWheelZoom = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js = require("module$node_modules$ol$events$condition"), require$_DOT__DOT__SLASH_has_DOT_js = require("module$node_modules$ol$has"), require$_DOT__DOT__SLASH_math_DOT_js = require("module$node_modules$ol$math"), require$_DOT__SLASH_Interaction_DOT_js = require("module$node_modules$ol$interaction$Interaction"), default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  require = require.esmDefault(require$_DOT__SLASH_Interaction_DOT_js);
  class MouseWheelZoom extends require.default {
    constructor(options) {
      options = options ? options : {};
      super(options);
      this.lastDelta_ = this.totalDelta_ = 0;
      this.maxDelta_ = void 0 !== options.maxDelta ? options.maxDelta : 1;
      this.duration_ = void 0 !== options.duration ? options.duration : 250;
      this.timeout_ = void 0 !== options.timeout ? options.timeout : 80;
      this.useAnchor_ = void 0 !== options.useAnchor ? options.useAnchor : !0;
      this.constrainResolution_ = void 0 !== options.constrainResolution ? options.constrainResolution : !1;
      const condition = options.condition ? options.condition : require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.always;
      this.condition_ = options.onFocusOnly ? (0,require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.all)(require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.focusWithTabindex, condition) : condition;
      this.lastAnchor_ = null;
      this.startTime_ = void 0;
      this.timeoutId_;
      this.mode_ = void 0;
      this.trackpadEventGap_ = 400;
      this.trackpadTimeoutId_;
      this.deltaPerZoom_ = 300;
    }
    endInteraction_() {
      this.trackpadTimeoutId_ = void 0;
      const map = this.getMap();
      map && map.getView().endInteraction(void 0, this.lastDelta_ ? 0 < this.lastDelta_ ? 1 : -1 : 0, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null);
    }
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent) || mapBrowserEvent.type !== default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.WHEEL) {
        return !0;
      }
      const map = mapBrowserEvent.map;
      var wheelEvent = mapBrowserEvent.originalEvent;
      wheelEvent.preventDefault();
      this.useAnchor_ && (this.lastAnchor_ = mapBrowserEvent.pixel);
      if (mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.WHEEL) {
        var delta = wheelEvent.deltaY;
        require$_DOT__DOT__SLASH_has_DOT_js.FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL && (delta /= require$_DOT__DOT__SLASH_has_DOT_js.DEVICE_PIXEL_RATIO);
        wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE && (delta *= 40);
      }
      if (0 === delta) {
        return !1;
      }
      this.lastDelta_ = delta;
      mapBrowserEvent = Date.now();
      void 0 === this.startTime_ && (this.startTime_ = mapBrowserEvent);
      if (!this.mode_ || mapBrowserEvent - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = 4 > Math.abs(delta) ? "trackpad" : "wheel";
      }
      wheelEvent = map.getView();
      if ("trackpad" === this.mode_ && !wheelEvent.getConstrainResolution() && !this.constrainResolution_) {
        return this.trackpadTimeoutId_ ? clearTimeout(this.trackpadTimeoutId_) : (wheelEvent.getAnimating() && wheelEvent.cancelAnimations(), wheelEvent.beginInteraction()), this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_), wheelEvent.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null), this.startTime_ = mapBrowserEvent, !1;
      }
      this.totalDelta_ += delta;
      delta = Math.max(this.timeout_ - (mapBrowserEvent - this.startTime_), 0);
      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), delta);
      return !1;
    }
    handleWheelZoom_(map) {
      const view = map.getView();
      view.getAnimating() && view.cancelAnimations();
      let delta = -(0,require$_DOT__DOT__SLASH_math_DOT_js.clamp)(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
      if (view.getConstrainResolution() || this.constrainResolution_) {
        delta = delta ? 0 < delta ? 1 : -1 : 0;
      }
      (0,require$_DOT__SLASH_Interaction_DOT_js.zoomByDelta)(view, delta, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null, this.duration_);
      this.mode_ = void 0;
      this.totalDelta_ = 0;
      this.lastAnchor_ = null;
      this.timeoutId_ = this.startTime_ = void 0;
    }
    setMouseAnchor(useAnchor) {
      this.useAnchor_ = useAnchor;
      useAnchor || (this.lastAnchor_ = null);
    }
  }
  const $$default = MouseWheelZoom;
};

//# sourceMappingURL=module$node_modules$ol$interaction$MouseWheelZoom.js.map
