shadow$provide.module$node_modules$ol$control$Rotate = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_css_DOT_js = require("module$node_modules$ol$css"), require$_DOT__DOT__SLASH_easing_DOT_js = require("module$node_modules$ol$easing");
  global = require("module$node_modules$ol$events$EventType");
  module = require("module$node_modules$ol$control$Control");
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Rotate extends module.default {
    constructor(options) {
      options = options ? options : {};
      super({element:document.createElement("div"), render:options.render, target:options.target});
      const className = void 0 !== options.className ? options.className : "ol-rotate";
      var label = void 0 !== options.label ? options.label : "â‡§", compassClassName = void 0 !== options.compassClassName ? options.compassClassName : "ol-compass";
      this.label_ = null;
      "string" === typeof label ? (this.label_ = document.createElement("span"), this.label_.className = compassClassName, this.label_.textContent = label) : (this.label_ = label, this.label_.classList.add(compassClassName));
      compassClassName = options.tipLabel ? options.tipLabel : "Reset rotation";
      label = document.createElement("button");
      label.className = className + "-reset";
      label.setAttribute("type", "button");
      label.title = compassClassName;
      label.appendChild(this.label_);
      label.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CLICK, this.handleClick_.bind(this), !1);
      compassClassName = this.element;
      compassClassName.className = className + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_UNSELECTABLE + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_CONTROL;
      compassClassName.appendChild(label);
      this.callResetNorth_ = options.resetNorth ? options.resetNorth : void 0;
      this.duration_ = void 0 !== options.duration ? options.duration : 250;
      this.autoHide_ = void 0 !== options.autoHide ? options.autoHide : !0;
      this.rotation_ = void 0;
      this.autoHide_ && this.element.classList.add(require$_DOT__DOT__SLASH_css_DOT_js.CLASS_HIDDEN);
    }
    handleClick_(event) {
      event.preventDefault();
      void 0 !== this.callResetNorth_ ? this.callResetNorth_() : this.resetNorth_();
    }
    resetNorth_() {
      const view = this.getMap().getView();
      if (view) {
        var rotation = view.getRotation();
        void 0 !== rotation && (0 < this.duration_ && 0 !== rotation % (2 * Math.PI) ? view.animate({rotation:0, duration:this.duration_, easing:require$_DOT__DOT__SLASH_easing_DOT_js.easeOut}) : view.setRotation(0));
      }
    }
    render(mapEvent) {
      if (mapEvent = mapEvent.frameState) {
        mapEvent = mapEvent.viewState.rotation;
        if (mapEvent != this.rotation_) {
          const transform = "rotate(" + mapEvent + "rad)";
          if (this.autoHide_) {
            const contains = this.element.classList.contains(require$_DOT__DOT__SLASH_css_DOT_js.CLASS_HIDDEN);
            contains || 0 !== mapEvent ? contains && 0 !== mapEvent && this.element.classList.remove(require$_DOT__DOT__SLASH_css_DOT_js.CLASS_HIDDEN) : this.element.classList.add(require$_DOT__DOT__SLASH_css_DOT_js.CLASS_HIDDEN);
          }
          this.label_.style.transform = transform;
        }
        this.rotation_ = mapEvent;
      }
    }
  }
  const $$default = Rotate;
};

//# sourceMappingURL=module$node_modules$ol$control$Rotate.js.map
