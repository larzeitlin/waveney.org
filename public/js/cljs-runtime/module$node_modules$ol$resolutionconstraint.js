shadow$provide.module$node_modules$ol$resolutionconstraint = function(global, require, module, exports) {
  function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
    const xResolution = (0,require$_DOT__SLASH_extent_DOT_js.getWidth)(maxExtent) / viewportSize[0];
    maxExtent = (0,require$_DOT__SLASH_extent_DOT_js.getHeight)(maxExtent) / viewportSize[1];
    return showFullExtent ? Math.min(resolution, Math.max(xResolution, maxExtent)) : Math.min(resolution, Math.min(xResolution, maxExtent));
  }
  function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    let result = Math.min(resolution, maxResolution);
    result *= Math.log(1 + 50 * Math.max(0, resolution / maxResolution - 1)) / 50 + 1;
    minResolution && (result = Math.max(result, minResolution), result /= Math.log(1 + 50 * Math.max(0, minResolution / resolution - 1)) / 50 + 1);
    return (0,require$_DOT__SLASH_math_DOT_js.clamp)(result, minResolution / 2, 2 * maxResolution);
  }
  function createSnapToResolutions(resolutions, smooth, maxExtent, showFullExtent) {
    smooth = void 0 !== smooth ? smooth : !0;
    return function(resolution, direction, size, isMoving) {
      if (void 0 !== resolution) {
        const maxResolution = resolutions[0], minResolution = resolutions[resolutions.length - 1];
        size = maxExtent ? getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;
        if (isMoving) {
          return smooth ? getSmoothClampedResolution(resolution, size, minResolution) : (0,require$_DOT__SLASH_math_DOT_js.clamp)(resolution, minResolution, size);
        }
        resolution = Math.floor((0,require$_DOT__SLASH_array_DOT_js.linearFindNearest)(resolutions, Math.min(size, resolution), direction));
        return resolutions[resolution] > size && resolution < resolutions.length - 1 ? resolutions[resolution + 1] : resolutions[resolution];
      }
    };
  }
  function createSnapToPower(power, maxResolution, minResolution, smooth, maxExtent, showFullExtent) {
    smooth = void 0 !== smooth ? smooth : !0;
    minResolution = void 0 !== minResolution ? minResolution : 0;
    return function(resolution, direction, size, isMoving) {
      if (void 0 !== resolution) {
        return size = maxExtent ? getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution, isMoving ? smooth ? getSmoothClampedResolution(resolution, size, minResolution) : (0,require$_DOT__SLASH_math_DOT_js.clamp)(resolution, minResolution, size) : (0,require$_DOT__SLASH_math_DOT_js.clamp)(maxResolution / Math.pow(power, Math.max(Math.ceil(Math.log(maxResolution / size) / Math.log(power) - 1e-9), Math.floor(Math.log(maxResolution / Math.min(size, resolution)) / 
        Math.log(power) + (-direction * (0.5 - 1e-9) + 0.5)))), minResolution, size);
      }
    };
  }
  function createMinMaxResolution(maxResolution, minResolution, smooth, maxExtent, showFullExtent) {
    smooth = void 0 !== smooth ? smooth : !0;
    return function(resolution, direction, size, isMoving) {
      if (void 0 !== resolution) {
        return direction = maxExtent ? getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution, smooth && isMoving ? getSmoothClampedResolution(resolution, direction, minResolution) : (0,require$_DOT__SLASH_math_DOT_js.clamp)(resolution, minResolution, direction);
      }
    };
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createMinMaxResolution:{enumerable:!0, get:function() {
    return createMinMaxResolution;
  }}, createSnapToPower:{enumerable:!0, get:function() {
    return createSnapToPower;
  }}, createSnapToResolutions:{enumerable:!0, get:function() {
    return createSnapToResolutions;
  }}});
  var require$_DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__SLASH_math_DOT_js = require("module$node_modules$ol$math");
};

//# sourceMappingURL=module$node_modules$ol$resolutionconstraint.js.map
