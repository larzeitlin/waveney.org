shadow$provide.module$node_modules$ol$style$IconImageCache = function(global, require, module, exports) {
  function getCacheKey(src, crossOrigin, color) {
    color = color ? (0,require$_DOT__DOT__SLASH_color_DOT_js.asArray)(color) : "null";
    return crossOrigin + ":" + src + ":" + color;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, getCacheKey:{enumerable:!0, get:function() {
    return getCacheKey;
  }}, shared:{enumerable:!0, get:function() {
    return shared;
  }}});
  global = require("module$node_modules$ol$ImageState");
  var require$_DOT__DOT__SLASH_color_DOT_js = require("module$node_modules$ol$color"), require$_DOT__DOT__SLASH_dom_DOT_js = require("module$node_modules$ol$dom"), default$$require$_DOT__DOT__SLASH_ImageState_DOT_js = require.esmDefault(global);
  class IconImageCache {
    constructor() {
      this.cache_ = {};
      this.patternCache_ = {};
      this.cacheSize_ = 0;
      this.maxCacheSize_ = 1024;
    }
    clear() {
      this.cache_ = {};
      this.patternCache_ = {};
      this.cacheSize_ = 0;
    }
    canExpireCache() {
      return this.cacheSize_ > this.maxCacheSize_;
    }
    expire() {
      if (this.canExpireCache()) {
        let i = 0;
        for (const key in this.cache_) {
          const iconImage = this.cache_[key];
          0 !== (i++ & 3) || iconImage.hasListener() || (delete this.cache_[key], delete this.patternCache_[key], --this.cacheSize_);
        }
      }
    }
    get(src, crossOrigin, color) {
      src = getCacheKey(src, crossOrigin, color);
      return src in this.cache_ ? this.cache_[src] : null;
    }
    getPattern(src, crossOrigin, color) {
      src = getCacheKey(src, crossOrigin, color);
      return src in this.patternCache_ ? this.patternCache_[src] : null;
    }
    set(src, crossOrigin, color, iconImage, pattern) {
      const key = getCacheKey(src, crossOrigin, color);
      src = key in this.cache_;
      this.cache_[key] = iconImage;
      pattern && (iconImage.getImageState() === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE && iconImage.load(), iconImage.getImageState() === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADING ? iconImage.ready().then(() => {
        this.patternCache_[key] = (0,require$_DOT__DOT__SLASH_dom_DOT_js.getSharedCanvasContext2D)().createPattern(iconImage.getImage(1), "repeat");
      }) : this.patternCache_[key] = (0,require$_DOT__DOT__SLASH_dom_DOT_js.getSharedCanvasContext2D)().createPattern(iconImage.getImage(1), "repeat"));
      src || ++this.cacheSize_;
    }
    setSize(maxCacheSize) {
      this.maxCacheSize_ = maxCacheSize;
      this.expire();
    }
  }
  const $$default = IconImageCache, shared = new IconImageCache();
};

//# sourceMappingURL=module$node_modules$ol$style$IconImageCache.js.map
