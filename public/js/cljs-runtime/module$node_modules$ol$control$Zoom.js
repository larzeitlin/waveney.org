shadow$provide.module$node_modules$ol$control$Zoom = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_css_DOT_js = require("module$node_modules$ol$css"), require$_DOT__DOT__SLASH_easing_DOT_js = require("module$node_modules$ol$easing");
  global = require("module$node_modules$ol$events$EventType");
  module = require("module$node_modules$ol$control$Control");
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Zoom extends module.default {
    constructor(options) {
      options = options ? options : {};
      super({element:document.createElement("div"), target:options.target});
      const className = void 0 !== options.className ? options.className : "ol-zoom";
      var delta = void 0 !== options.delta ? options.delta : 1, zoomInClassName = void 0 !== options.zoomInClassName ? options.zoomInClassName : className + "-in";
      const zoomOutClassName = void 0 !== options.zoomOutClassName ? options.zoomOutClassName : className + "-out", zoomInLabel = void 0 !== options.zoomInLabel ? options.zoomInLabel : "+", zoomOutLabel = void 0 !== options.zoomOutLabel ? options.zoomOutLabel : "â€“", zoomInTipLabel = void 0 !== options.zoomInTipLabel ? options.zoomInTipLabel : "Zoom in", zoomOutTipLabel = void 0 !== options.zoomOutTipLabel ? options.zoomOutTipLabel : "Zoom out", inElement = document.createElement("button");
      inElement.className = zoomInClassName;
      inElement.setAttribute("type", "button");
      inElement.title = zoomInTipLabel;
      inElement.appendChild("string" === typeof zoomInLabel ? document.createTextNode(zoomInLabel) : zoomInLabel);
      inElement.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CLICK, this.handleClick_.bind(this, delta), !1);
      zoomInClassName = document.createElement("button");
      zoomInClassName.className = zoomOutClassName;
      zoomInClassName.setAttribute("type", "button");
      zoomInClassName.title = zoomOutTipLabel;
      zoomInClassName.appendChild("string" === typeof zoomOutLabel ? document.createTextNode(zoomOutLabel) : zoomOutLabel);
      zoomInClassName.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CLICK, this.handleClick_.bind(this, -delta), !1);
      delta = this.element;
      delta.className = className + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_UNSELECTABLE + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_CONTROL;
      delta.appendChild(inElement);
      delta.appendChild(zoomInClassName);
      this.duration_ = void 0 !== options.duration ? options.duration : 250;
    }
    handleClick_(delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    }
    zoomByDelta_(delta) {
      const view = this.getMap().getView();
      if (view) {
        var currentZoom = view.getZoom();
        void 0 !== currentZoom && (delta = view.getConstrainedZoom(currentZoom + delta), 0 < this.duration_ ? (view.getAnimating() && view.cancelAnimations(), view.animate({zoom:delta, duration:this.duration_, easing:require$_DOT__DOT__SLASH_easing_DOT_js.easeOut})) : view.setZoom(delta));
      }
    }
  }
  const $$default = Zoom;
};

//# sourceMappingURL=module$node_modules$ol$control$Zoom.js.map
