shadow$provide.module$node_modules$ol$geom$flat$interiorpoint = function(global, require, module, exports) {
  function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, dest) {
    let i;
    let x2;
    const y = flatCenters[flatCentersOffset + 1], intersections = [];
    for (let r = 0, rr = ends.length; r < rr; ++r) {
      var end = ends[r];
      var x = flatCoordinates[end - stride];
      var y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        var ii = flatCoordinates[i + 1];
        if (y <= y1 && ii <= y || y1 <= y && y <= ii) {
          x = (y - y1) / (ii - y1) * (x2 - x) + x, intersections.push(x);
        }
        x = x2;
        y1 = ii;
      }
    }
    end = NaN;
    y1 = -Infinity;
    intersections.sort(require$_DOT__DOT__SLASH__DOT__DOT__SLASH_array_DOT_js.ascending);
    x = intersections[0];
    i = 1;
    for (ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      const segmentLength = Math.abs(x2 - x);
      segmentLength > y1 && (x = (x + x2) / 2, (0,require$_DOT__SLASH_contains_DOT_js.linearRingsContainsXY)(flatCoordinates, offset, ends, stride, x, y) && (end = x, y1 = segmentLength));
      x = x2;
    }
    isNaN(end) && (end = flatCenters[flatCentersOffset]);
    return dest ? (dest.push(end, y, y1), dest) : [end, y, y1];
  }
  function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
    let interiorPoints = [];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, getInteriorPointOfArray:{enumerable:!0, get:function() {
    return getInteriorPointOfArray;
  }}, getInteriorPointsOfMultiArray:{enumerable:!0, get:function() {
    return getInteriorPointsOfMultiArray;
  }}});
  var require$_DOT__DOT__SLASH__DOT__DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__SLASH_contains_DOT_js = require("module$node_modules$ol$geom$flat$contains");
};

//# sourceMappingURL=module$node_modules$ol$geom$flat$interiorpoint.js.map
