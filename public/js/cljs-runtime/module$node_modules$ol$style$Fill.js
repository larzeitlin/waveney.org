shadow$provide.module$node_modules$ol$style$Fill = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$ImageState");
  var require$_DOT__DOT__SLASH_color_DOT_js = require("module$node_modules$ol$color"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), require$_DOT__SLASH_IconImage_DOT_js = require("module$node_modules$ol$style$IconImage"), default$$require$_DOT__DOT__SLASH_ImageState_DOT_js = require.esmDefault(global);
  class Fill {
    constructor(options) {
      options = options || {};
      this.color_ = this.patternImage_ = null;
      void 0 !== options.color && this.setColor(options.color);
    }
    clone() {
      const color = this.getColor();
      return new Fill({color:Array.isArray(color) ? color.slice() : color || void 0});
    }
    getColor() {
      return this.color_;
    }
    setColor(color) {
      if (null !== color && "object" === typeof color && "src" in color) {
        const patternImage = (0,require$_DOT__SLASH_IconImage_DOT_js.get)(null, color.src, "anonymous", void 0, color.offset ? null : color.color ? color.color : null, !(color.offset && color.size));
        patternImage.ready().then(() => {
          this.patternImage_ = null;
        });
        patternImage.getImageState() === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE && patternImage.load();
        patternImage.getImageState() === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADING && (this.patternImage_ = patternImage);
      }
      this.color_ = color;
    }
    getKey() {
      const fill = this.getColor();
      return fill ? fill instanceof CanvasPattern || fill instanceof CanvasGradient ? (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(fill) : "object" === typeof fill && "src" in fill ? fill.src + ":" + fill.offset : (0,require$_DOT__DOT__SLASH_color_DOT_js.asArray)(fill).toString() : "";
    }
    loading() {
      return !!this.patternImage_;
    }
    ready() {
      return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();
    }
  }
  const $$default = Fill;
};

//# sourceMappingURL=module$node_modules$ol$style$Fill.js.map
