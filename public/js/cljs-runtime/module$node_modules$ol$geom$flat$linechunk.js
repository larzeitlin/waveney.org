shadow$provide.module$node_modules$ol$geom$flat$linechunk = function(global, require, module, exports) {
  function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {
    const chunks = [];
    let cursor = offset;
    var chunkM = 0;
    for (offset = flatCoordinates.slice(offset, 2); chunkM < chunkLength && cursor + stride < end;) {
      const [x1, y1] = offset.slice(-2);
      var x2 = flatCoordinates[cursor + stride], y2 = flatCoordinates[cursor + stride + 1], segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      chunkM += segmentLength;
      chunkM >= chunkLength ? (segmentLength = (chunkLength - chunkM + segmentLength) / segmentLength, x2 = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.lerp)(x1, x2, segmentLength), y2 = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.lerp)(y1, y2, segmentLength), offset.push(x2, y2), chunks.push(offset), offset = [x2, y2], chunkM == chunkLength && (cursor += stride), chunkM = 0) : (chunkM < chunkLength ? offset.push(flatCoordinates[cursor + stride], flatCoordinates[cursor + 
      stride + 1]) : (chunkM = segmentLength - chunkM, x2 = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.lerp)(x1, x2, chunkM / segmentLength), chunkM = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.lerp)(y1, y2, chunkM / segmentLength), offset.push(x2, chunkM), chunks.push(offset), offset = [x2, chunkM], chunkM = 0), cursor += stride);
    }
    0 < chunkM && chunks.push(offset);
    return chunks;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, lineChunk:{enumerable:!0, get:function() {
    return lineChunk;
  }}});
  var require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js = require("module$node_modules$ol$math");
};

//# sourceMappingURL=module$node_modules$ol$geom$flat$linechunk.js.map
