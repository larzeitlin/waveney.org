shadow$provide.module$node_modules$ol$style$Icon = function(global, require, module, exports) {
  function calculateScale(width, height, wantedWidth, wantedHeight) {
    return void 0 !== wantedWidth && void 0 !== wantedHeight ? [wantedWidth / width, wantedHeight / height] : void 0 !== wantedWidth ? wantedWidth / width : void 0 !== wantedHeight ? wantedHeight / height : 1;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$ImageState");
  var require$_DOT__DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts"), require$_DOT__DOT__SLASH_color_DOT_js = require("module$node_modules$ol$color");
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), require$_DOT__SLASH_IconImage_DOT_js = require("module$node_modules$ol$style$IconImage");
  exports = require("module$node_modules$ol$style$Image");
  var default$$require$_DOT__DOT__SLASH_ImageState_DOT_js = require.esmDefault(module);
  module = require.esmDefault(exports);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Icon extends module.default {
    constructor(options) {
      options = options || {};
      super({opacity:void 0 !== options.opacity ? options.opacity : 1, rotation:void 0 !== options.rotation ? options.rotation : 0, scale:void 0 !== options.scale ? options.scale : 1, displacement:void 0 !== options.displacement ? options.displacement : [0, 0], rotateWithView:void 0 !== options.rotateWithView ? options.rotateWithView : !1, declutterMode:options.declutterMode});
      this.anchor_ = void 0 !== options.anchor ? options.anchor : [0.5, 0.5];
      this.normalizedAnchor_ = null;
      this.anchorOrigin_ = void 0 !== options.anchorOrigin ? options.anchorOrigin : "top-left";
      this.anchorXUnits_ = void 0 !== options.anchorXUnits ? options.anchorXUnits : "fraction";
      this.anchorYUnits_ = void 0 !== options.anchorYUnits ? options.anchorYUnits : "fraction";
      this.crossOrigin_ = void 0 !== options.crossOrigin ? options.crossOrigin : null;
      var image = void 0 !== options.img ? options.img : null;
      let cacheKey = options.src;
      (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(!(void 0 !== cacheKey && image), "`image` and `src` cannot be provided at the same time");
      void 0 !== cacheKey && 0 !== cacheKey.length || !image || (cacheKey = image.src || (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(image));
      (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(void 0 !== cacheKey && 0 < cacheKey.length, "A defined and non-empty `src` or `image` must be provided");
      (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(!((void 0 !== options.width || void 0 !== options.height) && void 0 !== options.scale), "`width` or `height` cannot be provided together with `scale`");
      let imageState;
      void 0 !== options.src ? imageState = default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE : void 0 !== image && (imageState = "complete" in image ? image.complete ? image.src ? default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED : default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE : default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADING : default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED);
      this.color_ = void 0 !== options.color ? (0,require$_DOT__DOT__SLASH_color_DOT_js.asArray)(options.color) : null;
      this.iconImage_ = (0,require$_DOT__SLASH_IconImage_DOT_js.get)(image, cacheKey, this.crossOrigin_, imageState, this.color_);
      this.offset_ = void 0 !== options.offset ? options.offset : [0, 0];
      this.offsetOrigin_ = void 0 !== options.offsetOrigin ? options.offsetOrigin : "top-left";
      this.origin_ = null;
      this.size_ = void 0 !== options.size ? options.size : null;
      this.initialOptions_;
      if (void 0 !== options.width || void 0 !== options.height) {
        let width, height;
        if (options.size) {
          [width, height] = options.size;
        } else {
          if (image = this.getImage(1), image.width && image.height) {
            width = image.width, height = image.height;
          } else if (image instanceof HTMLImageElement) {
            this.initialOptions_ = options;
            const onload = () => {
              this.unlistenImageChange(onload);
              if (this.initialOptions_) {
                var imageSize = this.iconImage_.getSize();
                this.setScale(calculateScale(imageSize[0], imageSize[1], options.width, options.height));
              }
            };
            this.listenImageChange(onload);
            return;
          }
        }
        void 0 !== width && this.setScale(calculateScale(width, height, options.width, options.height));
      }
    }
    clone() {
      let scale, width, height;
      this.initialOptions_ ? (width = this.initialOptions_.width, height = this.initialOptions_.height) : (scale = this.getScale(), scale = Array.isArray(scale) ? scale.slice() : scale);
      return new Icon({anchor:this.anchor_.slice(), anchorOrigin:this.anchorOrigin_, anchorXUnits:this.anchorXUnits_, anchorYUnits:this.anchorYUnits_, color:this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || void 0, crossOrigin:this.crossOrigin_, offset:this.offset_.slice(), offsetOrigin:this.offsetOrigin_, opacity:this.getOpacity(), rotateWithView:this.getRotateWithView(), rotation:this.getRotation(), scale, width, height, size:null !== this.size_ ? this.size_.slice() : void 0, 
      src:this.getSrc(), displacement:this.getDisplacement().slice(), declutterMode:this.getDeclutterMode()});
    }
    getAnchor() {
      let anchor = this.normalizedAnchor_;
      if (!anchor) {
        anchor = this.anchor_;
        var size = this.getSize();
        if ("fraction" == this.anchorXUnits_ || "fraction" == this.anchorYUnits_) {
          if (!size) {
            return null;
          }
          anchor = this.anchor_.slice();
          "fraction" == this.anchorXUnits_ && (anchor[0] *= size[0]);
          "fraction" == this.anchorYUnits_ && (anchor[1] *= size[1]);
        }
        if ("top-left" != this.anchorOrigin_) {
          if (!size) {
            return null;
          }
          anchor === this.anchor_ && (anchor = this.anchor_.slice());
          if ("top-right" == this.anchorOrigin_ || "bottom-right" == this.anchorOrigin_) {
            anchor[0] = -anchor[0] + size[0];
          }
          if ("bottom-left" == this.anchorOrigin_ || "bottom-right" == this.anchorOrigin_) {
            anchor[1] = -anchor[1] + size[1];
          }
        }
        this.normalizedAnchor_ = anchor;
      }
      size = this.getDisplacement();
      const scale = this.getScaleArray();
      return [anchor[0] - size[0] / scale[0], anchor[1] + size[1] / scale[1]];
    }
    setAnchor(anchor) {
      this.anchor_ = anchor;
      this.normalizedAnchor_ = null;
    }
    getColor() {
      return this.color_;
    }
    getImage(pixelRatio) {
      return this.iconImage_.getImage(pixelRatio);
    }
    getPixelRatio(pixelRatio) {
      return this.iconImage_.getPixelRatio(pixelRatio);
    }
    getImageSize() {
      return this.iconImage_.getSize();
    }
    getImageState() {
      return this.iconImage_.getImageState();
    }
    getHitDetectionImage() {
      return this.iconImage_.getHitDetectionImage();
    }
    getOrigin() {
      if (this.origin_) {
        return this.origin_;
      }
      let offset = this.offset_;
      if ("top-left" != this.offsetOrigin_) {
        const size = this.getSize(), iconImageSize = this.iconImage_.getSize();
        if (!size || !iconImageSize) {
          return null;
        }
        offset = offset.slice();
        if ("top-right" == this.offsetOrigin_ || "bottom-right" == this.offsetOrigin_) {
          offset[0] = iconImageSize[0] - size[0] - offset[0];
        }
        if ("bottom-left" == this.offsetOrigin_ || "bottom-right" == this.offsetOrigin_) {
          offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
      }
      return this.origin_ = offset;
    }
    getSrc() {
      return this.iconImage_.getSrc();
    }
    getSize() {
      return this.size_ ? this.size_ : this.iconImage_.getSize();
    }
    getWidth() {
      const scale = this.getScaleArray();
      if (this.size_) {
        return this.size_[0] * scale[0];
      }
      if (this.iconImage_.getImageState() == default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED) {
        return this.iconImage_.getSize()[0] * scale[0];
      }
    }
    getHeight() {
      const scale = this.getScaleArray();
      if (this.size_) {
        return this.size_[1] * scale[1];
      }
      if (this.iconImage_.getImageState() == default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED) {
        return this.iconImage_.getSize()[1] * scale[1];
      }
    }
    setScale(scale) {
      delete this.initialOptions_;
      super.setScale(scale);
    }
    listenImageChange(listener) {
      this.iconImage_.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, listener);
    }
    load() {
      this.iconImage_.load();
    }
    unlistenImageChange(listener) {
      this.iconImage_.removeEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, listener);
    }
    ready() {
      return this.iconImage_.ready();
    }
  }
  const $$default = Icon;
};

//# sourceMappingURL=module$node_modules$ol$style$Icon.js.map
