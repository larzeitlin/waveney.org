{
"version":3,
"file":"module$node_modules$ol$geom$Polygon.js",
"lineCount":165,
"mappings":"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",
"sources":["node_modules/ol/geom/Polygon.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$geom$Polygon\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, circular:{enumerable:true, get:function() {\n  return circular;\n}}, default:{enumerable:true, get:function() {\n  return $$default;\n}}, fromCircle:{enumerable:true, get:function() {\n  return fromCircle;\n}}, fromExtent:{enumerable:true, get:function() {\n  return fromExtent;\n}}, makeRegular:{enumerable:true, get:function() {\n  return makeRegular;\n}}});\nvar require$_DOT__DOT__SLASH_array_DOT_js = require(\"../array.js\");\nvar require$_DOT__DOT__SLASH_extent_DOT_js = require(\"../extent.js\");\nvar require$_DOT__DOT__SLASH_math_DOT_js = require(\"../math.js\");\nvar require$_DOT__DOT__SLASH_sphere_DOT_js = require(\"../sphere.js\");\nvar require$_DOT__SLASH_LinearRing_DOT_js = require(\"./LinearRing.js\");\nvar require$_DOT__SLASH_Point_DOT_js = require(\"./Point.js\");\nvar require$_DOT__SLASH_SimpleGeometry_DOT_js = require(\"./SimpleGeometry.js\");\nvar require$_DOT__SLASH_flat_SLASH_area_DOT_js = require(\"./flat/area.js\");\nvar require$_DOT__SLASH_flat_SLASH_closest_DOT_js = require(\"./flat/closest.js\");\nvar require$_DOT__SLASH_flat_SLASH_contains_DOT_js = require(\"./flat/contains.js\");\nvar require$_DOT__SLASH_flat_SLASH_deflate_DOT_js = require(\"./flat/deflate.js\");\nvar require$_DOT__SLASH_flat_SLASH_inflate_DOT_js = require(\"./flat/inflate.js\");\nvar require$_DOT__SLASH_flat_SLASH_interiorpoint_DOT_js = require(\"./flat/interiorpoint.js\");\nvar require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js = require(\"./flat/intersectsextent.js\");\nvar require$_DOT__SLASH_flat_SLASH_orient_DOT_js = require(\"./flat/orient.js\");\nvar require$_DOT__SLASH_flat_SLASH_simplify_DOT_js = require(\"./flat/simplify.js\");\nvar default$$require$_DOT__SLASH_SimpleGeometry_DOT_js = require.esmDefault(require$_DOT__SLASH_SimpleGeometry_DOT_js);\nvar default$$require$_DOT__SLASH_Point_DOT_js = require.esmDefault(require$_DOT__SLASH_Point_DOT_js);\nvar default$$require$_DOT__SLASH_LinearRing_DOT_js = require.esmDefault(require$_DOT__SLASH_LinearRing_DOT_js);\nclass Polygon extends default$$require$_DOT__SLASH_SimpleGeometry_DOT_js.default {\n  constructor(coordinates, layout, ends) {\n    super();\n    this.ends_ = [];\n    this.flatInteriorPointRevision_ = -1;\n    this.flatInteriorPoint_ = null;\n    this.maxDelta_ = -1;\n    this.maxDeltaRevision_ = -1;\n    this.orientedRevision_ = -1;\n    this.orientedFlatCoordinates_ = null;\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(layout, coordinates,);\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(coordinates, layout,);\n    }\n  }\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n  clone() {\n    const polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice(),);\n    polygon.applyProperties(this);\n    return polygon;\n  }\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < (0,require$_DOT__DOT__SLASH_extent_DOT_js.closestSquaredDistanceXY)(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt((0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.arrayMaxSquaredDelta)(this.flatCoordinates, 0, this.ends_, this.stride, 0,),);\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return (0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.assignClosestArrayPoint)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance,);\n  }\n  containsXY(x, y) {\n    return (0,require$_DOT__SLASH_flat_SLASH_contains_DOT_js.linearRingsContainsXY)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y,);\n  }\n  getArea() {\n    return (0,require$_DOT__SLASH_flat_SLASH_area_DOT_js.linearRings)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,);\n  }\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      (0,require$_DOT__SLASH_flat_SLASH_orient_DOT_js.orientLinearRings)(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n    return (0,require$_DOT__SLASH_flat_SLASH_inflate_DOT_js.inflateCoordinatesArray)(flatCoordinates, 0, this.ends_, this.stride);\n  }\n  getEnds() {\n    return this.ends_;\n  }\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = (0,require$_DOT__DOT__SLASH_extent_DOT_js.getCenter)(this.getExtent());\n      this.flatInteriorPoint_ = (0,require$_DOT__SLASH_flat_SLASH_interiorpoint_DOT_js.getInteriorPointOfArray)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0,);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n  getInteriorPoint() {\n    return new default$$require$_DOT__SLASH_Point_DOT_js.default(this.getFlatInteriorPoint(), \"XYM\");\n  }\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new default$$require$_DOT__SLASH_LinearRing_DOT_js.default(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index],), this.layout,);\n  }\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new default$$require$_DOT__SLASH_LinearRing_DOT_js.default(flatCoordinates.slice(offset, end), layout,);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if ((0,require$_DOT__SLASH_flat_SLASH_orient_DOT_js.linearRingsAreOriented)(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = (0,require$_DOT__SLASH_flat_SLASH_orient_DOT_js.orientLinearRings)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride,);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_simplify_DOT_js.quantizeArray)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds,);\n    return new Polygon(simplifiedFlatCoordinates, \"XY\", simplifiedEnds);\n  }\n  getType() {\n    return \"Polygon\";\n  }\n  intersectsExtent(extent) {\n    return (0,require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js.intersectsLinearRingArray)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent,);\n  }\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = (0,require$_DOT__SLASH_flat_SLASH_deflate_DOT_js.deflateCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_,);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\nconst $$default = Polygon;\nfunction circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(flatCoordinates, (0,require$_DOT__DOT__SLASH_sphere_DOT_js.offset)(center, radius, 2 * Math.PI * i / n, sphereRadius),);\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, \"XY\", [flatCoordinates.length]);\n}\nfunction fromExtent(extent) {\n  if ((0,require$_DOT__DOT__SLASH_extent_DOT_js.isEmpty)(extent)) {\n    throw new Error(\"Cannot create polygon from empty extent\");\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY,];\n  return new Polygon(flatCoordinates, \"XY\", [flatCoordinates.length]);\n}\nfunction fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\nfunction makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (0,require$_DOT__DOT__SLASH_math_DOT_js.modulo)(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","circular","center","radius","n","sphereRadius","flatCoordinates","i","require$_DOT__DOT__SLASH_array_DOT_js","extend","require$_DOT__DOT__SLASH_sphere_DOT_js","offset","Math","PI","push","Polygon","length","fromExtent","extent","require$_DOT__DOT__SLASH_extent_DOT_js","isEmpty","Error","minX","minY","maxX","maxY","fromCircle","circle","sides","angle","stride","getStride","layout","getLayout","getCenter","arrayLength","Array","j","polygon","ends","makeRegular","getRadius","getFlatCoordinates","startAngle","require$_DOT__DOT__SLASH_math_DOT_js","modulo","cos","sin","changed","Object","defineProperties","__esModule","enumerable","value","get","default","$$default","require$_DOT__SLASH_LinearRing_DOT_js","require$_DOT__SLASH_Point_DOT_js","require$_DOT__SLASH_SimpleGeometry_DOT_js","require$_DOT__SLASH_flat_SLASH_area_DOT_js","require$_DOT__SLASH_flat_SLASH_closest_DOT_js","require$_DOT__SLASH_flat_SLASH_contains_DOT_js","require$_DOT__SLASH_flat_SLASH_deflate_DOT_js","require$_DOT__SLASH_flat_SLASH_inflate_DOT_js","require$_DOT__SLASH_flat_SLASH_interiorpoint_DOT_js","require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js","require$_DOT__SLASH_flat_SLASH_orient_DOT_js","require$_DOT__SLASH_flat_SLASH_simplify_DOT_js","default$$require$_DOT__SLASH_SimpleGeometry_DOT_js","esmDefault","default$$require$_DOT__SLASH_Point_DOT_js","default$$require$_DOT__SLASH_LinearRing_DOT_js","constructor","coordinates","ends_","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","maxDeltaRevision_","maxDelta_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","appendLinearRing","linearRing","slice","clone","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","closestSquaredDistanceXY","getExtent","getRevision","sqrt","arrayMaxSquaredDelta","assignClosestArrayPoint","containsXY","linearRingsContainsXY","getOrientedFlatCoordinates","getArea","linearRings","getCoordinates","right","orientLinearRings","inflateCoordinatesArray","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPointOfArray","getInteriorPoint","getLinearRingCount","getLinearRing","index","getLinearRings","ii","end","linearRingsAreOriented","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","quantizeArray","getType","intersectsExtent","intersectsLinearRingArray","setLayout","deflateCoordinatesArray"]
}
