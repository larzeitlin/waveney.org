shadow$provide.module$node_modules$ol$layer$Group = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, GroupEvent:{enumerable:!0, get:function() {
    return GroupEvent;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  exports = require("module$node_modules$ol$Collection");
  var require$_DOT__DOT__SLASH_CollectionEventType_DOT_js = require("module$node_modules$ol$CollectionEventType"), require$_DOT__DOT__SLASH_ObjectEventType_DOT_js = require("module$node_modules$ol$ObjectEventType"), require$_DOT__DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts"), require$_DOT__DOT__SLASH_events_SLASH_Event_DOT_js = require("module$node_modules$ol$events$Event");
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events"), require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__DOT__SLASH_obj_DOT_js = require("module$node_modules$ol$obj"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util");
  module = require("module$node_modules$ol$layer$Base");
  var default$$require$_DOT__DOT__SLASH_CollectionEventType_DOT_js = require.esmDefault(require$_DOT__DOT__SLASH_CollectionEventType_DOT_js), default$$require$_DOT__DOT__SLASH_Collection_DOT_js = require.esmDefault(exports), default$$require$_DOT__DOT__SLASH_ObjectEventType_DOT_js = require.esmDefault(require$_DOT__DOT__SLASH_ObjectEventType_DOT_js);
  exports = require.esmDefault(require$_DOT__DOT__SLASH_events_SLASH_Event_DOT_js);
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class GroupEvent extends exports.default {
    constructor(type, layer) {
      super(type);
      this.layer = layer;
    }
  }
  class LayerGroup extends module.default {
    constructor(options) {
      options = options || {};
      const baseOptions = Object.assign({}, options);
      delete baseOptions.layers;
      options = options.layers;
      super(baseOptions);
      this.on;
      this.once;
      this.un;
      this.layersListenerKeys_ = [];
      this.listenerKeys_ = {};
      this.addChangeListener("layers", this.handleLayersChanged_);
      options ? Array.isArray(options) ? options = new default$$require$_DOT__DOT__SLASH_Collection_DOT_js.default(options.slice(), {unique:!0}) : (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)("function" === typeof options.getArray, "Expected `layers` to be an array or a `Collection`") : options = new default$$require$_DOT__DOT__SLASH_Collection_DOT_js.default(void 0, {unique:!0});
      this.setLayers(options);
    }
    handleLayerChange_() {
      this.changed();
    }
    handleLayersChanged_() {
      this.layersListenerKeys_.forEach(require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey);
      this.layersListenerKeys_.length = 0;
      var layers = this.getLayers();
      this.layersListenerKeys_.push((0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layers, default$$require$_DOT__DOT__SLASH_CollectionEventType_DOT_js.default.ADD, this.handleLayersAdd_, this), (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layers, default$$require$_DOT__DOT__SLASH_CollectionEventType_DOT_js.default.REMOVE, this.handleLayersRemove_, this));
      for (var id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey);
      }
      (0,require$_DOT__DOT__SLASH_obj_DOT_js.clear)(this.listenerKeys_);
      layers = layers.getArray();
      for (let i = 0, ii = layers.length; i < ii; i++) {
        id = layers[i], this.registerLayerListeners_(id), this.dispatchEvent(new GroupEvent("addlayer", id));
      }
      this.changed();
    }
    registerLayerListeners_(layer) {
      const listenerKeys = [(0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layer, default$$require$_DOT__DOT__SLASH_ObjectEventType_DOT_js.default.PROPERTYCHANGE, this.handleLayerChange_, this), (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layer, default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, this.handleLayerChange_, this)];
      layer instanceof LayerGroup && listenerKeys.push((0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layer, "addlayer", this.handleLayerGroupAdd_, this), (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(layer, "removelayer", this.handleLayerGroupRemove_, this));
      this.listenerKeys_[(0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(layer)] = listenerKeys;
    }
    handleLayerGroupAdd_(event) {
      this.dispatchEvent(new GroupEvent("addlayer", event.layer));
    }
    handleLayerGroupRemove_(event) {
      this.dispatchEvent(new GroupEvent("removelayer", event.layer));
    }
    handleLayersAdd_(collectionEvent) {
      collectionEvent = collectionEvent.element;
      this.registerLayerListeners_(collectionEvent);
      this.dispatchEvent(new GroupEvent("addlayer", collectionEvent));
      this.changed();
    }
    handleLayersRemove_(collectionEvent) {
      collectionEvent = collectionEvent.element;
      const key = (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(collectionEvent);
      this.listenerKeys_[key].forEach(require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey);
      delete this.listenerKeys_[key];
      this.dispatchEvent(new GroupEvent("removelayer", collectionEvent));
      this.changed();
    }
    getLayers() {
      return this.get("layers");
    }
    setLayers(layers) {
      var collection = this.getLayers();
      if (collection) {
        collection = collection.getArray();
        for (let i = 0, ii = collection.length; i < ii; ++i) {
          this.dispatchEvent(new GroupEvent("removelayer", collection[i]));
        }
      }
      this.set("layers", layers);
    }
    getLayersArray(array) {
      array = void 0 !== array ? array : [];
      this.getLayers().forEach(function(layer) {
        layer.getLayersArray(array);
      });
      return array;
    }
    getLayerStatesArray(dest) {
      const states = void 0 !== dest ? dest : [], pos = states.length;
      this.getLayers().forEach(function(layer) {
        layer.getLayerStatesArray(states);
      });
      const ownLayerState = this.getLayerState();
      let defaultZIndex = ownLayerState.zIndex;
      dest || void 0 !== ownLayerState.zIndex || (defaultZIndex = 0);
      for (let i = pos, ii = states.length; i < ii; i++) {
        dest = states[i], dest.opacity *= ownLayerState.opacity, dest.visible = dest.visible && ownLayerState.visible, dest.maxResolution = Math.min(dest.maxResolution, ownLayerState.maxResolution), dest.minResolution = Math.max(dest.minResolution, ownLayerState.minResolution), dest.minZoom = Math.max(dest.minZoom, ownLayerState.minZoom), dest.maxZoom = Math.min(dest.maxZoom, ownLayerState.maxZoom), void 0 !== ownLayerState.extent && (dest.extent = void 0 !== dest.extent ? (0,require$_DOT__DOT__SLASH_extent_DOT_js.getIntersection)(dest.extent, 
        ownLayerState.extent) : ownLayerState.extent), void 0 === dest.zIndex && (dest.zIndex = defaultZIndex);
      }
      return states;
    }
    getSourceState() {
      return "ready";
    }
  }
  const $$default = LayerGroup;
};

//# sourceMappingURL=module$node_modules$ol$layer$Group.js.map
