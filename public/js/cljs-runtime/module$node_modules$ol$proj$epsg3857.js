shadow$provide.module$node_modules$ol$proj$epsg3857 = function(global, require, module, exports) {
  function fromEPSG4326(input, output, dimension, stride) {
    const length = input.length;
    dimension = 1 < dimension ? dimension : 2;
    stride = stride ?? dimension;
    void 0 === output && (output = 2 < dimension ? input.slice() : Array(length));
    for (dimension = 0; dimension < length; dimension += stride) {
      output[dimension] = HALF_SIZE * input[dimension] / 180;
      let y = 6378137 * Math.log(Math.tan(Math.PI * (+input[dimension + 1] + 90) / 360));
      y > MAX_SAFE_Y ? y = MAX_SAFE_Y : y < -MAX_SAFE_Y && (y = -MAX_SAFE_Y);
      output[dimension + 1] = y;
    }
    return output;
  }
  function toEPSG4326(input, output, dimension, stride) {
    const length = input.length;
    dimension = 1 < dimension ? dimension : 2;
    stride = stride ?? dimension;
    void 0 === output && (output = 2 < dimension ? input.slice() : Array(length));
    for (dimension = 0; dimension < length; dimension += stride) {
      output[dimension] = 180 * input[dimension] / HALF_SIZE, output[dimension + 1] = 360 * Math.atan(Math.exp(input[dimension + 1] / 6378137)) / Math.PI - 90;
    }
    return output;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, EXTENT:{enumerable:!0, get:function() {
    return EXTENT;
  }}, HALF_SIZE:{enumerable:!0, get:function() {
    return HALF_SIZE;
  }}, MAX_SAFE_Y:{enumerable:!0, get:function() {
    return MAX_SAFE_Y;
  }}, PROJECTIONS:{enumerable:!0, get:function() {
    return PROJECTIONS;
  }}, RADIUS:{enumerable:!0, get:function() {
    return 6378137;
  }}, WORLD_EXTENT:{enumerable:!0, get:function() {
    return WORLD_EXTENT;
  }}, fromEPSG4326:{enumerable:!0, get:function() {
    return fromEPSG4326;
  }}, toEPSG4326:{enumerable:!0, get:function() {
    return toEPSG4326;
  }}});
  global = require("module$node_modules$ol$proj$Projection");
  require = require.esmDefault(global);
  const HALF_SIZE = 6378137 * Math.PI, EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE], WORLD_EXTENT = [-180, -85, 180, 85], MAX_SAFE_Y = 6378137 * Math.log(Math.tan(Math.PI / 2));
  class EPSG3857Projection extends require.default {
    constructor(code) {
      super({code, units:"m", extent:EXTENT, global:!0, worldExtent:WORLD_EXTENT, getPointResolution:function(resolution, point) {
        return resolution / Math.cosh(point[1] / 6378137);
      }});
    }
  }
  const PROJECTIONS = [new EPSG3857Projection("EPSG:3857"), new EPSG3857Projection("EPSG:102100"), new EPSG3857Projection("EPSG:102113"), new EPSG3857Projection("EPSG:900913"), new EPSG3857Projection("http://www.opengis.net/def/crs/EPSG/0/3857"), new EPSG3857Projection("http://www.opengis.net/gml/srs/epsg.xml#3857")];
};

//# sourceMappingURL=module$node_modules$ol$proj$epsg3857.js.map
