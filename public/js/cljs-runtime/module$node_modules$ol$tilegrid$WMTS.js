shadow$provide.module$node_modules$ol$tilegrid$WMTS = function(global, require, module, exports) {
  function createFromCapabilitiesMatrixSet(matrixSet, extent, matrixLimits) {
    const resolutions = [], matrixIds = [], origins = [], tileSizes = [], sizes = [];
    matrixLimits = void 0 !== matrixLimits ? matrixLimits : [];
    const projection = (0,require$_DOT__DOT__SLASH_proj_DOT_js.get)(matrixSet.SupportedCRS), metersPerUnit = projection.getMetersPerUnit(), switchOriginXY = projection.getAxisOrientation().startsWith("ne");
    matrixSet.TileMatrix.sort(function(a, b) {
      return b.ScaleDenominator - a.ScaleDenominator;
    });
    matrixSet.TileMatrix.forEach(function(elt) {
      if (0 < matrixLimits.length ? matrixLimits.find(function(elt_ml) {
        return elt.Identifier == elt_ml.TileMatrix ? !0 : elt.Identifier.includes(":") ? !1 : matrixSet.Identifier + ":" + elt.Identifier === elt_ml.TileMatrix;
      }) : 1) {
        matrixIds.push(elt.Identifier);
        const resolution = 0.28e-3 * elt.ScaleDenominator / metersPerUnit, tileWidth = elt.TileWidth, tileHeight = elt.TileHeight;
        switchOriginXY ? origins.push([elt.TopLeftCorner[1], elt.TopLeftCorner[0]]) : origins.push(elt.TopLeftCorner);
        resolutions.push(resolution);
        tileSizes.push(tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]);
        sizes.push([elt.MatrixWidth, elt.MatrixHeight]);
      }
    });
    return new WMTSTileGrid({extent, origins, resolutions, matrixIds, tileSizes, sizes});
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createFromCapabilitiesMatrixSet:{enumerable:!0, get:function() {
    return createFromCapabilitiesMatrixSet;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_proj_DOT_js = require("module$node_modules$ol$proj");
  global = require("module$node_modules$ol$tilegrid$TileGrid");
  require = require.esmDefault(global);
  class WMTSTileGrid extends require.default {
    constructor(options) {
      super({extent:options.extent, origin:options.origin, origins:options.origins, resolutions:options.resolutions, tileSize:options.tileSize, tileSizes:options.tileSizes, sizes:options.sizes});
      this.matrixIds_ = options.matrixIds;
    }
    getMatrixId(z) {
      return this.matrixIds_[z];
    }
    getMatrixIds() {
      return this.matrixIds_;
    }
  }
  const $$default = WMTSTileGrid;
};

//# sourceMappingURL=module$node_modules$ol$tilegrid$WMTS.js.map
