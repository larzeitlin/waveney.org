shadow$provide.module$node_modules$ol$layer$Layer = function(global, require, module, exports) {
  function inView(layerState, viewState) {
    if (!layerState.visible) {
      return !1;
    }
    const resolution = viewState.resolution;
    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {
      return !1;
    }
    viewState = viewState.zoom;
    return viewState > layerState.minZoom && viewState <= layerState.maxZoom;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, inView:{enumerable:!0, get:function() {
    return inView;
  }}});
  global = require("module$node_modules$ol$View");
  var require$_DOT__DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts");
  module = require("module$node_modules$ol$events$EventType");
  var require$_DOT__DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events"), require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent");
  exports = require("module$node_modules$ol$render$EventType");
  var require$_DOT__SLASH_Base_DOT_js = require("module$node_modules$ol$layer$Base"), require$_DOT__SLASH_Property_DOT_js = require("module$node_modules$ol$layer$Property");
  require$_DOT__SLASH_Base_DOT_js = require.esmDefault(require$_DOT__SLASH_Base_DOT_js);
  var default$$require$_DOT__DOT__SLASH_View_DOT_js = require.esmDefault(global), default$$require$_DOT__DOT__SLASH_render_SLASH_EventType_DOT_js = require.esmDefault(exports), default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(module), default$$require$_DOT__SLASH_Property_DOT_js = require.esmDefault(require$_DOT__SLASH_Property_DOT_js);
  class Layer extends require$_DOT__SLASH_Base_DOT_js.default {
    constructor(options) {
      const baseOptions = Object.assign({}, options);
      delete baseOptions.source;
      super(baseOptions);
      this.on;
      this.once;
      this.un;
      this.renderer_ = this.sourceChangeKey_ = this.mapRenderKey_ = this.mapPrecomposeKey_ = null;
      this.rendered = this.sourceReady_ = !1;
      options.render && (this.render = options.render);
      options.map && this.setMap(options.map);
      this.addChangeListener(default$$require$_DOT__SLASH_Property_DOT_js.default.SOURCE, this.handleSourcePropertyChange_);
      this.setSource(options.source ? options.source : null);
    }
    getLayersArray(array) {
      array = array ? array : [];
      array.push(this);
      return array;
    }
    getLayerStatesArray(states) {
      states = states ? states : [];
      states.push(this.getLayerState());
      return states;
    }
    getSource() {
      return this.get(default$$require$_DOT__SLASH_Property_DOT_js.default.SOURCE) || null;
    }
    getRenderSource() {
      return this.getSource();
    }
    getSourceState() {
      const source = this.getSource();
      return source ? source.getState() : "undefined";
    }
    handleSourceChange_() {
      this.changed();
      this.sourceReady_ || "ready" !== this.getSource().getState() || (this.sourceReady_ = !0, this.dispatchEvent("sourceready"));
    }
    handleSourcePropertyChange_() {
      this.sourceChangeKey_ && ((0,require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey)(this.sourceChangeKey_), this.sourceChangeKey_ = null);
      this.sourceReady_ = !1;
      const source = this.getSource();
      source && (this.sourceChangeKey_ = (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(source, default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, this.handleSourceChange_, this), "ready" === source.getState() && (this.sourceReady_ = !0, setTimeout(() => {
        this.dispatchEvent("sourceready");
      }, 0)), this.clearRenderer());
      this.changed();
    }
    getFeatures(pixel) {
      return this.renderer_ ? this.renderer_.getFeatures(pixel) : Promise.resolve([]);
    }
    getData(pixel) {
      return this.renderer_ && this.rendered ? this.renderer_.getData(pixel) : null;
    }
    isVisible(view) {
      var map = this.getMapInternal();
      !view && map && (view = map.getView());
      view = view instanceof default$$require$_DOT__DOT__SLASH_View_DOT_js.default ? {viewState:view.getState(), extent:view.calculateExtent()} : view;
      !view.layerStatesArray && map && (view.layerStatesArray = map.getLayerGroup().getLayerStatesArray());
      if (view.layerStatesArray) {
        if (map = view.layerStatesArray.find(layerState => layerState.layer === this), !map) {
          return !1;
        }
      } else {
        map = this.getLayerState();
      }
      const layerExtent = this.getExtent();
      return inView(map, view.viewState) && (!layerExtent || (0,require$_DOT__DOT__SLASH_extent_DOT_js.intersects)(layerExtent, view.extent));
    }
    getAttributions(view) {
      if (!this.isVisible(view)) {
        return [];
      }
      var getAttributions = this.getSource()?.getAttributions();
      if (!getAttributions) {
        return [];
      }
      view = view instanceof default$$require$_DOT__DOT__SLASH_View_DOT_js.default ? view.getViewStateAndExtent() : view;
      getAttributions = getAttributions(view);
      Array.isArray(getAttributions) || (getAttributions = [getAttributions]);
      return getAttributions;
    }
    render(frameState, target) {
      const layerRenderer = this.getRenderer();
      return layerRenderer.prepareFrame(frameState) ? (this.rendered = !0, layerRenderer.renderFrame(frameState, target)) : null;
    }
    unrender() {
      this.rendered = !1;
    }
    getDeclutter() {
    }
    renderDeclutter(frameState, layerState) {
    }
    renderDeferred(frameState) {
      const layerRenderer = this.getRenderer();
      layerRenderer && layerRenderer.renderDeferred(frameState);
    }
    setMapInternal(map) {
      map || this.unrender();
      this.set(default$$require$_DOT__SLASH_Property_DOT_js.default.MAP, map);
    }
    getMapInternal() {
      return this.get(default$$require$_DOT__SLASH_Property_DOT_js.default.MAP);
    }
    setMap(map) {
      this.mapPrecomposeKey_ && ((0,require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey)(this.mapPrecomposeKey_), this.mapPrecomposeKey_ = null);
      map || this.changed();
      this.mapRenderKey_ && ((0,require$_DOT__DOT__SLASH_events_DOT_js.unlistenByKey)(this.mapRenderKey_), this.mapRenderKey_ = null);
      map && (this.mapPrecomposeKey_ = (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(map, default$$require$_DOT__DOT__SLASH_render_SLASH_EventType_DOT_js.default.PRECOMPOSE, this.handlePrecompose_, this), this.mapRenderKey_ = (0,require$_DOT__DOT__SLASH_events_DOT_js.listen)(this, default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, map.render, map), this.changed());
    }
    handlePrecompose_(renderEvent) {
      renderEvent = renderEvent.frameState.layerStatesArray;
      const layerState = this.getLayerState(!1);
      (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(!renderEvent.some(arrayLayerState => arrayLayerState.layer === layerState.layer), "A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.");
      renderEvent.push(layerState);
    }
    setSource(source) {
      this.set(default$$require$_DOT__SLASH_Property_DOT_js.default.SOURCE, source);
    }
    getRenderer() {
      this.renderer_ || (this.renderer_ = this.createRenderer());
      return this.renderer_;
    }
    hasRenderer() {
      return !!this.renderer_;
    }
    createRenderer() {
      return null;
    }
    clearRenderer() {
      this.renderer_ && (this.renderer_.dispose(), delete this.renderer_);
    }
    disposeInternal() {
      this.clearRenderer();
      this.setSource(null);
      super.disposeInternal();
    }
  }
  const $$default = Layer;
};

//# sourceMappingURL=module$node_modules$ol$layer$Layer.js.map
