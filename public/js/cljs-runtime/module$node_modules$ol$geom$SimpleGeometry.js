shadow$provide.module$node_modules$ol$geom$SimpleGeometry = function(global, require, module, exports) {
  function getLayoutForStride(stride) {
    let layout;
    2 == stride ? layout = "XY" : 3 == stride ? layout = "XYZ" : 4 == stride && (layout = "XYZM");
    return layout;
  }
  function getStrideForLayout(layout) {
    let stride;
    "XY" == layout ? stride = 2 : "XYZ" == layout || "XYM" == layout ? stride = 3 : "XYZM" == layout && (stride = 4);
    return stride;
  }
  function transformGeom2D(simpleGeometry, transform, dest) {
    const flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    }
    simpleGeometry = simpleGeometry.getStride();
    return (0,require$_DOT__SLASH_flat_SLASH_transform_DOT_js.transform2D)(flatCoordinates, 0, flatCoordinates.length, simpleGeometry, transform, dest);
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, getLayoutForStride:{enumerable:!0, get:function() {
    return getLayoutForStride;
  }}, getStrideForLayout:{enumerable:!0, get:function() {
    return getStrideForLayout;
  }}, transformGeom2D:{enumerable:!0, get:function() {
    return transformGeom2D;
  }}});
  var require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util");
  global = require("module$node_modules$ol$geom$Geometry");
  var require$_DOT__SLASH_flat_SLASH_transform_DOT_js = require("module$node_modules$ol$geom$flat$transform");
  require = require.esmDefault(global);
  class SimpleGeometry extends require.default {
    constructor() {
      super();
      this.layout = "XY";
      this.stride = 2;
      this.flatCoordinates;
    }
    computeExtent(extent) {
      return (0,require$_DOT__DOT__SLASH_extent_DOT_js.createOrUpdateFromFlatCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
    }
    getCoordinates() {
      return (0,require$_DOT__DOT__SLASH_util_DOT_js.abstract)();
    }
    getFirstCoordinate() {
      return this.flatCoordinates.slice(0, this.stride);
    }
    getFlatCoordinates() {
      return this.flatCoordinates;
    }
    getLastCoordinate() {
      return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    }
    getLayout() {
      return this.layout;
    }
    getSimplifiedGeometry(squaredTolerance) {
      this.simplifiedGeometryRevision !== this.getRevision() && (this.simplifiedGeometryMaxMinSquaredTolerance = 0, this.simplifiedGeometryRevision = this.getRevision());
      if (0 > squaredTolerance || 0 !== this.simplifiedGeometryMaxMinSquaredTolerance && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {
        return this;
      }
      const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
      if (simplifiedGeometry.getFlatCoordinates().length < this.flatCoordinates.length) {
        return simplifiedGeometry;
      }
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }
    getSimplifiedGeometryInternal(squaredTolerance) {
      return this;
    }
    getStride() {
      return this.stride;
    }
    setFlatCoordinates(layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    }
    setCoordinates(coordinates, layout) {
      (0,require$_DOT__DOT__SLASH_util_DOT_js.abstract)();
    }
    setLayout(layout, coordinates, nesting) {
      if (layout) {
        coordinates = getStrideForLayout(layout);
      } else {
        for (layout = 0; layout < nesting; ++layout) {
          if (0 === coordinates.length) {
            this.layout = "XY";
            this.stride = 2;
            return;
          }
          coordinates = coordinates[0];
        }
        coordinates = coordinates.length;
        layout = getLayoutForStride(coordinates);
      }
      this.layout = layout;
      this.stride = coordinates;
    }
    applyTransform(transformFn) {
      this.flatCoordinates && (transformFn(this.flatCoordinates, this.flatCoordinates, this.layout.startsWith("XYZ") ? 3 : 2, this.stride), this.changed());
    }
    rotate(angle, anchor) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        (0,require$_DOT__SLASH_flat_SLASH_transform_DOT_js.rotate)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
        this.changed();
      }
    }
    scale(sx, sy, anchor) {
      void 0 === sy && (sy = sx);
      anchor || (anchor = (0,require$_DOT__DOT__SLASH_extent_DOT_js.getCenter)(this.getExtent()));
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        (0,require$_DOT__SLASH_flat_SLASH_transform_DOT_js.scale)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
        this.changed();
      }
    }
    translate(deltaX, deltaY) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        (0,require$_DOT__SLASH_flat_SLASH_transform_DOT_js.translate)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
        this.changed();
      }
    }
  }
  const $$default = SimpleGeometry;
};

//# sourceMappingURL=module$node_modules$ol$geom$SimpleGeometry.js.map
