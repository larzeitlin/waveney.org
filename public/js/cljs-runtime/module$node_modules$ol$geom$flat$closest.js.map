{
"version":3,
"file":"module$node_modules$ol$geom$flat$closest.js",
"lineCount":120,
"mappings":"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",
"sources":["node_modules/ol/geom/flat/closest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$geom$flat$closest\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, arrayMaxSquaredDelta:{enumerable:true, get:function() {\n  return arrayMaxSquaredDelta;\n}}, assignClosestArrayPoint:{enumerable:true, get:function() {\n  return assignClosestArrayPoint;\n}}, assignClosestMultiArrayPoint:{enumerable:true, get:function() {\n  return assignClosestMultiArrayPoint;\n}}, assignClosestPoint:{enumerable:true, get:function() {\n  return assignClosestPoint;\n}}, maxSquaredDelta:{enumerable:true, get:function() {\n  return maxSquaredDelta;\n}}, multiArrayMaxSquaredDelta:{enumerable:true, get:function() {\n  return multiArrayMaxSquaredDelta;\n}}});\nvar require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js = require(\"../../math.js\");\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint,) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.lerp)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t,);\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\nfunction maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredDistance)(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\nfunction arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max,) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\nfunction multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max,) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\nfunction assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint,) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    squaredDistance = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredDistance)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1],);\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint,);\n    squaredDistance = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredDistance)(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1,);\n    }\n  }\n  if (isRing) {\n    assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint,);\n    squaredDistance = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredDistance)(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\nfunction assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint,) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint,);\n    offset = end;\n  }\n  return minSquaredDistance;\n}\nfunction assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint,) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint,);\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","assignClosest","flatCoordinates","offset1","offset2","stride","x","y","closestPoint","x1","y1","dx","dy","t","offset","i","require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js","lerp","length","maxSquaredDelta","end","max","x2","y2","squaredDelta","squaredDistance","arrayMaxSquaredDelta","ends","ii","multiArrayMaxSquaredDelta","endss","assignClosestPoint","maxDelta","isRing","minSquaredDistance","tmpPoint","NaN","index","Math","sqrt","assignClosestArrayPoint","assignClosestMultiArrayPoint","Object","defineProperties","__esModule","enumerable","value","get"]
}
