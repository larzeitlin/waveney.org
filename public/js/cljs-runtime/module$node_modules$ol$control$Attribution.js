shadow$provide.module$node_modules$ol$control$Attribution = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__DOT__SLASH_css_DOT_js = require("module$node_modules$ol$css"), require$_DOT__DOT__SLASH_dom_DOT_js = require("module$node_modules$ol$dom");
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions");
  module = require("module$node_modules$ol$control$Control");
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Attribution extends module.default {
    constructor(options) {
      options = options ? options : {};
      super({element:document.createElement("div"), render:options.render, target:options.target});
      this.ulElement_ = document.createElement("ul");
      this.userCollapsed_ = this.collapsed_ = void 0 !== options.collapsed ? options.collapsed : !0;
      this.overrideCollapsible_ = void 0 !== options.collapsible;
      this.collapsible_ = void 0 !== options.collapsible ? options.collapsible : !0;
      this.collapsible_ || (this.collapsed_ = !1);
      this.attributions_ = options.attributions;
      const className = void 0 !== options.className ? options.className : "ol-attribution";
      var tipLabel = void 0 !== options.tipLabel ? options.tipLabel : "Attributions", expandClassName = void 0 !== options.expandClassName ? options.expandClassName : className + "-expand";
      const collapseLabel = void 0 !== options.collapseLabel ? options.collapseLabel : "â€º", collapseClassName = void 0 !== options.collapseClassName ? options.collapseClassName : className + "-collapse";
      "string" === typeof collapseLabel ? (this.collapseLabel_ = document.createElement("span"), this.collapseLabel_.textContent = collapseLabel, this.collapseLabel_.className = collapseClassName) : this.collapseLabel_ = collapseLabel;
      options = void 0 !== options.label ? options.label : "i";
      "string" === typeof options ? (this.label_ = document.createElement("span"), this.label_.textContent = options, this.label_.className = expandClassName) : this.label_ = options;
      expandClassName = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
      this.toggleButton_ = document.createElement("button");
      this.toggleButton_.setAttribute("type", "button");
      this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
      this.toggleButton_.title = tipLabel;
      this.toggleButton_.appendChild(expandClassName);
      this.toggleButton_.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CLICK, this.handleClick_.bind(this), !1);
      tipLabel = this.element;
      tipLabel.className = className + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_UNSELECTABLE + " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? " " + require$_DOT__DOT__SLASH_css_DOT_js.CLASS_COLLAPSED : "") + (this.collapsible_ ? "" : " ol-uncollapsible");
      tipLabel.appendChild(this.toggleButton_);
      tipLabel.appendChild(this.ulElement_);
      this.renderedAttributions_ = [];
      this.renderedVisible_ = !0;
    }
    collectSourceAttributions_(frameState) {
      var layers = this.getMap().getAllLayers();
      const visibleAttributions = new Set(layers.flatMap(layer => layer.getAttributions(frameState)));
      void 0 !== this.attributions_ && (Array.isArray(this.attributions_) ? this.attributions_.forEach(item => visibleAttributions.add(item)) : visibleAttributions.add(this.attributions_));
      this.overrideCollapsible_ || (layers = !layers.some(layer => !1 === layer.getSource()?.getAttributionsCollapsible()), this.setCollapsible(layers));
      return Array.from(visibleAttributions);
    }
    async updateElement_(frameState) {
      if (frameState) {
        frameState = await Promise.all(this.collectSourceAttributions_(frameState).map(attribution => (0,require$_DOT__DOT__SLASH_functions_DOT_js.toPromise)(() => attribution)));
        var visible = 0 < frameState.length;
        this.renderedVisible_ != visible && (this.element.style.display = visible ? "" : "none", this.renderedVisible_ = visible);
        if (!(0,require$_DOT__DOT__SLASH_array_DOT_js.equals)(frameState, this.renderedAttributions_)) {
          (0,require$_DOT__DOT__SLASH_dom_DOT_js.removeChildren)(this.ulElement_);
          for (let i = 0, ii = frameState.length; i < ii; ++i) {
            visible = document.createElement("li"), visible.innerHTML = frameState[i], this.ulElement_.appendChild(visible);
          }
          this.renderedAttributions_ = frameState;
        }
      } else {
        this.renderedVisible_ && (this.element.style.display = "none", this.renderedVisible_ = !1);
      }
    }
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
      this.userCollapsed_ = this.collapsed_;
    }
    handleToggle_() {
      this.element.classList.toggle(require$_DOT__DOT__SLASH_css_DOT_js.CLASS_COLLAPSED);
      this.collapsed_ ? (0,require$_DOT__DOT__SLASH_dom_DOT_js.replaceNode)(this.collapseLabel_, this.label_) : (0,require$_DOT__DOT__SLASH_dom_DOT_js.replaceNode)(this.label_, this.collapseLabel_);
      this.collapsed_ = !this.collapsed_;
      this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
    }
    getCollapsible() {
      return this.collapsible_;
    }
    setCollapsible(collapsible) {
      this.collapsible_ !== collapsible && (this.collapsible_ = collapsible, this.element.classList.toggle("ol-uncollapsible"), this.userCollapsed_ && this.handleToggle_());
    }
    setCollapsed(collapsed) {
      this.userCollapsed_ = collapsed;
      this.collapsible_ && this.collapsed_ !== collapsed && this.handleToggle_();
    }
    getCollapsed() {
      return this.collapsed_;
    }
    render(mapEvent) {
      this.updateElement_(mapEvent.frameState);
    }
  }
  const $$default = Attribution;
};

//# sourceMappingURL=module$node_modules$ol$control$Attribution.js.map
