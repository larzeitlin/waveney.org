{
"version":3,
"file":"module$node_modules$ol$geom$MultiLineString.js",
"lineCount":105,
"mappings":"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",
"sources":["node_modules/ol/geom/MultiLineString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$geom$MultiLineString\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, default:{enumerable:true, get:function() {\n  return $$default;\n}}});\nvar require$_DOT__DOT__SLASH_array_DOT_js = require(\"../array.js\");\nvar require$_DOT__DOT__SLASH_extent_DOT_js = require(\"../extent.js\");\nvar require$_DOT__SLASH_LineString_DOT_js = require(\"./LineString.js\");\nvar require$_DOT__SLASH_SimpleGeometry_DOT_js = require(\"./SimpleGeometry.js\");\nvar require$_DOT__SLASH_flat_SLASH_closest_DOT_js = require(\"./flat/closest.js\");\nvar require$_DOT__SLASH_flat_SLASH_deflate_DOT_js = require(\"./flat/deflate.js\");\nvar require$_DOT__SLASH_flat_SLASH_inflate_DOT_js = require(\"./flat/inflate.js\");\nvar require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js = require(\"./flat/interpolate.js\");\nvar require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js = require(\"./flat/intersectsextent.js\");\nvar require$_DOT__SLASH_flat_SLASH_simplify_DOT_js = require(\"./flat/simplify.js\");\nvar default$$require$_DOT__SLASH_SimpleGeometry_DOT_js = require.esmDefault(require$_DOT__SLASH_SimpleGeometry_DOT_js);\nvar default$$require$_DOT__SLASH_LineString_DOT_js = require.esmDefault(require$_DOT__SLASH_LineString_DOT_js);\nclass MultiLineString extends default$$require$_DOT__SLASH_SimpleGeometry_DOT_js.default {\n  constructor(coordinates, layout, ends) {\n    super();\n    this.ends_ = [];\n    this.maxDelta_ = -1;\n    this.maxDeltaRevision_ = -1;\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(coordinates, layout,);\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(layout, coordinates,);\n      this.ends_ = ends;\n    } else {\n      const lineStrings = coordinates;\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      const layout = lineStrings.length === 0 ? this.getLayout() : lineStrings[0].getLayout();\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n  appendLineString(lineString) {\n    (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n  clone() {\n    const multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice(),);\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < (0,require$_DOT__DOT__SLASH_extent_DOT_js.closestSquaredDistanceXY)(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt((0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.arrayMaxSquaredDelta)(this.flatCoordinates, 0, this.ends_, this.stride, 0,),);\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return (0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.assignClosestArrayPoint)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance,);\n  }\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (this.layout != \"XYM\" && this.layout != \"XYZM\" || this.flatCoordinates.length === 0) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.lineStringsCoordinateAtM)(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate,);\n  }\n  getCoordinates() {\n    return (0,require$_DOT__SLASH_flat_SLASH_inflate_DOT_js.inflateCoordinatesArray)(this.flatCoordinates, 0, this.ends_, this.stride,);\n  }\n  getEnds() {\n    return this.ends_;\n  }\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new default$$require$_DOT__SLASH_LineString_DOT_js.default(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index],), this.layout,);\n  }\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new default$$require$_DOT__SLASH_LineString_DOT_js.default(flatCoordinates.slice(offset, end), layout,);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.interpolatePoint)(flatCoordinates, offset, end, stride, 0.5,);\n      (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_simplify_DOT_js.douglasPeuckerArray)(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds,);\n    return new MultiLineString(simplifiedFlatCoordinates, \"XY\", simplifiedEnds);\n  }\n  getType() {\n    return \"MultiLineString\";\n  }\n  intersectsExtent(extent) {\n    return (0,require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js.intersectsLineStringArray)(this.flatCoordinates, 0, this.ends_, this.stride, extent,);\n  }\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = (0,require$_DOT__SLASH_flat_SLASH_deflate_DOT_js.deflateCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_,);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\nconst $$default = MultiLineString;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperties","__esModule","enumerable","value","default","get","$$default","require$_DOT__DOT__SLASH_array_DOT_js","require$_DOT__DOT__SLASH_extent_DOT_js","require$_DOT__SLASH_LineString_DOT_js","require$_DOT__SLASH_SimpleGeometry_DOT_js","require$_DOT__SLASH_flat_SLASH_closest_DOT_js","require$_DOT__SLASH_flat_SLASH_deflate_DOT_js","require$_DOT__SLASH_flat_SLASH_inflate_DOT_js","require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js","require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js","require$_DOT__SLASH_flat_SLASH_simplify_DOT_js","default$$require$_DOT__SLASH_SimpleGeometry_DOT_js","esmDefault","default$$require$_DOT__SLASH_LineString_DOT_js","MultiLineString","constructor","coordinates","layout","ends","ends_","maxDeltaRevision_","maxDelta_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","flatCoordinates","i","ii","length","extend","lineString","getFlatCoordinates","push","getLayout","appendLineString","slice","changed","clone","multiLineString","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","closestSquaredDistanceXY","getExtent","getRevision","Math","sqrt","arrayMaxSquaredDelta","stride","assignClosestArrayPoint","getCoordinateAtM","m","extrapolate","interpolate","lineStringsCoordinateAtM","getCoordinates","inflateCoordinatesArray","getEnds","getLineString","index","getLineStrings","lineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","interpolatePoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","douglasPeuckerArray","getType","intersectsExtent","extent","intersectsLineStringArray","setLayout","deflateCoordinatesArray"]
}
