shadow$provide.module$node_modules$ol$structs$RBush = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$rbush$index");
  var require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__DOT__SLASH_obj_DOT_js = require("module$node_modules$ol$obj"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), default$$require$rbush = require.esmDefault(global);
  class RBush {
    constructor(maxEntries) {
      this.rbush_ = new default$$require$rbush.default(maxEntries);
      this.items_ = {};
    }
    insert(extent, value) {
      extent = {minX:extent[0], minY:extent[1], maxX:extent[2], maxY:extent[3], value};
      this.rbush_.insert(extent);
      this.items_[(0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(value)] = extent;
    }
    load(extents, values) {
      const items = Array(values.length);
      for (let i = 0, l = values.length; i < l; i++) {
        var extent = extents[i];
        const value = values[i];
        extent = {minX:extent[0], minY:extent[1], maxX:extent[2], maxY:extent[3], value};
        items[i] = extent;
        this.items_[(0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(value)] = extent;
      }
      this.rbush_.load(items);
    }
    remove(value) {
      value = (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(value);
      const item = this.items_[value];
      delete this.items_[value];
      return null !== this.rbush_.remove(item);
    }
    update(extent, value) {
      const item = this.items_[(0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(value)];
      (0,require$_DOT__DOT__SLASH_extent_DOT_js.equals)([item.minX, item.minY, item.maxX, item.maxY], extent) || (this.remove(value), this.insert(extent, value));
    }
    getAll() {
      return this.rbush_.all().map(function(item) {
        return item.value;
      });
    }
    getInExtent(extent) {
      return this.rbush_.search({minX:extent[0], minY:extent[1], maxX:extent[2], maxY:extent[3]}).map(function(item) {
        return item.value;
      });
    }
    forEach(callback) {
      return this.forEach_(this.getAll(), callback);
    }
    forEachInExtent(extent, callback) {
      return this.forEach_(this.getInExtent(extent), callback);
    }
    forEach_(values, callback) {
      let result;
      for (let i = 0, l = values.length; i < l && !(result = callback(values[i])); i++) {
      }
      return result;
    }
    isEmpty() {
      return (0,require$_DOT__DOT__SLASH_obj_DOT_js.isEmpty)(this.items_);
    }
    clear() {
      this.rbush_.clear();
      this.items_ = {};
    }
    getExtent(extent) {
      const data = this.rbush_.toJSON();
      return (0,require$_DOT__DOT__SLASH_extent_DOT_js.createOrUpdate)(data.minX, data.minY, data.maxX, data.maxY, extent);
    }
    concat(rbush) {
      this.rbush_.load(rbush.rbush_.all());
      for (const i in rbush.items_) {
        this.items_[i] = rbush.items_[i];
      }
    }
  }
  const $$default = RBush;
};

//# sourceMappingURL=module$node_modules$ol$structs$RBush.js.map
