shadow$provide.module$node_modules$ol$VectorRenderTile = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$Tile");
  var require$_DOT__SLASH_dom_DOT_js = require("module$node_modules$ol$dom"), require$_DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util");
  require = require.esmDefault(global);
  const canvasPool = [];
  class VectorRenderTile extends require.default {
    constructor(tileCoord, state, urlTileCoord, getSourceTiles, removeSourceTiles) {
      super(tileCoord, state, {transition:0});
      this.context_ = null;
      this.executorGroups = {};
      this.loadingSourceTiles = 0;
      this.hitDetectionImageData = {};
      this.replayState_ = {};
      this.sourceTiles = [];
      this.errorTileKeys = {};
      this.wantedResolution;
      this.getSourceTiles = getSourceTiles.bind(void 0, this);
      this.removeSourceTiles_ = removeSourceTiles;
      this.wrappedTileCoord = urlTileCoord;
    }
    getContext() {
      this.context_ || (this.context_ = (0,require$_DOT__SLASH_dom_DOT_js.createCanvasContext2D)(1, 1, canvasPool));
      return this.context_;
    }
    hasContext() {
      return !!this.context_;
    }
    getImage() {
      return this.hasContext() ? this.getContext().canvas : null;
    }
    getReplayState(layer) {
      layer = (0,require$_DOT__SLASH_util_DOT_js.getUid)(layer);
      layer in this.replayState_ || (this.replayState_[layer] = {dirty:!1, renderedRenderOrder:null, renderedResolution:NaN, renderedRevision:-1, renderedTileResolution:NaN, renderedTileRevision:-1, renderedTileZ:-1});
      return this.replayState_[layer];
    }
    load() {
      this.getSourceTiles();
    }
    release() {
      this.context_ && ((0,require$_DOT__SLASH_dom_DOT_js.releaseCanvas)(this.context_), canvasPool.push(this.context_.canvas), this.context_ = null);
      this.removeSourceTiles_(this);
      this.sourceTiles.length = 0;
      super.release();
    }
  }
  const $$default = VectorRenderTile;
};

//# sourceMappingURL=module$node_modules$ol$VectorRenderTile.js.map
