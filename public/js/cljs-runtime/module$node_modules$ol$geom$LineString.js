shadow$provide.module$node_modules$ol$geom$LineString = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent");
  global = require("module$node_modules$ol$geom$SimpleGeometry");
  var require$_DOT__SLASH_flat_SLASH_closest_DOT_js = require("module$node_modules$ol$geom$flat$closest"), require$_DOT__SLASH_flat_SLASH_deflate_DOT_js = require("module$node_modules$ol$geom$flat$deflate"), require$_DOT__SLASH_flat_SLASH_inflate_DOT_js = require("module$node_modules$ol$geom$flat$inflate"), require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js = require("module$node_modules$ol$geom$flat$interpolate"), require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js = require("module$node_modules$ol$geom$flat$intersectsextent"), 
  require$_DOT__SLASH_flat_SLASH_length_DOT_js = require("module$node_modules$ol$geom$flat$length"), require$_DOT__SLASH_flat_SLASH_segments_DOT_js = require("module$node_modules$ol$geom$flat$segments"), require$_DOT__SLASH_flat_SLASH_simplify_DOT_js = require("module$node_modules$ol$geom$flat$simplify");
  require = require.esmDefault(global);
  class LineString extends require.default {
    constructor(coordinates, layout) {
      super();
      this.flatMidpoint_ = null;
      this.maxDeltaRevision_ = this.maxDelta_ = this.flatMidpointRevision_ = -1;
      void 0 === layout || Array.isArray(coordinates[0]) ? this.setCoordinates(coordinates, layout) : this.setFlatCoordinates(layout, coordinates);
    }
    appendCoordinate(coordinate) {
      (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(this.flatCoordinates, coordinate);
      this.changed();
    }
    clone() {
      const lineString = new LineString(this.flatCoordinates.slice(), this.layout);
      lineString.applyProperties(this);
      return lineString;
    }
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < (0,require$_DOT__DOT__SLASH_extent_DOT_js.closestSquaredDistanceXY)(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      this.maxDeltaRevision_ != this.getRevision() && (this.maxDelta_ = Math.sqrt((0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.maxSquaredDelta)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0)), this.maxDeltaRevision_ = this.getRevision());
      return (0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.assignClosestPoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, !1, x, y, closestPoint, minSquaredDistance);
    }
    forEachSegment(callback) {
      return (0,require$_DOT__SLASH_flat_SLASH_segments_DOT_js.forEach)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
    }
    getCoordinateAtM(m, extrapolate) {
      return "XYM" != this.layout && "XYZM" != this.layout ? null : (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.lineStringCoordinateAtM)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, void 0 !== extrapolate ? extrapolate : !1);
    }
    getCoordinates() {
      return (0,require$_DOT__SLASH_flat_SLASH_inflate_DOT_js.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    getCoordinateAt(fraction, dest) {
      return (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.interpolatePoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, dest, this.stride);
    }
    getLength() {
      return (0,require$_DOT__SLASH_flat_SLASH_length_DOT_js.lineStringLength)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    getFlatMidpoint() {
      this.flatMidpointRevision_ != this.getRevision() && (this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_ ?? void 0), this.flatMidpointRevision_ = this.getRevision());
      return this.flatMidpoint_;
    }
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_simplify_DOT_js.douglasPeucker)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LineString(simplifiedFlatCoordinates, "XY");
    }
    getType() {
      return "LineString";
    }
    intersectsExtent(extent) {
      return (0,require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js.intersectsLineString)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent, this.getExtent());
    }
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      this.flatCoordinates || (this.flatCoordinates = []);
      this.flatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_deflate_DOT_js.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }
  const $$default = LineString;
};

//# sourceMappingURL=module$node_modules$ol$geom$LineString.js.map
