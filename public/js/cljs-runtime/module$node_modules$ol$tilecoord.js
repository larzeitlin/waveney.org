shadow$provide.module$node_modules$ol$tilecoord = function(global, require, module, exports) {
  function createOrUpdate(z, x, y, tileCoord) {
    return void 0 !== tileCoord ? (tileCoord[0] = z, tileCoord[1] = x, tileCoord[2] = y, tileCoord) : [z, x, y];
  }
  function getKeyZXY(z, x, y) {
    return z + "/" + x + "/" + y;
  }
  function getKey(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }
  function getCacheKeyForTileKey(tileKey) {
    const [z, x, y] = tileKey.substring(tileKey.lastIndexOf("/") + 1, tileKey.length).split(",").map(Number);
    return getKeyZXY(z, x, y);
  }
  function fromKey(key) {
    return key.split("/").map(Number);
  }
  function hash(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
  }
  function hashZXY(z, x, y) {
    return (x << z) + y;
  }
  function withinExtentAndZ(tileCoord, tileGrid) {
    const z = tileCoord[0], x = tileCoord[1];
    tileCoord = tileCoord[2];
    return tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom() ? !1 : (tileGrid = tileGrid.getFullTileRange(z)) ? tileGrid.containsXY(x, tileCoord) : !0;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createOrUpdate:{enumerable:!0, get:function() {
    return createOrUpdate;
  }}, fromKey:{enumerable:!0, get:function() {
    return fromKey;
  }}, getCacheKeyForTileKey:{enumerable:!0, get:function() {
    return getCacheKeyForTileKey;
  }}, getKey:{enumerable:!0, get:function() {
    return getKey;
  }}, getKeyZXY:{enumerable:!0, get:function() {
    return getKeyZXY;
  }}, hash:{enumerable:!0, get:function() {
    return hash;
  }}, hashZXY:{enumerable:!0, get:function() {
    return hashZXY;
  }}, withinExtentAndZ:{enumerable:!0, get:function() {
    return withinExtentAndZ;
  }}});
};

//# sourceMappingURL=module$node_modules$ol$tilecoord.js.map
