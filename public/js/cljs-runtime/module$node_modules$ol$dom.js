shadow$provide.module$node_modules$ol$dom = function(global, require, module, exports) {
  function createCanvasContext2D(width, height, canvasPool, settings) {
    canvasPool = canvasPool && canvasPool.length ? canvasPool.shift() : require$_DOT__SLASH_has_DOT_js.WORKER_OFFSCREEN_CANVAS ? new OffscreenCanvas(width || 300, height || 300) : document.createElement("canvas");
    width && (canvasPool.width = width);
    height && (canvasPool.height = height);
    return canvasPool.getContext("2d", settings);
  }
  function getSharedCanvasContext2D() {
    sharedCanvasContext || (sharedCanvasContext = createCanvasContext2D(1, 1));
    return sharedCanvasContext;
  }
  function releaseCanvas(context) {
    const canvas = context.canvas;
    canvas.width = 1;
    canvas.height = 1;
    context.clearRect(0, 0, 1, 1);
  }
  function outerWidth(element) {
    let width = element.offsetWidth;
    element = getComputedStyle(element);
    return width += parseInt(element.marginLeft, 10) + parseInt(element.marginRight, 10);
  }
  function outerHeight(element) {
    let height = element.offsetHeight;
    element = getComputedStyle(element);
    return height += parseInt(element.marginTop, 10) + parseInt(element.marginBottom, 10);
  }
  function replaceNode(newNode, oldNode) {
    const parent = oldNode.parentNode;
    parent && parent.replaceChild(newNode, oldNode);
  }
  function removeChildren(node) {
    for (; node.lastChild;) {
      node.lastChild.remove();
    }
  }
  function replaceChildren(node, children) {
    const oldChildren = node.childNodes;
    for (let i = 0;; ++i) {
      const oldChild = oldChildren[i], newChild = children[i];
      if (!oldChild && !newChild) {
        break;
      }
      oldChild !== newChild && (oldChild ? newChild ? node.insertBefore(newChild, oldChild) : (node.removeChild(oldChild), --i) : node.appendChild(newChild));
    }
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createCanvasContext2D:{enumerable:!0, get:function() {
    return createCanvasContext2D;
  }}, getSharedCanvasContext2D:{enumerable:!0, get:function() {
    return getSharedCanvasContext2D;
  }}, outerHeight:{enumerable:!0, get:function() {
    return outerHeight;
  }}, outerWidth:{enumerable:!0, get:function() {
    return outerWidth;
  }}, releaseCanvas:{enumerable:!0, get:function() {
    return releaseCanvas;
  }}, removeChildren:{enumerable:!0, get:function() {
    return removeChildren;
  }}, replaceChildren:{enumerable:!0, get:function() {
    return replaceChildren;
  }}, replaceNode:{enumerable:!0, get:function() {
    return replaceNode;
  }}});
  var require$_DOT__SLASH_has_DOT_js = require("module$node_modules$ol$has");
  let sharedCanvasContext;
};

//# sourceMappingURL=module$node_modules$ol$dom.js.map
