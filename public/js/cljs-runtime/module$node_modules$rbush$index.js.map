{
"version":3,
"file":"module$node_modules$rbush$index.js",
"lineCount":300,
"mappings":"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",
"sources":["node_modules/rbush/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rbush$index\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, default:{enumerable:true, get:function() {\n  return RBush;\n}}});\nvar require$quickselect = require(\"quickselect\");\nvar default$$require$quickselect = require.esmDefault(require$quickselect);\nclass RBush {\n  constructor(maxEntries = 9) {\n    this._maxEntries = Math.max(4, maxEntries);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n    this.clear();\n  }\n  all() {\n    return this._all(this.data, []);\n  }\n  search(bbox) {\n    let node = this.data;\n    const result = [];\n    if (!intersects(bbox, node)) {\n      return result;\n    }\n    const toBBox = this.toBBox;\n    const nodesToSearch = [];\n    while (node) {\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        const childBBox = node.leaf ? toBBox(child) : child;\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf) {\n            result.push(child);\n          } else if (contains(bbox, childBBox)) {\n            this._all(child, result);\n          } else {\n            nodesToSearch.push(child);\n          }\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n    return result;\n  }\n  collides(bbox) {\n    let node = this.data;\n    if (!intersects(bbox, node)) {\n      return false;\n    }\n    const nodesToSearch = [];\n    while (node) {\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        const childBBox = node.leaf ? this.toBBox(child) : child;\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf || contains(bbox, childBBox)) {\n            return true;\n          }\n          nodesToSearch.push(child);\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n    return false;\n  }\n  load(data) {\n    if (!(data && data.length)) {\n      return this;\n    }\n    if (data.length < this._minEntries) {\n      for (let i = 0; i < data.length; i++) {\n        this.insert(data[i]);\n      }\n      return this;\n    }\n    let node = this._build(data.slice(), 0, data.length - 1, 0);\n    if (!this.data.children.length) {\n      this.data = node;\n    } else if (this.data.height === node.height) {\n      this._splitRoot(this.data, node);\n    } else {\n      if (this.data.height < node.height) {\n        const tmpNode = this.data;\n        this.data = node;\n        node = tmpNode;\n      }\n      this._insert(node, this.data.height - node.height - 1, true);\n    }\n    return this;\n  }\n  insert(item) {\n    if (item) {\n      this._insert(item, this.data.height - 1);\n    }\n    return this;\n  }\n  clear() {\n    this.data = createNode([]);\n    return this;\n  }\n  remove(item, equalsFn) {\n    if (!item) {\n      return this;\n    }\n    let node = this.data;\n    const bbox = this.toBBox(item);\n    const path = [];\n    const indexes = [];\n    let i, parent, goingUp;\n    while (node || path.length) {\n      if (!node) {\n        node = path.pop();\n        parent = path[path.length - 1];\n        i = indexes.pop();\n        goingUp = true;\n      }\n      if (node.leaf) {\n        const index = findItem(item, node.children, equalsFn);\n        if (index !== -1) {\n          node.children.splice(index, 1);\n          path.push(node);\n          this._condense(path);\n          return this;\n        }\n      }\n      if (!goingUp && !node.leaf && contains(node, bbox)) {\n        path.push(node);\n        indexes.push(i);\n        i = 0;\n        parent = node;\n        node = node.children[0];\n      } else if (parent) {\n        i++;\n        node = parent.children[i];\n        goingUp = false;\n      } else {\n        node = null;\n      }\n    }\n    return this;\n  }\n  toBBox(item) {\n    return item;\n  }\n  compareMinX(a, b) {\n    return a.minX - b.minX;\n  }\n  compareMinY(a, b) {\n    return a.minY - b.minY;\n  }\n  toJSON() {\n    return this.data;\n  }\n  fromJSON(data) {\n    this.data = data;\n    return this;\n  }\n  _all(node, result) {\n    const nodesToSearch = [];\n    while (node) {\n      if (node.leaf) {\n        result.push(...node.children);\n      } else {\n        nodesToSearch.push(...node.children);\n      }\n      node = nodesToSearch.pop();\n    }\n    return result;\n  }\n  _build(items, left, right, height) {\n    const N = right - left + 1;\n    let M = this._maxEntries;\n    let node;\n    if (N <= M) {\n      node = createNode(items.slice(left, right + 1));\n      calcBBox(node, this.toBBox);\n      return node;\n    }\n    if (!height) {\n      height = Math.ceil(Math.log(N) / Math.log(M));\n      M = Math.ceil(N / Math.pow(M, height - 1));\n    }\n    node = createNode([]);\n    node.leaf = false;\n    node.height = height;\n    const N2 = Math.ceil(N / M);\n    const N1 = N2 * Math.ceil(Math.sqrt(M));\n    multiSelect(items, left, right, N1, this.compareMinX);\n    for (let i = left; i <= right; i += N1) {\n      const right2 = Math.min(i + N1 - 1, right);\n      multiSelect(items, i, right2, N2, this.compareMinY);\n      for (let j = i; j <= right2; j += N2) {\n        const right3 = Math.min(j + N2 - 1, right2);\n        node.children.push(this._build(items, j, right3, height - 1));\n      }\n    }\n    calcBBox(node, this.toBBox);\n    return node;\n  }\n  _chooseSubtree(bbox, node, level, path) {\n    while (true) {\n      path.push(node);\n      if (node.leaf || path.length - 1 === level) {\n        break;\n      }\n      let minArea = Infinity;\n      let minEnlargement = Infinity;\n      let targetNode;\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        const area = bboxArea(child);\n        const enlargement = enlargedArea(bbox, child) - area;\n        if (enlargement < minEnlargement) {\n          minEnlargement = enlargement;\n          minArea = area < minArea ? area : minArea;\n          targetNode = child;\n        } else if (enlargement === minEnlargement) {\n          if (area < minArea) {\n            minArea = area;\n            targetNode = child;\n          }\n        }\n      }\n      node = targetNode || node.children[0];\n    }\n    return node;\n  }\n  _insert(item, level, isNode) {\n    const bbox = isNode ? item : this.toBBox(item);\n    const insertPath = [];\n    const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n    node.children.push(item);\n    extend(node, bbox);\n    while (level >= 0) {\n      if (insertPath[level].children.length > this._maxEntries) {\n        this._split(insertPath, level);\n        level--;\n      } else {\n        break;\n      }\n    }\n    this._adjustParentBBoxes(bbox, insertPath, level);\n  }\n  _split(insertPath, level) {\n    const node = insertPath[level];\n    const M = node.children.length;\n    const m = this._minEntries;\n    this._chooseSplitAxis(node, m, M);\n    const splitIndex = this._chooseSplitIndex(node, m, M);\n    const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n    newNode.height = node.height;\n    newNode.leaf = node.leaf;\n    calcBBox(node, this.toBBox);\n    calcBBox(newNode, this.toBBox);\n    if (level) {\n      insertPath[level - 1].children.push(newNode);\n    } else {\n      this._splitRoot(node, newNode);\n    }\n  }\n  _splitRoot(node, newNode) {\n    this.data = createNode([node, newNode]);\n    this.data.height = node.height + 1;\n    this.data.leaf = false;\n    calcBBox(this.data, this.toBBox);\n  }\n  _chooseSplitIndex(node, m, M) {\n    let index;\n    let minOverlap = Infinity;\n    let minArea = Infinity;\n    for (let i = m; i <= M - m; i++) {\n      const bbox1 = distBBox(node, 0, i, this.toBBox);\n      const bbox2 = distBBox(node, i, M, this.toBBox);\n      const overlap = intersectionArea(bbox1, bbox2);\n      const area = bboxArea(bbox1) + bboxArea(bbox2);\n      if (overlap < minOverlap) {\n        minOverlap = overlap;\n        index = i;\n        minArea = area < minArea ? area : minArea;\n      } else if (overlap === minOverlap) {\n        if (area < minArea) {\n          minArea = area;\n          index = i;\n        }\n      }\n    }\n    return index || M - m;\n  }\n  _chooseSplitAxis(node, m, M) {\n    const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n    const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n    const xMargin = this._allDistMargin(node, m, M, compareMinX);\n    const yMargin = this._allDistMargin(node, m, M, compareMinY);\n    if (xMargin < yMargin) {\n      node.children.sort(compareMinX);\n    }\n  }\n  _allDistMargin(node, m, M, compare) {\n    node.children.sort(compare);\n    const toBBox = this.toBBox;\n    const leftBBox = distBBox(node, 0, m, toBBox);\n    const rightBBox = distBBox(node, M - m, M, toBBox);\n    let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n    for (let i = m; i < M - m; i++) {\n      const child = node.children[i];\n      extend(leftBBox, node.leaf ? toBBox(child) : child);\n      margin += bboxMargin(leftBBox);\n    }\n    for (let i = M - m - 1; i >= m; i--) {\n      const child = node.children[i];\n      extend(rightBBox, node.leaf ? toBBox(child) : child);\n      margin += bboxMargin(rightBBox);\n    }\n    return margin;\n  }\n  _adjustParentBBoxes(bbox, path, level) {\n    for (let i = level; i >= 0; i--) {\n      extend(path[i], bbox);\n    }\n  }\n  _condense(path) {\n    for (let i = path.length - 1, siblings; i >= 0; i--) {\n      if (path[i].children.length === 0) {\n        if (i > 0) {\n          siblings = path[i - 1].children;\n          siblings.splice(siblings.indexOf(path[i]), 1);\n        } else {\n          this.clear();\n        }\n      } else {\n        calcBBox(path[i], this.toBBox);\n      }\n    }\n  }\n}\nfunction findItem(item, items, equalsFn) {\n  if (!equalsFn) {\n    return items.indexOf(item);\n  }\n  for (let i = 0; i < items.length; i++) {\n    if (equalsFn(item, items[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction calcBBox(node, toBBox) {\n  distBBox(node, 0, node.children.length, toBBox, node);\n}\nfunction distBBox(node, k, p, toBBox, destNode) {\n  if (!destNode) {\n    destNode = createNode(null);\n  }\n  destNode.minX = Infinity;\n  destNode.minY = Infinity;\n  destNode.maxX = -Infinity;\n  destNode.maxY = -Infinity;\n  for (let i = k; i < p; i++) {\n    const child = node.children[i];\n    extend(destNode, node.leaf ? toBBox(child) : child);\n  }\n  return destNode;\n}\nfunction extend(a, b) {\n  a.minX = Math.min(a.minX, b.minX);\n  a.minY = Math.min(a.minY, b.minY);\n  a.maxX = Math.max(a.maxX, b.maxX);\n  a.maxY = Math.max(a.maxY, b.maxY);\n  return a;\n}\nfunction compareNodeMinX(a, b) {\n  return a.minX - b.minX;\n}\nfunction compareNodeMinY(a, b) {\n  return a.minY - b.minY;\n}\nfunction bboxArea(a) {\n  return (a.maxX - a.minX) * (a.maxY - a.minY);\n}\nfunction bboxMargin(a) {\n  return a.maxX - a.minX + (a.maxY - a.minY);\n}\nfunction enlargedArea(a, b) {\n  return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\nfunction intersectionArea(a, b) {\n  const minX = Math.max(a.minX, b.minX);\n  const minY = Math.max(a.minY, b.minY);\n  const maxX = Math.min(a.maxX, b.maxX);\n  const maxY = Math.min(a.maxY, b.maxY);\n  return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);\n}\nfunction contains(a, b) {\n  return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;\n}\nfunction intersects(a, b) {\n  return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;\n}\nfunction createNode(children) {\n  return {children, height:1, leaf:true, minX:Infinity, minY:Infinity, maxX:-Infinity, maxY:-Infinity};\n}\nfunction multiSelect(arr, left, right, n, compare) {\n  const stack = [left, right];\n  while (stack.length) {\n    right = stack.pop();\n    left = stack.pop();\n    if (right - left <= n) {\n      continue;\n    }\n    const mid = left + Math.ceil((right - left) / n / 2) * n;\n    (0,default$$require$quickselect.default)(arr, mid, left, right, compare);\n    stack.push(left, mid, mid, right);\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","calcBBox","node","toBBox","distBBox","children","length","k","p","destNode","createNode","minX","Infinity","minY","maxX","maxY","i","child","extend","leaf","a","b","Math","min","max","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","contains","intersects","height","multiSelect","arr","left","right","n","compare","stack","pop","mid","ceil","default$$require$quickselect","default","push","Object","defineProperties","__esModule","enumerable","value","get","RBush","require$quickselect","esmDefault","constructor","maxEntries","_maxEntries","_minEntries","clear","all","_all","data","search","bbox","result","nodesToSearch","childBBox","collides","load","insert","_build","slice","_splitRoot","tmpNode","_insert","item","remove","equalsFn","path","indexes","parent","goingUp","items","indexOf","index","splice","_condense","compareMinX","compareMinY","toJSON","fromJSON","N","M","log","pow","N2","N1","sqrt","right2","j","right3","_chooseSubtree","level","minArea","minEnlargement","targetNode","area","enlargement","isNode","insertPath","_split","_adjustParentBBoxes","m","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","bbox2","overlap","xMargin","_allDistMargin","yMargin","sort","leftBBox","rightBBox","margin","siblings"]
}
