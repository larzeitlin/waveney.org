shadow$provide.module$node_modules$ol$geom$LinearRing = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent");
  global = require("module$node_modules$ol$geom$SimpleGeometry");
  var require$_DOT__SLASH_flat_SLASH_area_DOT_js = require("module$node_modules$ol$geom$flat$area"), require$_DOT__SLASH_flat_SLASH_closest_DOT_js = require("module$node_modules$ol$geom$flat$closest"), require$_DOT__SLASH_flat_SLASH_deflate_DOT_js = require("module$node_modules$ol$geom$flat$deflate"), require$_DOT__SLASH_flat_SLASH_inflate_DOT_js = require("module$node_modules$ol$geom$flat$inflate"), require$_DOT__SLASH_flat_SLASH_simplify_DOT_js = require("module$node_modules$ol$geom$flat$simplify");
  require = require.esmDefault(global);
  class LinearRing extends require.default {
    constructor(coordinates, layout) {
      super();
      this.maxDeltaRevision_ = this.maxDelta_ = -1;
      void 0 === layout || Array.isArray(coordinates[0]) ? this.setCoordinates(coordinates, layout) : this.setFlatCoordinates(layout, coordinates);
    }
    clone() {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    }
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < (0,require$_DOT__DOT__SLASH_extent_DOT_js.closestSquaredDistanceXY)(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      this.maxDeltaRevision_ != this.getRevision() && (this.maxDelta_ = Math.sqrt((0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.maxSquaredDelta)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0)), this.maxDeltaRevision_ = this.getRevision());
      return (0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.assignClosestPoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, !0, x, y, closestPoint, minSquaredDistance);
    }
    getArea() {
      return (0,require$_DOT__SLASH_flat_SLASH_area_DOT_js.linearRing)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    getCoordinates() {
      return (0,require$_DOT__SLASH_flat_SLASH_inflate_DOT_js.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    }
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_simplify_DOT_js.douglasPeucker)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LinearRing(simplifiedFlatCoordinates, "XY");
    }
    getType() {
      return "LinearRing";
    }
    intersectsExtent(extent) {
      return !1;
    }
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      this.flatCoordinates || (this.flatCoordinates = []);
      this.flatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_deflate_DOT_js.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    }
  }
  const $$default = LinearRing;
};

//# sourceMappingURL=module$node_modules$ol$geom$LinearRing.js.map
