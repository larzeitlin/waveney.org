shadow$provide.module$node_modules$ol$proj$utm = function(global, require, module, exports) {
  function toLonLat(easting, northing, zone) {
    northing = (zone.north ? northing : northing - 10000000) / 0.9996 / 6367449.145945056;
    var pRad = northing + P2 * Math.sin(2 * northing) + P3 * Math.sin(4 * northing) + P4 * Math.sin(6 * northing) + P5 * Math.sin(8 * northing), pSin = Math.sin(pRad);
    const pSin2 = pSin * pSin;
    northing = Math.cos(pRad);
    const pTan = pSin / northing;
    pSin = pTan * pTan;
    const pTan4 = pSin * pSin, c = .006739496752268451 * northing ** 2, c2 = c * c;
    easting = (easting - 500000) / (6378137 / Math.sqrt(1 - 0.00669438 * pSin2) * 0.9996);
    const d2 = easting * easting, d3 = d2 * easting, d4 = d3 * easting, d5 = d4 * easting;
    pRad = pRad - pTan / (.99330562 / (1 - 0.00669438 * pSin2)) * (d2 / 2 - d4 / 24 * (5 + 3 * pSin + 10 * c - 4 * c2 - .06065547077041606)) + d5 * easting / 720 * (61 + 90 * pSin + 298 * c + 45 * pTan4 - 1.6983531815716497 - 3 * c2);
    zone = (0,require$_DOT__DOT__SLASH_math_DOT_js.wrap)((easting - d3 / 6 * (1 + 2 * pSin + c) + d5 / 120 * (5 - 2 * c + 28 * pSin - 3 * c2 + .05391597401814761 + 24 * pTan4)) / northing + (0,require$_DOT__DOT__SLASH_math_DOT_js.toRadians)(6 * (zone.number - 1) - 180 + 3), -Math.PI, Math.PI);
    return [(0,require$_DOT__DOT__SLASH_math_DOT_js.toDegrees)(zone), (0,require$_DOT__DOT__SLASH_math_DOT_js.toDegrees)(pRad)];
  }
  function fromLonLat(longitude, latitude, zone) {
    longitude = (0,require$_DOT__DOT__SLASH_math_DOT_js.wrap)(longitude, -180, 180);
    -80 > latitude ? latitude = -80 : 84 < latitude && (latitude = 84);
    var latRad = (0,require$_DOT__DOT__SLASH_math_DOT_js.toRadians)(latitude), latSin = Math.sin(latRad), latCos = Math.cos(latRad);
    const latTan = latSin / latCos;
    latitude = latTan * latTan;
    const latTan4 = latitude * latitude;
    var lonRad = (0,require$_DOT__DOT__SLASH_math_DOT_js.toRadians)(longitude), centralLonRad = (0,require$_DOT__DOT__SLASH_math_DOT_js.toRadians)(6 * (zone.number - 1) - 180 + 3);
    latSin = 6378137 / Math.sqrt(1 - 0.00669438 * latSin ** 2);
    longitude = .006739496752268451 * latCos ** 2;
    latCos *= (0,require$_DOT__DOT__SLASH_math_DOT_js.wrap)(lonRad - centralLonRad, -Math.PI, Math.PI);
    const a2 = latCos * latCos;
    lonRad = a2 * latCos;
    const a4 = lonRad * latCos;
    centralLonRad = a4 * latCos;
    latRad = 0.9996 * (6378137 * (.9983242984503243 * latRad - .002514607064228144 * Math.sin(2 * latRad) + 2.6390466021299826E-6 * Math.sin(4 * latRad) - 3.418046101696858E-9 * Math.sin(6 * latRad)) + latSin * latTan * (a2 / 2 + a4 / 24 * (5 - latitude + 9 * longitude + 4 * longitude ** 2) + centralLonRad * latCos / 720 * (61 - 58 * latitude + latTan4 + 600 * longitude - 2.2240339282485886)));
    zone.north || (latRad += 10000000);
    return [0.9996 * latSin * (latCos + lonRad / 6 * (1 - latitude + longitude) + centralLonRad / 120 * (5 - 18 * latitude + latTan4 + 72 * longitude - .39089081163157013)) + 500000, latRad];
  }
  function zoneFromCode(code) {
    let epsgId = 0;
    for (var re of epsgRegExes) {
      const match = code.match(re);
      if (match) {
        epsgId = parseInt(match[1]);
        break;
      }
    }
    if (!epsgId) {
      return null;
    }
    code = 0;
    re = !1;
    32700 < epsgId && 32761 > epsgId ? code = epsgId - 32700 : 32600 < epsgId && 32661 > epsgId && (re = !0, code = epsgId - 32600);
    return code ? {number:code, north:re} : null;
  }
  function makeTransformFunction(transformer, zone) {
    return function(input, output, dimension, stride) {
      const length = input.length;
      dimension = 1 < dimension ? dimension : 2;
      stride = stride ?? dimension;
      output || (output = 2 < dimension ? input.slice() : Array(length));
      for (dimension = 0; dimension < length; dimension += stride) {
        const coord = transformer(input[dimension], input[dimension + 1], zone);
        output[dimension] = coord[0];
        output[dimension + 1] = coord[1];
      }
      return output;
    };
  }
  function makeProjection(code) {
    return zoneFromCode(code) ? new default$$require$_DOT__SLASH_Projection_DOT_js.default({code, units:"m"}) : null;
  }
  function makeTransforms(projection) {
    return (projection = zoneFromCode(projection.getCode())) ? {forward:makeTransformFunction(fromLonLat, projection), inverse:makeTransformFunction(toLonLat, projection)} : null;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, makeProjection:{enumerable:!0, get:function() {
    return makeProjection;
  }}, makeTransforms:{enumerable:!0, get:function() {
    return makeTransforms;
  }}, zoneFromCode:{enumerable:!0, get:function() {
    return zoneFromCode;
  }}});
  var require$_DOT__DOT__SLASH_math_DOT_js = require("module$node_modules$ol$math");
  global = require("module$node_modules$ol$proj$Projection");
  var default$$require$_DOT__SLASH_Projection_DOT_js = require.esmDefault(global);
  require = Math.sqrt(.99330562);
  require = (1 - require) / (1 + require);
  global = require * require;
  module = global * require;
  exports = module * require;
  const _E5 = exports * require, P2 = 1.5 * require - .84375 * module + .525390625 * _E5, P3 = 1.3125 * global - 1.71875 * exports, P4 = 151 / 96 * module - 3.2578125 * _E5, P5 = 2.142578125 * exports, epsgRegExes = [/^EPSG:(\d+)$/, /^urn:ogc:def:crs:EPSG::(\d+)$/, /^http:\/\/www\.opengis\.net\/def\/crs\/EPSG\/0\/(\d+)$/];
};

//# sourceMappingURL=module$node_modules$ol$proj$utm.js.map
