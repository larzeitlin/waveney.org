shadow$provide.module$node_modules$ol$style$IconImage = function(global, require, module, exports) {
  function get(image, cacheKey, crossOrigin, imageState, color, pattern) {
    let iconImage = void 0 === cacheKey ? void 0 : require$_DOT__SLASH_IconImageCache_DOT_js.shared.get(cacheKey, crossOrigin, color);
    iconImage || (iconImage = new IconImage(image, image && "src" in image ? image.src || void 0 : cacheKey, crossOrigin, imageState, color), require$_DOT__SLASH_IconImageCache_DOT_js.shared.set(cacheKey, crossOrigin, color, iconImage, pattern));
    pattern && iconImage && !require$_DOT__SLASH_IconImageCache_DOT_js.shared.getPattern(cacheKey, crossOrigin, color) && require$_DOT__SLASH_IconImageCache_DOT_js.shared.set(cacheKey, crossOrigin, color, iconImage, pattern);
    return iconImage;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, get:{enumerable:!0, get:function() {
    return get;
  }}});
  var require$_DOT__DOT__SLASH_Image_DOT_js = require("module$node_modules$ol$Image");
  module = require("module$node_modules$ol$ImageState");
  var require$_DOT__DOT__SLASH_color_DOT_js = require("module$node_modules$ol$color"), require$_DOT__DOT__SLASH_dom_DOT_js = require("module$node_modules$ol$dom");
  global = require("module$node_modules$ol$events$EventType");
  exports = require("module$node_modules$ol$events$Target");
  var require$_DOT__SLASH_IconImageCache_DOT_js = require("module$node_modules$ol$style$IconImageCache"), default$$require$_DOT__DOT__SLASH_ImageState_DOT_js = require.esmDefault(module);
  module = require.esmDefault(exports);
  var default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  let taintedTestContext = null;
  class IconImage extends module.default {
    constructor(image, src, crossOrigin, imageState, color) {
      super();
      this.hitDetectionImage_ = null;
      this.image_ = image;
      this.crossOrigin_ = crossOrigin;
      this.canvas_ = {};
      this.color_ = color;
      this.imageState_ = void 0 === imageState ? default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE : imageState;
      this.size_ = image && image.width && image.height ? [image.width, image.height] : null;
      this.src_ = src;
      this.tainted_;
      this.ready_ = null;
    }
    initializeImage_() {
      this.image_ = new Image();
      null !== this.crossOrigin_ && (this.image_.crossOrigin = this.crossOrigin_);
    }
    isTainted_() {
      if (void 0 === this.tainted_ && this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED) {
        taintedTestContext || (taintedTestContext = (0,require$_DOT__DOT__SLASH_dom_DOT_js.createCanvasContext2D)(1, 1, void 0, {willReadFrequently:!0}));
        taintedTestContext.drawImage(this.image_, 0, 0);
        try {
          taintedTestContext.getImageData(0, 0, 1, 1), this.tainted_ = !1;
        } catch {
          taintedTestContext = null, this.tainted_ = !0;
        }
      }
      return !0 === this.tainted_;
    }
    dispatchChangeEvent_() {
      this.dispatchEvent(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE);
    }
    handleImageError_() {
      this.imageState_ = default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.ERROR;
      this.dispatchChangeEvent_();
    }
    handleImageLoad_() {
      this.imageState_ = default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED;
      this.size_ = [this.image_.width, this.image_.height];
      this.dispatchChangeEvent_();
    }
    getImage(pixelRatio) {
      this.image_ || this.initializeImage_();
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
    }
    getPixelRatio(pixelRatio) {
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? pixelRatio : 1;
    }
    getImageState() {
      return this.imageState_;
    }
    getHitDetectionImage() {
      this.image_ || this.initializeImage_();
      if (!this.hitDetectionImage_) {
        if (this.isTainted_()) {
          const width = this.size_[0], height = this.size_[1], context = (0,require$_DOT__DOT__SLASH_dom_DOT_js.createCanvasContext2D)(width, height);
          context.fillRect(0, 0, width, height);
          this.hitDetectionImage_ = context.canvas;
        } else {
          this.hitDetectionImage_ = this.image_;
        }
      }
      return this.hitDetectionImage_;
    }
    getSize() {
      return this.size_;
    }
    getSrc() {
      return this.src_;
    }
    load() {
      if (this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.IDLE) {
        this.image_ || this.initializeImage_();
        this.imageState_ = default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADING;
        try {
          void 0 !== this.src_ && (this.image_.src = this.src_);
        } catch {
          this.handleImageError_();
        }
        this.image_ instanceof HTMLImageElement && (0,require$_DOT__DOT__SLASH_Image_DOT_js.decodeFallback)(this.image_, this.src_).then(image => {
          this.image_ = image;
          this.handleImageLoad_();
        }).catch(this.handleImageError_.bind(this));
      }
    }
    replaceColor_(pixelRatio) {
      if (this.color_ && !this.canvas_[pixelRatio] && this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED) {
        var image = this.image_, ctx = (0,require$_DOT__DOT__SLASH_dom_DOT_js.createCanvasContext2D)(Math.ceil(image.width * pixelRatio), Math.ceil(image.height * pixelRatio)), canvas = ctx.canvas;
        ctx.scale(pixelRatio, pixelRatio);
        ctx.drawImage(image, 0, 0);
        ctx.globalCompositeOperation = "multiply";
        ctx.fillStyle = (0,require$_DOT__DOT__SLASH_color_DOT_js.asString)(this.color_);
        ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);
        ctx.globalCompositeOperation = "destination-in";
        ctx.drawImage(image, 0, 0);
        this.canvas_[pixelRatio] = canvas;
      }
    }
    ready() {
      this.ready_ || (this.ready_ = new Promise(resolve => {
        if (this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED || this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.ERROR) {
          resolve();
        } else {
          const onChange = () => {
            if (this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.LOADED || this.imageState_ === default$$require$_DOT__DOT__SLASH_ImageState_DOT_js.default.ERROR) {
              this.removeEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, onChange), resolve();
            }
          };
          this.addEventListener(default$$require$_DOT__DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, onChange);
        }
      }));
      return this.ready_;
    }
  }
  const $$default = IconImage;
};

//# sourceMappingURL=module$node_modules$ol$style$IconImage.js.map
