shadow$provide.module$node_modules$ol$Feature = function(global, require, module, exports) {
  function createStyleFunction(obj) {
    if ("function" === typeof obj) {
      return obj;
    }
    let styles;
    Array.isArray(obj) ? styles = obj : ((0,require$_DOT__SLASH_asserts_DOT_js.assert)("function" === typeof obj.getZIndex, "Expected an `ol/style/Style` or an array of `ol/style/Style.js`"), styles = [obj]);
    return function() {
      return styles;
    };
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createStyleFunction:{enumerable:!0, get:function() {
    return createStyleFunction;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$Object");
  var require$_DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts");
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events");
  module = require.esmDefault(module);
  var default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class Feature extends module.default {
    constructor(geometryOrProperties) {
      super();
      this.on;
      this.once;
      this.un;
      this.id_ = void 0;
      this.geometryName_ = "geometry";
      this.style_ = null;
      this.styleFunction_ = void 0;
      this.geometryChangeKey_ = null;
      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
      geometryOrProperties && ("function" === typeof geometryOrProperties.getSimplifiedGeometry ? this.setGeometry(geometryOrProperties) : this.setProperties(geometryOrProperties));
    }
    clone() {
      const clone = new Feature(this.hasProperties() ? this.getProperties() : null);
      clone.setGeometryName(this.getGeometryName());
      var geometry = this.getGeometry();
      geometry && clone.setGeometry(geometry.clone());
      (geometry = this.getStyle()) && clone.setStyle(geometry);
      return clone;
    }
    getGeometry() {
      return this.get(this.geometryName_);
    }
    getId() {
      return this.id_;
    }
    getGeometryName() {
      return this.geometryName_;
    }
    getStyle() {
      return this.style_;
    }
    getStyleFunction() {
      return this.styleFunction_;
    }
    handleGeometryChange_() {
      this.changed();
    }
    handleGeometryChanged_() {
      this.geometryChangeKey_ && ((0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.geometryChangeKey_), this.geometryChangeKey_ = null);
      const geometry = this.getGeometry();
      geometry && (this.geometryChangeKey_ = (0,require$_DOT__SLASH_events_DOT_js.listen)(geometry, default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, this.handleGeometryChange_, this));
      this.changed();
    }
    setGeometry(geometry) {
      this.set(this.geometryName_, geometry);
    }
    setStyle(style) {
      this.styleFunction_ = (this.style_ = style) ? createStyleFunction(style) : void 0;
      this.changed();
    }
    setId(id) {
      this.id_ = id;
      this.changed();
    }
    setGeometryName(name) {
      this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.geometryName_ = name;
      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.handleGeometryChanged_();
    }
  }
  const $$default = Feature;
};

//# sourceMappingURL=module$node_modules$ol$Feature.js.map
