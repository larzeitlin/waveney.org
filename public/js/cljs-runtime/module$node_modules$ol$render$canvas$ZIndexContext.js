shadow$provide.module$node_modules$ol$render$canvas$ZIndexContext = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH__DOT__DOT__SLASH_dom_DOT_js = require("module$node_modules$ol$dom");
  class ZIndexContext {
    constructor() {
      this.pushMethodArgs_ = (...args) => {
        this.instructions_[this.zIndex + this.offset_].push(args);
        return this;
      };
      this.instructions_ = [];
      this.offset_ = this.zIndex = 0;
      this.context_ = new Proxy((0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_dom_DOT_js.getSharedCanvasContext2D)(), {get:(target, property) => {
        if ("function" === typeof(0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_dom_DOT_js.getSharedCanvasContext2D)()[property]) {
          return this.instructions_[this.zIndex + this.offset_] || (this.instructions_[this.zIndex + this.offset_] = []), this.instructions_[this.zIndex + this.offset_].push(property), this.pushMethodArgs_;
        }
      }, set:(target, property, value) => {
        this.instructions_[this.zIndex + this.offset_] || (this.instructions_[this.zIndex + this.offset_] = []);
        this.instructions_[this.zIndex + this.offset_].push(property, value);
        return !0;
      }});
    }
    pushFunction(render) {
      this.instructions_[this.zIndex + this.offset_].push(render);
    }
    getContext() {
      return this.context_;
    }
    draw(context) {
      this.instructions_.forEach(instructionsAtIndex => {
        for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {
          const property = instructionsAtIndex[i];
          if ("function" === typeof property) {
            property(context);
            continue;
          }
          const instructionAtIndex = instructionsAtIndex[++i];
          if ("function" === typeof context[property]) {
            context[property](...instructionAtIndex);
          } else {
            context[property] = "function" === typeof instructionAtIndex ? instructionAtIndex(context) : instructionAtIndex;
          }
        }
      });
    }
    clear() {
      this.offset_ = this.zIndex = this.instructions_.length = 0;
    }
    offset() {
      this.offset_ = this.instructions_.length;
      this.zIndex = 0;
    }
  }
  const $$default = ZIndexContext;
};

//# sourceMappingURL=module$node_modules$ol$render$canvas$ZIndexContext.js.map
