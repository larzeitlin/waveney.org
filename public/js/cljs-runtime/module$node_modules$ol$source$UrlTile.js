shadow$provide.module$node_modules$ol$source$UrlTile = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$TileState");
  var require$_DOT__DOT__SLASH_tileurlfunction_DOT_js = require("module$node_modules$ol$tileurlfunction"), require$_DOT__DOT__SLASH_uri_DOT_js = require("module$node_modules$ol$uri"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), require$_DOT__SLASH_Tile_DOT_js = require("module$node_modules$ol$source$Tile");
  module = require("module$node_modules$ol$source$TileEventType");
  var default$$require$_DOT__SLASH_TileEventType_DOT_js = require.esmDefault(module), default$$require$_DOT__DOT__SLASH_TileState_DOT_js = require.esmDefault(global);
  require = require.esmDefault(require$_DOT__SLASH_Tile_DOT_js);
  class UrlTile extends require.default {
    constructor(options) {
      super({attributions:options.attributions, cacheSize:options.cacheSize, projection:options.projection, state:options.state, tileGrid:options.tileGrid, tilePixelRatio:options.tilePixelRatio, wrapX:options.wrapX, transition:options.transition, interpolate:options.interpolate, key:options.key, attributionsCollapsible:options.attributionsCollapsible, zDirection:options.zDirection});
      this.generateTileUrlFunction_ = this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;
      this.tileLoadFunction = options.tileLoadFunction;
      options.tileUrlFunction && (this.tileUrlFunction = options.tileUrlFunction);
      this.urls = null;
      options.urls ? this.setUrls(options.urls) : options.url && this.setUrl(options.url);
      this.tileLoadingKeys_ = {};
    }
    getTileLoadFunction() {
      return this.tileLoadFunction;
    }
    getTileUrlFunction() {
      return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;
    }
    getUrls() {
      return this.urls;
    }
    handleTileChange(event) {
      event = event.target;
      const uid = (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(event), tileState = event.getState();
      let type;
      tileState == default$$require$_DOT__DOT__SLASH_TileState_DOT_js.default.LOADING ? (this.tileLoadingKeys_[uid] = !0, type = default$$require$_DOT__SLASH_TileEventType_DOT_js.default.TILELOADSTART) : uid in this.tileLoadingKeys_ && (delete this.tileLoadingKeys_[uid], type = tileState == default$$require$_DOT__DOT__SLASH_TileState_DOT_js.default.ERROR ? default$$require$_DOT__SLASH_TileEventType_DOT_js.default.TILELOADERROR : tileState == default$$require$_DOT__DOT__SLASH_TileState_DOT_js.default.LOADED ? 
      default$$require$_DOT__SLASH_TileEventType_DOT_js.default.TILELOADEND : void 0);
      void 0 != type && this.dispatchEvent(new require$_DOT__SLASH_Tile_DOT_js.TileSourceEvent(type, event));
    }
    setTileLoadFunction(tileLoadFunction) {
      this.tileLoadFunction = tileLoadFunction;
      this.changed();
    }
    setTileUrlFunction(tileUrlFunction, key) {
      this.tileUrlFunction = tileUrlFunction;
      "undefined" !== typeof key ? this.setKey(key) : this.changed();
    }
    setUrl(url) {
      this.urls = url = (0,require$_DOT__DOT__SLASH_uri_DOT_js.expandUrl)(url);
      this.setUrls(url);
    }
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join("\n");
      this.generateTileUrlFunction_ ? this.setTileUrlFunction((0,require$_DOT__DOT__SLASH_tileurlfunction_DOT_js.createFromTemplates)(urls, this.tileGrid), key) : this.setKey(key);
    }
    tileUrlFunction(tileCoord, pixelRatio, projection) {
    }
  }
  const $$default = UrlTile;
};

//# sourceMappingURL=module$node_modules$ol$source$UrlTile.js.map
