shadow$provide.module$node_modules$ol$geom$MultiLineString = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent");
  global = require("module$node_modules$ol$geom$LineString");
  module = require("module$node_modules$ol$geom$SimpleGeometry");
  var require$_DOT__SLASH_flat_SLASH_closest_DOT_js = require("module$node_modules$ol$geom$flat$closest"), require$_DOT__SLASH_flat_SLASH_deflate_DOT_js = require("module$node_modules$ol$geom$flat$deflate"), require$_DOT__SLASH_flat_SLASH_inflate_DOT_js = require("module$node_modules$ol$geom$flat$inflate"), require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js = require("module$node_modules$ol$geom$flat$interpolate"), require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js = require("module$node_modules$ol$geom$flat$intersectsextent"), 
  require$_DOT__SLASH_flat_SLASH_simplify_DOT_js = require("module$node_modules$ol$geom$flat$simplify");
  module = require.esmDefault(module);
  var default$$require$_DOT__SLASH_LineString_DOT_js = require.esmDefault(global);
  class MultiLineString extends module.default {
    constructor(coordinates, layout, ends) {
      super();
      this.ends_ = [];
      this.maxDeltaRevision_ = this.maxDelta_ = -1;
      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(coordinates, layout);
      } else if (void 0 !== layout && ends) {
        this.setFlatCoordinates(layout, coordinates), this.ends_ = ends;
      } else {
        layout = [];
        ends = [];
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(layout, coordinates[i].getFlatCoordinates()), ends.push(layout.length);
        }
        coordinates = 0 === coordinates.length ? this.getLayout() : coordinates[0].getLayout();
        this.setFlatCoordinates(coordinates, layout);
        this.ends_ = ends;
      }
    }
    appendLineString(lineString) {
      (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }
    clone() {
      const multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
      multiLineString.applyProperties(this);
      return multiLineString;
    }
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < (0,require$_DOT__DOT__SLASH_extent_DOT_js.closestSquaredDistanceXY)(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      this.maxDeltaRevision_ != this.getRevision() && (this.maxDelta_ = Math.sqrt((0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.arrayMaxSquaredDelta)(this.flatCoordinates, 0, this.ends_, this.stride, 0)), this.maxDeltaRevision_ = this.getRevision());
      return (0,require$_DOT__SLASH_flat_SLASH_closest_DOT_js.assignClosestArrayPoint)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, !1, x, y, closestPoint, minSquaredDistance);
    }
    getCoordinateAtM(m, extrapolate, interpolate) {
      return "XYM" != this.layout && "XYZM" != this.layout || 0 === this.flatCoordinates.length ? null : (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.lineStringsCoordinateAtM)(this.flatCoordinates, 0, this.ends_, this.stride, m, void 0 !== extrapolate ? extrapolate : !1, void 0 !== interpolate ? interpolate : !1);
    }
    getCoordinates() {
      return (0,require$_DOT__SLASH_flat_SLASH_inflate_DOT_js.inflateCoordinatesArray)(this.flatCoordinates, 0, this.ends_, this.stride);
    }
    getEnds() {
      return this.ends_;
    }
    getLineString(index) {
      return 0 > index || this.ends_.length <= index ? null : new default$$require$_DOT__SLASH_LineString_DOT_js.default(this.flatCoordinates.slice(0 === index ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    }
    getLineStrings() {
      const flatCoordinates = this.flatCoordinates, ends = this.ends_, layout = this.layout, lineStrings = [];
      var offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        offset = new default$$require$_DOT__SLASH_LineString_DOT_js.default(flatCoordinates.slice(offset, end), layout);
        lineStrings.push(offset);
        offset = end;
      }
      return lineStrings;
    }
    getFlatMidpoints() {
      const midpoints = [], flatCoordinates = this.flatCoordinates;
      var offset = 0;
      const ends = this.ends_, stride = this.stride;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        offset = (0,require$_DOT__SLASH_flat_SLASH_interpolate_DOT_js.interpolatePoint)(flatCoordinates, offset, end, stride, 0.5);
        (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(midpoints, offset);
        offset = end;
      }
      return midpoints;
    }
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [], simplifiedEnds = [];
      simplifiedFlatCoordinates.length = (0,require$_DOT__SLASH_flat_SLASH_simplify_DOT_js.douglasPeuckerArray)(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new MultiLineString(simplifiedFlatCoordinates, "XY", simplifiedEnds);
    }
    getType() {
      return "MultiLineString";
    }
    intersectsExtent(extent) {
      return (0,require$_DOT__SLASH_flat_SLASH_intersectsextent_DOT_js.intersectsLineStringArray)(this.flatCoordinates, 0, this.ends_, this.stride, extent);
    }
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 2);
      this.flatCoordinates || (this.flatCoordinates = []);
      coordinates = (0,require$_DOT__SLASH_flat_SLASH_deflate_DOT_js.deflateCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = 0 === coordinates.length ? 0 : coordinates[coordinates.length - 1];
      this.changed();
    }
  }
  const $$default = MultiLineString;
};

//# sourceMappingURL=module$node_modules$ol$geom$MultiLineString.js.map
