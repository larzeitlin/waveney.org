shadow$provide.module$node_modules$ol$interaction$PinchZoom = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__SLASH_Pointer_DOT_js = require("module$node_modules$ol$interaction$Pointer");
  global = require.esmDefault(require$_DOT__SLASH_Pointer_DOT_js);
  class PinchZoom extends global.default {
    constructor(options) {
      const pointerOptions = options = options ? options : {};
      pointerOptions.stopDown || (pointerOptions.stopDown = require$_DOT__DOT__SLASH_functions_DOT_js.FALSE);
      super(pointerOptions);
      this.anchor_ = null;
      this.duration_ = void 0 !== options.duration ? options.duration : 400;
      this.lastDistance_ = void 0;
      this.lastScaleDelta_ = 1;
    }
    handleDragEvent(mapBrowserEvent) {
      let scaleDelta = 1.0;
      var touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];
      var dx = touch0.clientX - touch1.clientX;
      touch0 = touch0.clientY - touch1.clientY;
      dx = Math.sqrt(dx * dx + touch0 * touch0);
      void 0 !== this.lastDistance_ && (scaleDelta = this.lastDistance_ / dx);
      this.lastDistance_ = dx;
      mapBrowserEvent = mapBrowserEvent.map;
      dx = mapBrowserEvent.getView();
      1.0 != scaleDelta && (this.lastScaleDelta_ = scaleDelta);
      this.anchor_ = mapBrowserEvent.getCoordinateFromPixelInternal(mapBrowserEvent.getEventPixel((0,require$_DOT__SLASH_Pointer_DOT_js.centroid)(this.targetPointers)));
      mapBrowserEvent.render();
      dx.adjustResolutionInternal(scaleDelta, this.anchor_);
    }
    handleUpEvent(mapBrowserEvent) {
      return 2 > this.targetPointers.length ? (mapBrowserEvent.map.getView().endInteraction(this.duration_, 1 < this.lastScaleDelta_ ? 1 : -1), !1) : !0;
    }
    handleDownEvent(mapBrowserEvent) {
      return 2 <= this.targetPointers.length ? (mapBrowserEvent = mapBrowserEvent.map, this.anchor_ = null, this.lastDistance_ = void 0, this.lastScaleDelta_ = 1, this.handlingDownUpSequence || mapBrowserEvent.getView().beginInteraction(), !0) : !1;
    }
  }
  const $$default = PinchZoom;
};

//# sourceMappingURL=module$node_modules$ol$interaction$PinchZoom.js.map
