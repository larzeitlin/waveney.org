{
"version":3,
"file":"module$node_modules$ol$expr$cpu.js",
"lineCount":349,
"mappings":"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",
"sources":["node_modules/ol/expr/cpu.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$expr$cpu\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, buildExpression:{enumerable:true, get:function() {\n  return buildExpression;\n}}, newEvaluationContext:{enumerable:true, get:function() {\n  return newEvaluationContext;\n}}});\nvar require$_DOT__DOT__SLASH_color_DOT_js = require(\"../color.js\");\nvar require$_DOT__SLASH_expression_DOT_js = require(\"./expression.js\");\nfunction newEvaluationContext() {\n  return {variables:{}, properties:{}, resolution:NaN, featureId:null, geometryType:\"\",};\n}\nfunction buildExpression(encoded, type, context) {\n  const expression = (0,require$_DOT__SLASH_expression_DOT_js.parse)(encoded, type, context);\n  return compileExpression(expression, context);\n}\nfunction compileExpression(expression, context) {\n  if (expression instanceof require$_DOT__SLASH_expression_DOT_js.LiteralExpression) {\n    if (expression.type === require$_DOT__SLASH_expression_DOT_js.ColorType && typeof expression.value === \"string\") {\n      const colorValue = (0,require$_DOT__DOT__SLASH_color_DOT_js.fromString)(expression.value);\n      return function() {\n        return colorValue;\n      };\n    }\n    return function() {\n      return expression.value;\n    };\n  }\n  const operator = expression.operator;\n  switch(operator) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Number:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.String:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Coalesce:\n      {\n        return compileAssertionExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Get:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Var:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Has:\n      {\n        return compileAccessorExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Id:\n      {\n        return context => context.featureId;\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.GeometryType:\n      {\n        return context => context.geometryType;\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Concat:\n      {\n        const args = expression.args.map(e => compileExpression(e, context));\n        return context => \"\".concat(...args.map(arg => arg(context).toString()));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Resolution:\n      {\n        return context => context.resolution;\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Any:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.All:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Between:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.In:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Not:\n      {\n        return compileLogicalExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Equal:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.NotEqual:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.LessThan:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.LessThanOrEqualTo:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.GreaterThan:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.GreaterThanOrEqualTo:\n      {\n        return compileComparisonExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Multiply:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Divide:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Add:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Subtract:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Clamp:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Mod:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Pow:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Abs:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Floor:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Ceil:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Round:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Sin:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Cos:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Atan:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Sqrt:\n      {\n        return compileNumericExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Case:\n      {\n        return compileCaseExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Match:\n      {\n        return compileMatchExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Interpolate:\n      {\n        return compileInterpolateExpression(expression, context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.ToString:\n      {\n        return compileConvertExpression(expression, context);\n      }\n    default:\n      {\n        throw new Error(`Unsupported operator ${operator}`);\n      }\n  }\n}\nfunction compileAssertionExpression(expression, context) {\n  const type = expression.operator;\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch(type) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Coalesce:\n      {\n        return context => {\n          for (let i = 0; i < length; ++i) {\n            const value = args[i](context);\n            if (typeof value !== \"undefined\" && value !== null) {\n              return value;\n            }\n          }\n          throw new Error(\"Expected one of the values to be non-null\");\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Number:\n    case require$_DOT__SLASH_expression_DOT_js.Ops.String:\n      {\n        return context => {\n          for (let i = 0; i < length; ++i) {\n            const value = args[i](context);\n            if (typeof value === type) {\n              return value;\n            }\n          }\n          throw new Error(`Expected one of the values to be a ${type}`);\n        };\n      }\n    default:\n      {\n        throw new Error(`Unsupported assertion operator ${type}`);\n      }\n  }\n}\nfunction compileAccessorExpression(expression, context) {\n  const nameExpression = expression.args[0];\n  const name = nameExpression.value;\n  switch(expression.operator) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Get:\n      {\n        return context => {\n          const args = expression.args;\n          let value = context.properties[name];\n          for (let i = 1, ii = args.length; i < ii; ++i) {\n            const keyExpression = args[i];\n            const key = keyExpression.value;\n            value = value[key];\n          }\n          return value;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Var:\n      {\n        return context => context.variables[name];\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Has:\n      {\n        return context => {\n          const args = expression.args;\n          if (!(name in context.properties)) {\n            return false;\n          }\n          let value = context.properties[name];\n          for (let i = 1, ii = args.length; i < ii; ++i) {\n            const keyExpression = args[i];\n            const key = keyExpression.value;\n            if (!value || !Object.hasOwn(value, key)) {\n              return false;\n            }\n            value = value[key];\n          }\n          return true;\n        };\n      }\n    default:\n      {\n        throw new Error(`Unsupported accessor operator ${expression.operator}`);\n      }\n  }\n}\nfunction compileComparisonExpression(expression, context) {\n  const op = expression.operator;\n  const left = compileExpression(expression.args[0], context);\n  const right = compileExpression(expression.args[1], context);\n  switch(op) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Equal:\n      {\n        return context => left(context) === right(context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.NotEqual:\n      {\n        return context => left(context) !== right(context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.LessThan:\n      {\n        return context => left(context) < right(context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.LessThanOrEqualTo:\n      {\n        return context => left(context) <= right(context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.GreaterThan:\n      {\n        return context => left(context) > right(context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.GreaterThanOrEqualTo:\n      {\n        return context => left(context) >= right(context);\n      }\n    default:\n      {\n        throw new Error(`Unsupported comparison operator ${op}`);\n      }\n  }\n}\nfunction compileLogicalExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch(op) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Any:\n      {\n        return context => {\n          for (let i = 0; i < length; ++i) {\n            if (args[i](context)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.All:\n      {\n        return context => {\n          for (let i = 0; i < length; ++i) {\n            if (!args[i](context)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Between:\n      {\n        return context => {\n          const value = args[0](context);\n          const min = args[1](context);\n          const max = args[2](context);\n          return value >= min && value <= max;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.In:\n      {\n        return context => {\n          const value = args[0](context);\n          for (let i = 1; i < length; ++i) {\n            if (value === args[i](context)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Not:\n      {\n        return context => !args[0](context);\n      }\n    default:\n      {\n        throw new Error(`Unsupported logical operator ${op}`);\n      }\n  }\n}\nfunction compileNumericExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch(op) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Multiply:\n      {\n        return context => {\n          let value = 1;\n          for (let i = 0; i < length; ++i) {\n            value *= args[i](context);\n          }\n          return value;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Divide:\n      {\n        return context => args[0](context) / args[1](context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Add:\n      {\n        return context => {\n          let value = 0;\n          for (let i = 0; i < length; ++i) {\n            value += args[i](context);\n          }\n          return value;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Subtract:\n      {\n        return context => args[0](context) - args[1](context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Clamp:\n      {\n        return context => {\n          const value = args[0](context);\n          const min = args[1](context);\n          if (value < min) {\n            return min;\n          }\n          const max = args[2](context);\n          if (value > max) {\n            return max;\n          }\n          return value;\n        };\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Mod:\n      {\n        return context => args[0](context) % args[1](context);\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Pow:\n      {\n        return context => Math.pow(args[0](context), args[1](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Abs:\n      {\n        return context => Math.abs(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Floor:\n      {\n        return context => Math.floor(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Ceil:\n      {\n        return context => Math.ceil(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Round:\n      {\n        return context => Math.round(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Sin:\n      {\n        return context => Math.sin(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Cos:\n      {\n        return context => Math.cos(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Atan:\n      {\n        if (length === 2) {\n          return context => Math.atan2(args[0](context), args[1](context));\n        }\n        return context => Math.atan(args[0](context));\n      }\n    case require$_DOT__SLASH_expression_DOT_js.Ops.Sqrt:\n      {\n        return context => Math.sqrt(args[0](context));\n      }\n    default:\n      {\n        throw new Error(`Unsupported numeric operator ${op}`);\n      }\n  }\n}\nfunction compileCaseExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return context => {\n    for (let i = 0; i < length - 1; i += 2) {\n      const condition = args[i](context);\n      if (condition) {\n        return args[i + 1](context);\n      }\n    }\n    return args[length - 1](context);\n  };\n}\nfunction compileMatchExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return context => {\n    const value = args[0](context);\n    for (let i = 1; i < length; i += 2) {\n      if (value === args[i](context)) {\n        return args[i + 1](context);\n      }\n    }\n    return args[length - 1](context);\n  };\n}\nfunction compileInterpolateExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return context => {\n    const base = args[0](context);\n    const value = args[1](context);\n    let previousInput;\n    let previousOutput;\n    for (let i = 2; i < length; i += 2) {\n      const input = args[i](context);\n      let output = args[i + 1](context);\n      const isColor = Array.isArray(output);\n      if (isColor) {\n        output = (0,require$_DOT__DOT__SLASH_color_DOT_js.withAlpha)(output);\n      }\n      if (input >= value) {\n        if (i === 2) {\n          return output;\n        }\n        if (isColor) {\n          return interpolateColor(base, value, previousInput, previousOutput, input, output,);\n        }\n        return interpolateNumber(base, value, previousInput, previousOutput, input, output,);\n      }\n      previousInput = input;\n      previousOutput = output;\n    }\n    return previousOutput;\n  };\n}\nfunction compileConvertExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch(op) {\n    case require$_DOT__SLASH_expression_DOT_js.Ops.ToString:\n      {\n        return context => {\n          const value = args[0](context);\n          if (expression.args[0].type === require$_DOT__SLASH_expression_DOT_js.ColorType) {\n            return (0,require$_DOT__DOT__SLASH_color_DOT_js.toString)(value);\n          }\n          return value.toString();\n        };\n      }\n    default:\n      {\n        throw new Error(`Unsupported convert operator ${op}`);\n      }\n  }\n}\nfunction interpolateNumber(base, value, input1, output1, input2, output2) {\n  const delta = input2 - input1;\n  if (delta === 0) {\n    return output1;\n  }\n  const along = value - input1;\n  const factor = base === 1 ? along / delta : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);\n  return output1 + factor * (output2 - output1);\n}\nfunction interpolateColor(base, value, input1, rgba1, input2, rgba2) {\n  const delta = input2 - input1;\n  if (delta === 0) {\n    return rgba1;\n  }\n  const lcha1 = (0,require$_DOT__DOT__SLASH_color_DOT_js.rgbaToLcha)(rgba1);\n  const lcha2 = (0,require$_DOT__DOT__SLASH_color_DOT_js.rgbaToLcha)(rgba2);\n  let deltaHue = lcha2[2] - lcha1[2];\n  if (deltaHue > 180) {\n    deltaHue -= 360;\n  } else if (deltaHue < -180) {\n    deltaHue += 360;\n  }\n  const lcha = [interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]), interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]), lcha1[2] + interpolateNumber(base, value, input1, 0, input2, deltaHue), interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3]),];\n  return (0,require$_DOT__DOT__SLASH_color_DOT_js.normalize)((0,require$_DOT__DOT__SLASH_color_DOT_js.lchaToRgba)(lcha));\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","newEvaluationContext","variables","properties","resolution","NaN","featureId","geometryType","buildExpression","encoded","type","context","expression","require$_DOT__SLASH_expression_DOT_js","parse","compileExpression","LiteralExpression","ColorType","value","colorValue","require$_DOT__DOT__SLASH_color_DOT_js","fromString","operator","Ops","Number","String","Coalesce","compileAssertionExpression","Get","Var","Has","compileAccessorExpression","Id","GeometryType","Concat","args","map","e","concat","arg","toString","Resolution","Any","All","Between","In","Not","compileLogicalExpression","Equal","NotEqual","LessThan","LessThanOrEqualTo","GreaterThan","GreaterThanOrEqualTo","compileComparisonExpression","Multiply","Divide","Add","Subtract","Clamp","Mod","Pow","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","compileNumericExpression","Case","compileCaseExpression","Match","compileMatchExpression","Interpolate","compileInterpolateExpression","ToString","compileConvertExpression","Error","length","Array","i","name","nameExpression","ii","keyExpression","key","Object","hasOwn","op","left","right","min","max","Math","pow","abs","floor","ceil","round","sin","cos","atan2","atan","sqrt","condition","base","input","output","isColor","isArray","withAlpha","input2","input1","rgba1","lcha1","rgbaToLcha","lcha2","rgba2","deltaHue","lcha","interpolateNumber","normalize","lchaToRgba","previousInput","previousOutput","output1","output2","delta","along","factor","defineProperties","__esModule","enumerable","get"]
}
