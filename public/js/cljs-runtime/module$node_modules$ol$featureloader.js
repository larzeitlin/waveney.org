shadow$provide.module$node_modules$ol$featureloader = function(global, require, module, exports) {
  function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", "function" === typeof url ? url(extent, resolution, projection) : url, !0);
    "arraybuffer" == format.getType() && (xhr.responseType = "arraybuffer");
    xhr.withCredentials = withCredentials;
    xhr.onload = function(event) {
      if (!xhr.status || 200 <= xhr.status && 300 > xhr.status) {
        event = format.getType();
        try {
          let source;
          "text" == event || "json" == event ? source = xhr.responseText : "xml" == event ? source = xhr.responseXML || xhr.responseText : "arraybuffer" == event && (source = xhr.response);
          source ? success(format.readFeatures(source, {extent, featureProjection:projection}), format.readProjection(source)) : failure();
        } catch {
          failure();
        }
      } else {
        failure();
      }
    };
    xhr.onerror = failure;
    xhr.send();
  }
  function xhr(url, format) {
    return function(extent, resolution, projection, success, failure) {
      loadFeaturesXhr(url, format, extent, resolution, projection, (features, dataProjection) => {
        this.addFeatures(features);
        void 0 !== success && success(features);
      }, failure ? failure : require$_DOT__SLASH_functions_DOT_js.VOID);
    };
  }
  function setWithCredentials(xhrWithCredentials) {
    withCredentials = xhrWithCredentials;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, loadFeaturesXhr:{enumerable:!0, get:function() {
    return loadFeaturesXhr;
  }}, setWithCredentials:{enumerable:!0, get:function() {
    return setWithCredentials;
  }}, xhr:{enumerable:!0, get:function() {
    return xhr;
  }}});
  var require$_DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions");
  let withCredentials = !1;
};

//# sourceMappingURL=module$node_modules$ol$featureloader.js.map
