shadow$provide.module$node_modules$ol$MapBrowserEventHandler = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  exports = require("module$node_modules$ol$MapBrowserEvent");
  var require$_DOT__SLASH_MapBrowserEventType_DOT_js = require("module$node_modules$ol$MapBrowserEventType");
  global = require("module$node_modules$ol$events$EventType");
  var require$_DOT__SLASH_events_SLASH_Target_DOT_js = require("module$node_modules$ol$events$Target"), require$_DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events"), require$_DOT__SLASH_has_DOT_js = require("module$node_modules$ol$has");
  module = require("module$node_modules$ol$pointer$EventType");
  var default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js = require.esmDefault(require$_DOT__SLASH_MapBrowserEventType_DOT_js), default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js = require.esmDefault(exports);
  exports = require.esmDefault(require$_DOT__SLASH_events_SLASH_Target_DOT_js);
  var default$$require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js = require.esmDefault(module), default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(global);
  class MapBrowserEventHandler extends exports.default {
    constructor(map, moveTolerance) {
      super(map);
      this.map_ = map;
      this.clickTimeoutId_;
      this.dragging_ = this.emulateClicks_ = !1;
      this.dragListenerKeys_ = [];
      this.moveTolerance_ = void 0 === moveTolerance ? 1 : moveTolerance;
      this.down_ = null;
      map = this.map_.getViewport();
      this.activePointers_ = [];
      this.trackedTouches_ = {};
      this.element_ = map;
      this.pointerdownListenerKey_ = (0,require$_DOT__SLASH_events_DOT_js.listen)(map, default$$require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js.default.POINTERDOWN, this.handlePointerDown_, this);
      this.originalPointerMoveEvent_;
      this.relayedListenerKey_ = (0,require$_DOT__SLASH_events_DOT_js.listen)(map, default$$require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js.default.POINTERMOVE, this.relayMoveEvent_, this);
      this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);
      this.element_.addEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.TOUCHMOVE, this.boundHandleTouchMove_, require$_DOT__SLASH_has_DOT_js.PASSIVE_EVENT_LISTENERS ? {passive:!1} : !1);
    }
    emulateClick_(pointerEvent) {
      let newEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.CLICK, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);
      void 0 !== this.clickTimeoutId_ ? (clearTimeout(this.clickTimeoutId_), this.clickTimeoutId_ = void 0, newEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.DBLCLICK, this.map_, pointerEvent), this.dispatchEvent(newEvent)) : this.clickTimeoutId_ = setTimeout(() => {
        this.clickTimeoutId_ = void 0;
        const newEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.SINGLECLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
      }, 250);
    }
    updateActivePointers_(pointerEvent) {
      const id = pointerEvent.pointerId;
      if (pointerEvent.type == default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERUP || pointerEvent.type == default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERCANCEL) {
        delete this.trackedTouches_[id];
        for (const pointerId in this.trackedTouches_) {
          if (this.trackedTouches_[pointerId].target !== pointerEvent.target) {
            delete this.trackedTouches_[pointerId];
            break;
          }
        }
      } else if (pointerEvent.type == default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERDOWN || pointerEvent.type == default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERMOVE) {
        this.trackedTouches_[id] = pointerEvent;
      }
      this.activePointers_ = Object.values(this.trackedTouches_);
    }
    handlePointerUp_(pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      const newEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERUP, this.map_, pointerEvent, void 0, void 0, this.activePointers_);
      this.dispatchEvent(newEvent);
      this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent) && this.emulateClick_(this.down_);
      0 === this.activePointers_.length && (this.dragListenerKeys_.forEach(require$_DOT__SLASH_events_DOT_js.unlistenByKey), this.dragListenerKeys_.length = 0, this.dragging_ = !1, this.down_ = null);
    }
    isMouseActionButton_(pointerEvent) {
      return 0 === pointerEvent.button;
    }
    handlePointerDown_(pointerEvent) {
      this.emulateClicks_ = 0 === this.activePointers_.length;
      this.updateActivePointers_(pointerEvent);
      const newEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERDOWN, this.map_, pointerEvent, void 0, void 0, this.activePointers_);
      this.dispatchEvent(newEvent);
      this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);
      Object.defineProperty(this.down_, "target", {writable:!1, value:pointerEvent.target});
      0 === this.dragListenerKeys_.length && (pointerEvent = this.map_.getOwnerDocument(), this.dragListenerKeys_.push((0,require$_DOT__SLASH_events_DOT_js.listen)(pointerEvent, default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERMOVE, this.handlePointerMove_, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(pointerEvent, default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERUP, this.handlePointerUp_, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(this.element_, 
      default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERCANCEL, this.handlePointerUp_, this)), this.element_.getRootNode && this.element_.getRootNode() !== pointerEvent && this.dragListenerKeys_.push((0,require$_DOT__SLASH_events_DOT_js.listen)(this.element_.getRootNode(), default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERUP, this.handlePointerUp_, this)));
    }
    handlePointerMove_(pointerEvent) {
      this.isMoving_(pointerEvent) && (this.updateActivePointers_(pointerEvent), this.dragging_ = !0, pointerEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERDRAG, this.map_, pointerEvent, this.dragging_, void 0, this.activePointers_), this.dispatchEvent(pointerEvent));
    }
    relayMoveEvent_(pointerEvent) {
      this.originalPointerMoveEvent_ = pointerEvent;
      const dragging = !(!this.down_ || !this.isMoving_(pointerEvent));
      this.dispatchEvent(new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default.POINTERMOVE, this.map_, pointerEvent, dragging));
    }
    handleTouchMove_(event) {
      const originalEvent = this.originalPointerMoveEvent_;
      originalEvent && !originalEvent.defaultPrevented || "boolean" === typeof event.cancelable && !0 !== event.cancelable || event.preventDefault();
    }
    isMoving_(pointerEvent) {
      return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    }
    disposeInternal() {
      this.relayedListenerKey_ && ((0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.relayedListenerKey_), this.relayedListenerKey_ = null);
      this.element_.removeEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.TOUCHMOVE, this.boundHandleTouchMove_);
      this.pointerdownListenerKey_ && ((0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.pointerdownListenerKey_), this.pointerdownListenerKey_ = null);
      this.dragListenerKeys_.forEach(require$_DOT__SLASH_events_DOT_js.unlistenByKey);
      this.dragListenerKeys_.length = 0;
      this.element_ = null;
      super.disposeInternal();
    }
  }
  const $$default = MapBrowserEventHandler;
};

//# sourceMappingURL=module$node_modules$ol$MapBrowserEventHandler.js.map
