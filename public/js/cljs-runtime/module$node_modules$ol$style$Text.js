shadow$provide.module$node_modules$ol$style$Text = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_size_DOT_js = require("module$node_modules$ol$size");
  global = require("module$node_modules$ol$style$Fill");
  var default$$require$_DOT__SLASH_Fill_DOT_js = require.esmDefault(global);
  class Text {
    constructor(options) {
      options = options || {};
      this.font_ = options.font;
      this.rotation_ = options.rotation;
      this.rotateWithView_ = options.rotateWithView;
      this.keepUpright_ = options.keepUpright;
      this.scale_ = options.scale;
      this.scaleArray_ = (0,require$_DOT__DOT__SLASH_size_DOT_js.toSize)(void 0 !== options.scale ? options.scale : 1);
      this.text_ = options.text;
      this.textAlign_ = options.textAlign;
      this.justify_ = options.justify;
      this.repeat_ = options.repeat;
      this.textBaseline_ = options.textBaseline;
      this.fill_ = void 0 !== options.fill ? options.fill : new default$$require$_DOT__SLASH_Fill_DOT_js.default({color:"#333"});
      this.maxAngle_ = void 0 !== options.maxAngle ? options.maxAngle : Math.PI / 4;
      this.placement_ = void 0 !== options.placement ? options.placement : "point";
      this.overflow_ = !!options.overflow;
      this.stroke_ = void 0 !== options.stroke ? options.stroke : null;
      this.offsetX_ = void 0 !== options.offsetX ? options.offsetX : 0;
      this.offsetY_ = void 0 !== options.offsetY ? options.offsetY : 0;
      this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;
      this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;
      this.padding_ = void 0 === options.padding ? null : options.padding;
      this.declutterMode_ = options.declutterMode;
    }
    clone() {
      const scale = this.getScale();
      return new Text({font:this.getFont(), placement:this.getPlacement(), repeat:this.getRepeat(), maxAngle:this.getMaxAngle(), overflow:this.getOverflow(), rotation:this.getRotation(), rotateWithView:this.getRotateWithView(), keepUpright:this.getKeepUpright(), scale:Array.isArray(scale) ? scale.slice() : scale, text:this.getText(), textAlign:this.getTextAlign(), justify:this.getJustify(), textBaseline:this.getTextBaseline(), fill:this.getFill() ? this.getFill().clone() : void 0, stroke:this.getStroke() ? 
      this.getStroke().clone() : void 0, offsetX:this.getOffsetX(), offsetY:this.getOffsetY(), backgroundFill:this.getBackgroundFill() ? this.getBackgroundFill().clone() : void 0, backgroundStroke:this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : void 0, padding:this.getPadding() || void 0, declutterMode:this.getDeclutterMode()});
    }
    getOverflow() {
      return this.overflow_;
    }
    getFont() {
      return this.font_;
    }
    getMaxAngle() {
      return this.maxAngle_;
    }
    getPlacement() {
      return this.placement_;
    }
    getRepeat() {
      return this.repeat_;
    }
    getOffsetX() {
      return this.offsetX_;
    }
    getOffsetY() {
      return this.offsetY_;
    }
    getFill() {
      return this.fill_;
    }
    getRotateWithView() {
      return this.rotateWithView_;
    }
    getKeepUpright() {
      return this.keepUpright_;
    }
    getRotation() {
      return this.rotation_;
    }
    getScale() {
      return this.scale_;
    }
    getScaleArray() {
      return this.scaleArray_;
    }
    getStroke() {
      return this.stroke_;
    }
    getText() {
      return this.text_;
    }
    getTextAlign() {
      return this.textAlign_;
    }
    getJustify() {
      return this.justify_;
    }
    getTextBaseline() {
      return this.textBaseline_;
    }
    getBackgroundFill() {
      return this.backgroundFill_;
    }
    getBackgroundStroke() {
      return this.backgroundStroke_;
    }
    getPadding() {
      return this.padding_;
    }
    getDeclutterMode() {
      return this.declutterMode_;
    }
    setOverflow(overflow) {
      this.overflow_ = overflow;
    }
    setFont(font) {
      this.font_ = font;
    }
    setMaxAngle(maxAngle) {
      this.maxAngle_ = maxAngle;
    }
    setOffsetX(offsetX) {
      this.offsetX_ = offsetX;
    }
    setOffsetY(offsetY) {
      this.offsetY_ = offsetY;
    }
    setPlacement(placement) {
      this.placement_ = placement;
    }
    setRepeat(repeat) {
      this.repeat_ = repeat;
    }
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }
    setKeepUpright(keepUpright) {
      this.keepUpright_ = keepUpright;
    }
    setFill(fill) {
      this.fill_ = fill;
    }
    setRotation(rotation) {
      this.rotation_ = rotation;
    }
    setScale(scale) {
      this.scale_ = scale;
      this.scaleArray_ = (0,require$_DOT__DOT__SLASH_size_DOT_js.toSize)(void 0 !== scale ? scale : 1);
    }
    setStroke(stroke) {
      this.stroke_ = stroke;
    }
    setText(text) {
      this.text_ = text;
    }
    setTextAlign(textAlign) {
      this.textAlign_ = textAlign;
    }
    setJustify(justify) {
      this.justify_ = justify;
    }
    setTextBaseline(textBaseline) {
      this.textBaseline_ = textBaseline;
    }
    setBackgroundFill(fill) {
      this.backgroundFill_ = fill;
    }
    setBackgroundStroke(stroke) {
      this.backgroundStroke_ = stroke;
    }
    setPadding(padding) {
      this.padding_ = padding;
    }
  }
  const $$default = Text;
};

//# sourceMappingURL=module$node_modules$ol$style$Text.js.map
