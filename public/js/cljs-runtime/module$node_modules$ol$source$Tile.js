shadow$provide.module$node_modules$ol$source$Tile = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, TileSourceEvent:{enumerable:!0, get:function() {
    return TileSourceEvent;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$events$Event");
  var require$_DOT__DOT__SLASH_size_DOT_js = require("module$node_modules$ol$size"), require$_DOT__DOT__SLASH_tilecoord_DOT_js = require("module$node_modules$ol$tilecoord"), require$_DOT__DOT__SLASH_tilegrid_DOT_js = require("module$node_modules$ol$tilegrid"), require$_DOT__DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util");
  global = require("module$node_modules$ol$source$Source");
  module = require.esmDefault(module);
  require = require.esmDefault(global);
  class TileSource extends require.default {
    constructor(options) {
      super({attributions:options.attributions, attributionsCollapsible:options.attributionsCollapsible, projection:options.projection, state:options.state, wrapX:options.wrapX, interpolate:options.interpolate});
      this.on;
      this.once;
      this.un;
      this.tilePixelRatio_ = void 0 !== options.tilePixelRatio ? options.tilePixelRatio : 1;
      this.tileGrid = void 0 !== options.tileGrid ? options.tileGrid : null;
      const tileSize = [256, 256];
      this.tileGrid && (0,require$_DOT__DOT__SLASH_size_DOT_js.toSize)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);
      this.tmpSize = [0, 0];
      this.key_ = options.key || (0,require$_DOT__DOT__SLASH_util_DOT_js.getUid)(this);
      this.tileOptions = {transition:options.transition, interpolate:options.interpolate};
      this.zDirection = options.zDirection ? options.zDirection : 0;
    }
    getGutterForProjection(projection) {
      return 0;
    }
    getKey() {
      return this.key_;
    }
    setKey(key) {
      this.key_ !== key && (this.key_ = key, this.changed());
    }
    getResolutions(projection) {
      return (projection = projection ? this.getTileGridForProjection(projection) : this.tileGrid) ? projection.getResolutions() : null;
    }
    getTile(z, x, y, pixelRatio, projection) {
      return (0,require$_DOT__DOT__SLASH_util_DOT_js.abstract)();
    }
    getTileGrid() {
      return this.tileGrid;
    }
    getTileGridForProjection(projection) {
      return this.tileGrid ? this.tileGrid : (0,require$_DOT__DOT__SLASH_tilegrid_DOT_js.getForProjection)(projection);
    }
    getTilePixelRatio(pixelRatio) {
      return this.tilePixelRatio_;
    }
    getTilePixelSize(z, pixelRatio, projection) {
      projection = this.getTileGridForProjection(projection);
      pixelRatio = this.getTilePixelRatio(pixelRatio);
      z = (0,require$_DOT__DOT__SLASH_size_DOT_js.toSize)(projection.getTileSize(z), this.tmpSize);
      return 1 == pixelRatio ? z : (0,require$_DOT__DOT__SLASH_size_DOT_js.scale)(z, pixelRatio, this.tmpSize);
    }
    getTileCoordForTileUrlFunction(tileCoord, projection) {
      const gridProjection = void 0 !== projection ? projection : this.getProjection();
      projection = void 0 !== projection ? this.getTileGridForProjection(gridProjection) : this.tileGrid || this.getTileGridForProjection(gridProjection);
      this.getWrapX() && gridProjection.isGlobal() && (tileCoord = (0,require$_DOT__DOT__SLASH_tilegrid_DOT_js.wrapX)(projection, tileCoord, gridProjection));
      return (0,require$_DOT__DOT__SLASH_tilecoord_DOT_js.withinExtentAndZ)(tileCoord, projection) ? tileCoord : null;
    }
    clear() {
    }
    refresh() {
      this.clear();
      super.refresh();
    }
  }
  class TileSourceEvent extends module.default {
    constructor(type, tile) {
      super(type);
      this.tile = tile;
    }
  }
  const $$default = TileSource;
};

//# sourceMappingURL=module$node_modules$ol$source$Tile.js.map
