shadow$provide.module$node_modules$ol$source$Source = function(global, require, module, exports) {
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if ("function" === typeof attributionLike) {
      return attributionLike;
    }
    Array.isArray(attributionLike) || (attributionLike = [attributionLike]);
    return frameState => attributionLike;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$Object");
  var require$_DOT__DOT__SLASH_proj_DOT_js = require("module$node_modules$ol$proj");
  require = require.esmDefault(global);
  class Source extends require.default {
    constructor(options) {
      super();
      this.projection = (0,require$_DOT__DOT__SLASH_proj_DOT_js.get)(options.projection);
      this.attributions_ = adaptAttributions(options.attributions);
      this.attributionsCollapsible_ = options.attributionsCollapsible ?? !0;
      this.loading = !1;
      this.state_ = void 0 !== options.state ? options.state : "ready";
      this.wrapX_ = void 0 !== options.wrapX ? options.wrapX : !1;
      this.interpolate_ = !!options.interpolate;
      this.viewRejector = this.viewResolver = null;
      const self = this;
      this.viewPromise_ = new Promise(function(resolve, reject) {
        self.viewResolver = resolve;
        self.viewRejector = reject;
      });
    }
    getAttributions() {
      return this.attributions_;
    }
    getAttributionsCollapsible() {
      return this.attributionsCollapsible_;
    }
    getProjection() {
      return this.projection;
    }
    getResolutions(projection) {
      return null;
    }
    getView() {
      return this.viewPromise_;
    }
    getState() {
      return this.state_;
    }
    getWrapX() {
      return this.wrapX_;
    }
    getInterpolate() {
      return this.interpolate_;
    }
    refresh() {
      this.changed();
    }
    setAttributions(attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    }
    setState(state) {
      this.state_ = state;
      this.changed();
    }
  }
  const $$default = Source;
};

//# sourceMappingURL=module$node_modules$ol$source$Source.js.map
