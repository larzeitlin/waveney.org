shadow$provide.module$node_modules$ol$events$condition = function(global, require, module, exports) {
  function all(var_args) {
    const conditions = arguments;
    return function(event) {
      let pass = !0;
      for (let i = 0, ii = conditions.length; i < ii && (pass = pass && conditions[i](event), pass); ++i) {
      }
      return pass;
    };
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, all:{enumerable:!0, get:function() {
    return all;
  }}, altKeyOnly:{enumerable:!0, get:function() {
    return altKeyOnly;
  }}, altShiftKeysOnly:{enumerable:!0, get:function() {
    return altShiftKeysOnly;
  }}, always:{enumerable:!0, get:function() {
    return always;
  }}, click:{enumerable:!0, get:function() {
    return click;
  }}, doubleClick:{enumerable:!0, get:function() {
    return doubleClick;
  }}, focus:{enumerable:!0, get:function() {
    return focus;
  }}, focusWithTabindex:{enumerable:!0, get:function() {
    return focusWithTabindex;
  }}, mouseActionButton:{enumerable:!0, get:function() {
    return mouseActionButton;
  }}, mouseOnly:{enumerable:!0, get:function() {
    return mouseOnly;
  }}, never:{enumerable:!0, get:function() {
    return never;
  }}, noModifierKeys:{enumerable:!0, get:function() {
    return noModifierKeys;
  }}, penOnly:{enumerable:!0, get:function() {
    return penOnly;
  }}, platformModifierKey:{enumerable:!0, get:function() {
    return platformModifierKey;
  }}, platformModifierKeyOnly:{enumerable:!0, get:function() {
    return platformModifierKeyOnly;
  }}, pointerMove:{enumerable:!0, get:function() {
    return pointerMove;
  }}, primaryAction:{enumerable:!0, get:function() {
    return primaryAction;
  }}, shiftKeyOnly:{enumerable:!0, get:function() {
    return shiftKeyOnly;
  }}, singleClick:{enumerable:!0, get:function() {
    return singleClick;
  }}, targetNotEditable:{enumerable:!0, get:function() {
    return targetNotEditable;
  }}, touchOnly:{enumerable:!0, get:function() {
    return touchOnly;
  }}});
  global = require("module$node_modules$ol$MapBrowserEventType");
  var require$_DOT__DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts");
  module = require("module$node_modules$ol$functions");
  var require$_DOT__DOT__SLASH_has_DOT_js = require("module$node_modules$ol$has"), default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js = require.esmDefault(global);
  const altKeyOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return mapBrowserEvent.altKey && !(mapBrowserEvent.metaKey || mapBrowserEvent.ctrlKey) && !mapBrowserEvent.shiftKey;
  }, altShiftKeysOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return mapBrowserEvent.altKey && !(mapBrowserEvent.metaKey || mapBrowserEvent.ctrlKey) && mapBrowserEvent.shiftKey;
  }, focus = function(event) {
    const targetElement = event.map.getTargetElement(), rootNode = targetElement.getRootNode();
    event = event.map.getOwnerDocument().activeElement;
    return rootNode instanceof ShadowRoot ? rootNode.host.contains(event) : targetElement.contains(event);
  }, focusWithTabindex = function(event) {
    const targetElement = event.map.getTargetElement(), rootNode = targetElement.getRootNode();
    return (rootNode instanceof ShadowRoot ? rootNode.host : targetElement).hasAttribute("tabindex") ? focus(event) : !0;
  }, always = module.TRUE, click = function(mapBrowserEvent) {
    return mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.CLICK;
  }, mouseActionButton = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return 0 == mapBrowserEvent.button && !(require$_DOT__DOT__SLASH_has_DOT_js.WEBKIT && require$_DOT__DOT__SLASH_has_DOT_js.MAC && mapBrowserEvent.ctrlKey);
  }, never = module.FALSE, pointerMove = function(mapBrowserEvent) {
    return "pointermove" == mapBrowserEvent.type;
  }, singleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.SINGLECLICK;
  }, doubleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == default$$require$_DOT__DOT__SLASH_MapBrowserEventType_DOT_js.default.DBLCLICK;
  }, noModifierKeys = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return !mapBrowserEvent.altKey && !(mapBrowserEvent.metaKey || mapBrowserEvent.ctrlKey) && !mapBrowserEvent.shiftKey;
  }, platformModifierKeyOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return !mapBrowserEvent.altKey && (require$_DOT__DOT__SLASH_has_DOT_js.MAC ? mapBrowserEvent.metaKey : mapBrowserEvent.ctrlKey) && !mapBrowserEvent.shiftKey;
  }, platformModifierKey = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return require$_DOT__DOT__SLASH_has_DOT_js.MAC ? mapBrowserEvent.metaKey : mapBrowserEvent.ctrlKey;
  }, shiftKeyOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    return !mapBrowserEvent.altKey && !(mapBrowserEvent.metaKey || mapBrowserEvent.ctrlKey) && mapBrowserEvent.shiftKey;
  }, targetNotEditable = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    const tagName = mapBrowserEvent.target.tagName;
    return "INPUT" !== tagName && "SELECT" !== tagName && "TEXTAREA" !== tagName && !mapBrowserEvent.target.isContentEditable;
  }, mouseOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(void 0 !== mapBrowserEvent, "mapBrowserEvent must originate from a pointer event");
    return "mouse" == mapBrowserEvent.pointerType;
  }, touchOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(void 0 !== mapBrowserEvent, "mapBrowserEvent must originate from a pointer event");
    return "touch" === mapBrowserEvent.pointerType;
  }, penOnly = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(void 0 !== mapBrowserEvent, "mapBrowserEvent must originate from a pointer event");
    return "pen" === mapBrowserEvent.pointerType;
  }, primaryAction = function(mapBrowserEvent) {
    mapBrowserEvent = mapBrowserEvent.originalEvent;
    (0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)(void 0 !== mapBrowserEvent, "mapBrowserEvent must originate from a pointer event");
    return mapBrowserEvent.isPrimary && 0 === mapBrowserEvent.button;
  };
};

//# sourceMappingURL=module$node_modules$ol$events$condition.js.map
