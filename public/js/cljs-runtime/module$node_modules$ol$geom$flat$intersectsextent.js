shadow$provide.module$node_modules$ol$geom$flat$intersectsextent = function(global, require, module, exports) {
  function intersectsLineString(flatCoordinates, offset, end, stride, extent, coordinatesExtent) {
    coordinatesExtent = coordinatesExtent ?? (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_extent_DOT_js.extendFlatCoordinates)((0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_extent_DOT_js.createEmpty)(), flatCoordinates, offset, end, stride);
    return (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_extent_DOT_js.intersects)(extent, coordinatesExtent) ? coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2] || coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3] ? !0 : (0,require$_DOT__SLASH_segments_DOT_js.forEach)(flatCoordinates, offset, end, stride, function(point1, point2) {
      return (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_extent_DOT_js.intersectsSegment)(extent, point1, point2);
    }) : !1;
  }
  function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
        return !0;
      }
      offset = ends[i];
    }
    return !1;
  }
  function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
    return intersectsLineString(flatCoordinates, offset, end, stride, extent) || (0,require$_DOT__SLASH_contains_DOT_js.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[0], extent[1]) || (0,require$_DOT__SLASH_contains_DOT_js.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[0], extent[3]) || (0,require$_DOT__SLASH_contains_DOT_js.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[2], extent[1]) || (0,require$_DOT__SLASH_contains_DOT_js.linearRingContainsXY)(flatCoordinates, 
    offset, end, stride, extent[2], extent[3]) ? !0 : !1;
  }
  function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
      return !1;
    }
    if (1 === ends.length) {
      return !0;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if ((0,require$_DOT__SLASH_contains_DOT_js.linearRingContainsExtent)(flatCoordinates, ends[i - 1], ends[i], stride, extent) && !intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        return !1;
      }
    }
    return !0;
  }
  function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {
        return !0;
      }
      offset = ends[ends.length - 1];
    }
    return !1;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, intersectsLineString:{enumerable:!0, get:function() {
    return intersectsLineString;
  }}, intersectsLineStringArray:{enumerable:!0, get:function() {
    return intersectsLineStringArray;
  }}, intersectsLinearRing:{enumerable:!0, get:function() {
    return intersectsLinearRing;
  }}, intersectsLinearRingArray:{enumerable:!0, get:function() {
    return intersectsLinearRingArray;
  }}, intersectsLinearRingMultiArray:{enumerable:!0, get:function() {
    return intersectsLinearRingMultiArray;
  }}});
  var require$_DOT__DOT__SLASH__DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__SLASH_contains_DOT_js = require("module$node_modules$ol$geom$flat$contains"), require$_DOT__SLASH_segments_DOT_js = require("module$node_modules$ol$geom$flat$segments");
};

//# sourceMappingURL=module$node_modules$ol$geom$flat$intersectsextent.js.map
