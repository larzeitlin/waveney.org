{
"version":3,
"file":"module$node_modules$ol$sphere.js",
"lineCount":136,
"mappings":"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",
"sources":["node_modules/ol/sphere.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$sphere\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, DEFAULT_RADIUS:{enumerable:true, get:function() {\n  return DEFAULT_RADIUS;\n}}, getArea:{enumerable:true, get:function() {\n  return getArea;\n}}, getDistance:{enumerable:true, get:function() {\n  return getDistance;\n}}, getLength:{enumerable:true, get:function() {\n  return getLength;\n}}, offset:{enumerable:true, get:function() {\n  return offset;\n}}});\nvar require$_DOT__SLASH_math_DOT_js = require(\"./math.js\");\nconst DEFAULT_RADIUS = 6371008.8;\nfunction getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = (0,require$_DOT__SLASH_math_DOT_js.toRadians)(c1[1]);\n  const lat2 = (0,require$_DOT__SLASH_math_DOT_js.toRadians)(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = (0,require$_DOT__SLASH_math_DOT_js.toRadians)(c2[0] - c1[0]) / 2;\n  const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\nfunction getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || \"EPSG:3857\";\n  const type = geometry.getType();\n  if (type !== \"GeometryCollection\") {\n    geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch(type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      {\n        break;\n      }\n    case \"LineString\":\n    case \"LinearRing\":\n      {\n        coordinates = geometry.getCoordinates();\n        length = getLengthInternal(coordinates, radius);\n        break;\n      }\n    case \"MultiLineString\":\n    case \"Polygon\":\n      {\n        coordinates = geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          length += getLengthInternal(coordinates[i], radius);\n        }\n        break;\n      }\n    case \"MultiPolygon\":\n      {\n        coordinates = geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          for (j = 0, jj = coords.length; j < jj; ++j) {\n            length += getLengthInternal(coords[j], radius);\n          }\n        }\n        break;\n      }\n    case \"GeometryCollection\":\n      {\n        const geometries = geometry.getGeometries();\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          length += getLength(geometries[i], options);\n        }\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unsupported geometry type: \" + type);\n      }\n  }\n  return length;\n}\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area += (0,require$_DOT__SLASH_math_DOT_js.toRadians)(x2 - x1) * (2 + Math.sin((0,require$_DOT__SLASH_math_DOT_js.toRadians)(y1)) + Math.sin((0,require$_DOT__SLASH_math_DOT_js.toRadians)(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return area * radius * radius / 2.0;\n}\nfunction getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || \"EPSG:3857\";\n  const type = geometry.getType();\n  if (type !== \"GeometryCollection\") {\n    geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch(type) {\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n    case \"LinearRing\":\n      {\n        break;\n      }\n    case \"Polygon\":\n      {\n        coordinates = geometry.getCoordinates();\n        area = Math.abs(getAreaInternal(coordinates[0], radius));\n        for (i = 1, ii = coordinates.length; i < ii; ++i) {\n          area -= Math.abs(getAreaInternal(coordinates[i], radius));\n        }\n        break;\n      }\n    case \"MultiPolygon\":\n      {\n        coordinates = geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          area += Math.abs(getAreaInternal(coords[0], radius));\n          for (j = 1, jj = coords.length; j < jj; ++j) {\n            area -= Math.abs(getAreaInternal(coords[j], radius));\n          }\n        }\n        break;\n      }\n    case \"GeometryCollection\":\n      {\n        const geometries = geometry.getGeometries();\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          area += getArea(geometries[i], options);\n        }\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unsupported geometry type: \" + type);\n      }\n  }\n  return area;\n}\nfunction offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = (0,require$_DOT__SLASH_math_DOT_js.toRadians)(c1[1]);\n  const lon1 = (0,require$_DOT__SLASH_math_DOT_js.toRadians)(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),);\n  const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),);\n  return [(0,require$_DOT__SLASH_math_DOT_js.toDegrees)(lon), (0,require$_DOT__SLASH_math_DOT_js.toDegrees)(lat)];\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getDistance","c1","c2","radius","DEFAULT_RADIUS","lat1","require$_DOT__SLASH_math_DOT_js","toRadians","lat2","deltaLatBy2","deltaLonBy2","a","Math","sin","cos","atan2","sqrt","getLengthInternal","coordinates","length","i","ii","getLength","geometry","options","projection","type","getType","clone","transform","coords","j","jj","getCoordinates","geometries","getGeometries","Error","getAreaInternal","area","len","x1","y1","x2","y2","getArea","abs","offset","distance","bearing","lon1","dByR","lat","asin","toDegrees","Object","defineProperties","__esModule","enumerable","value","get"]
}
