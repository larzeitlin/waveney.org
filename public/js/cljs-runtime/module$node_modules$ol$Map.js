shadow$provide.module$node_modules$ol$Map = function(global, require, module, exports) {
  function removeLayerMapProperty(layer) {
    layer instanceof default$$require$_DOT__SLASH_layer_SLASH_Layer_DOT_js.default ? layer.setMapInternal(null) : layer instanceof default$$require$_DOT__SLASH_layer_SLASH_Group_DOT_js.default && layer.getLayers().forEach(removeLayerMapProperty);
  }
  function setLayerMapProperty(layer, map) {
    if (layer instanceof default$$require$_DOT__SLASH_layer_SLASH_Layer_DOT_js.default) {
      layer.setMapInternal(map);
    } else {
      if (layer instanceof default$$require$_DOT__SLASH_layer_SLASH_Group_DOT_js.default) {
        layer = layer.getLayers().getArray();
        for (let i = 0, ii = layer.length; i < ii; ++i) {
          setLayerMapProperty(layer[i], map);
        }
      }
    }
  }
  function createOptionsInternal(options) {
    let keyboardEventTarget = null;
    void 0 !== options.keyboardEventTarget && (keyboardEventTarget = "string" === typeof options.keyboardEventTarget ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget);
    const values = {}, layerGroup = options.layers && "function" === typeof options.layers.getLayers ? options.layers : new default$$require$_DOT__SLASH_layer_SLASH_Group_DOT_js.default({layers:options.layers});
    values[default$$require$_DOT__SLASH_MapProperty_DOT_js.default.LAYERGROUP] = layerGroup;
    values[default$$require$_DOT__SLASH_MapProperty_DOT_js.default.TARGET] = options.target;
    values[default$$require$_DOT__SLASH_MapProperty_DOT_js.default.VIEW] = options.view instanceof default$$require$_DOT__SLASH_View_DOT_js.default ? options.view : new default$$require$_DOT__SLASH_View_DOT_js.default();
    let controls;
    void 0 !== options.controls && (Array.isArray(options.controls) ? controls = new default$$require$_DOT__SLASH_Collection_DOT_js.default(options.controls.slice()) : ((0,require$_DOT__SLASH_asserts_DOT_js.assert)("function" === typeof options.controls.getArray, "Expected `controls` to be an array or an `ol/Collection.js`"), controls = options.controls));
    let interactions;
    void 0 !== options.interactions && (Array.isArray(options.interactions) ? interactions = new default$$require$_DOT__SLASH_Collection_DOT_js.default(options.interactions.slice()) : ((0,require$_DOT__SLASH_asserts_DOT_js.assert)("function" === typeof options.interactions.getArray, "Expected `interactions` to be an array or an `ol/Collection.js`"), interactions = options.interactions));
    void 0 !== options.overlays ? Array.isArray(options.overlays) ? options = new default$$require$_DOT__SLASH_Collection_DOT_js.default(options.overlays.slice()) : ((0,require$_DOT__SLASH_asserts_DOT_js.assert)("function" === typeof options.overlays.getArray, "Expected `overlays` to be an array or an `ol/Collection.js`"), options = options.overlays) : options = new default$$require$_DOT__SLASH_Collection_DOT_js.default();
    return {controls, interactions, keyboardEventTarget, overlays:options, values};
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$Collection");
  var require$_DOT__SLASH_CollectionEventType_DOT_js = require("module$node_modules$ol$CollectionEventType");
  module = require("module$node_modules$ol$MapBrowserEvent");
  exports = require("module$node_modules$ol$MapBrowserEventHandler");
  var require$_DOT__SLASH_MapBrowserEventType_DOT_js = require("module$node_modules$ol$MapBrowserEventType"), require$_DOT__SLASH_MapEvent_DOT_js = require("module$node_modules$ol$MapEvent"), require$_DOT__SLASH_MapEventType_DOT_js = require("module$node_modules$ol$MapEventType"), require$_DOT__SLASH_MapProperty_DOT_js = require("module$node_modules$ol$MapProperty"), require$_DOT__SLASH_Object_DOT_js = require("module$node_modules$ol$Object"), require$_DOT__SLASH_ObjectEventType_DOT_js = require("module$node_modules$ol$ObjectEventType"), 
  require$_DOT__SLASH_TileQueue_DOT_js = require("module$node_modules$ol$TileQueue"), require$_DOT__SLASH_View_DOT_js = require("module$node_modules$ol$View"), require$_DOT__SLASH_ViewHint_DOT_js = require("module$node_modules$ol$ViewHint"), require$_DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts"), require$_DOT__SLASH_console_DOT_js = require("module$node_modules$ol$console"), require$_DOT__SLASH_control_SLASH_defaults_DOT_js = 
  require("module$node_modules$ol$control$defaults"), require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require("module$node_modules$ol$events$EventType"), require$_DOT__SLASH_events_DOT_js = require("module$node_modules$ol$events"), require$_DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__SLASH_has_DOT_js = require("module$node_modules$ol$has"), require$_DOT__SLASH_interaction_SLASH_defaults_DOT_js = 
  require("module$node_modules$ol$interaction$defaults"), require$_DOT__SLASH_layer_SLASH_Group_DOT_js = require("module$node_modules$ol$layer$Group"), require$_DOT__SLASH_layer_SLASH_Layer_DOT_js = require("module$node_modules$ol$layer$Layer"), require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js = require("module$node_modules$ol$pointer$EventType"), require$_DOT__SLASH_proj_DOT_js = require("module$node_modules$ol$proj"), require$_DOT__SLASH_render_SLASH_EventType_DOT_js = require("module$node_modules$ol$render$EventType"), 
  require$_DOT__SLASH_renderer_SLASH_Composite_DOT_js = require("module$node_modules$ol$renderer$Composite"), require$_DOT__SLASH_size_DOT_js = require("module$node_modules$ol$size"), require$_DOT__SLASH_transform_DOT_js = require("module$node_modules$ol$transform"), require$_DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), default$$require$_DOT__SLASH_TileQueue_DOT_js = require.esmDefault(require$_DOT__SLASH_TileQueue_DOT_js), default$$require$_DOT__SLASH_ObjectEventType_DOT_js = 
  require.esmDefault(require$_DOT__SLASH_ObjectEventType_DOT_js), default$$require$_DOT__SLASH_MapEvent_DOT_js = require.esmDefault(require$_DOT__SLASH_MapEvent_DOT_js), default$$require$_DOT__SLASH_View_DOT_js = require.esmDefault(require$_DOT__SLASH_View_DOT_js), default$$require$_DOT__SLASH_CollectionEventType_DOT_js = require.esmDefault(require$_DOT__SLASH_CollectionEventType_DOT_js), default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(require$_DOT__SLASH_events_SLASH_EventType_DOT_js), 
  default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js = require.esmDefault(require$_DOT__SLASH_MapBrowserEventType_DOT_js);
  require$_DOT__SLASH_CollectionEventType_DOT_js = require.esmDefault(require$_DOT__SLASH_Object_DOT_js);
  var default$$require$_DOT__SLASH_renderer_SLASH_Composite_DOT_js = require.esmDefault(require$_DOT__SLASH_renderer_SLASH_Composite_DOT_js), default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js = require.esmDefault(module), default$$require$_DOT__SLASH_Collection_DOT_js = require.esmDefault(global), default$$require$_DOT__SLASH_render_SLASH_EventType_DOT_js = require.esmDefault(require$_DOT__SLASH_render_SLASH_EventType_DOT_js), default$$require$_DOT__SLASH_layer_SLASH_Group_DOT_js = require.esmDefault(require$_DOT__SLASH_layer_SLASH_Group_DOT_js), 
  default$$require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js = require.esmDefault(require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js), default$$require$_DOT__SLASH_MapEventType_DOT_js = require.esmDefault(require$_DOT__SLASH_MapEventType_DOT_js), default$$require$_DOT__SLASH_layer_SLASH_Layer_DOT_js = require.esmDefault(require$_DOT__SLASH_layer_SLASH_Layer_DOT_js), default$$require$_DOT__SLASH_MapBrowserEventHandler_DOT_js = require.esmDefault(exports), default$$require$_DOT__SLASH_ViewHint_DOT_js = 
  require.esmDefault(require$_DOT__SLASH_ViewHint_DOT_js), default$$require$_DOT__SLASH_MapProperty_DOT_js = require.esmDefault(require$_DOT__SLASH_MapProperty_DOT_js);
  class Map extends require$_DOT__SLASH_CollectionEventType_DOT_js.default {
    constructor(options) {
      super();
      options = options || {};
      this.on;
      this.once;
      this.un;
      const optionsInternal = createOptionsInternal(options);
      this.renderComplete_ = !1;
      this.loaded_ = !0;
      this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);
      this.maxTilesLoading_ = void 0 !== options.maxTilesLoading ? options.maxTilesLoading : 16;
      this.pixelRatio_ = void 0 !== options.pixelRatio ? options.pixelRatio : require$_DOT__SLASH_has_DOT_js.DEVICE_PIXEL_RATIO;
      this.postRenderTimeoutHandle_;
      this.animationDelayKey_;
      this.animationDelay_ = this.animationDelay_.bind(this);
      this.coordinateToPixelTransform_ = (0,require$_DOT__SLASH_transform_DOT_js.create)();
      this.pixelToCoordinateTransform_ = (0,require$_DOT__SLASH_transform_DOT_js.create)();
      this.frameIndex_ = 0;
      this.layerGroupPropertyListenerKeys_ = this.viewChangeListenerKey_ = this.viewPropertyListenerKey_ = this.previousExtent_ = this.frameState_ = null;
      this.viewport_ = document.createElement("div");
      this.viewport_.className = "ol-viewport" + ("ontouchstart" in window ? " ol-touch" : "");
      this.viewport_.style.position = "relative";
      this.viewport_.style.overflow = "hidden";
      this.viewport_.style.width = "100%";
      this.viewport_.style.height = "100%";
      this.overlayContainer_ = document.createElement("div");
      this.overlayContainer_.style.position = "absolute";
      this.overlayContainer_.style.zIndex = "0";
      this.overlayContainer_.style.width = "100%";
      this.overlayContainer_.style.height = "100%";
      this.overlayContainer_.style.pointerEvents = "none";
      this.overlayContainer_.className = "ol-overlaycontainer";
      this.viewport_.appendChild(this.overlayContainer_);
      this.overlayContainerStopEvent_ = document.createElement("div");
      this.overlayContainerStopEvent_.style.position = "absolute";
      this.overlayContainerStopEvent_.style.zIndex = "0";
      this.overlayContainerStopEvent_.style.width = "100%";
      this.overlayContainerStopEvent_.style.height = "100%";
      this.overlayContainerStopEvent_.style.pointerEvents = "none";
      this.overlayContainerStopEvent_.className = "ol-overlaycontainer-stopevent";
      this.viewport_.appendChild(this.overlayContainerStopEvent_);
      this.mapBrowserEventHandler_ = null;
      this.moveTolerance_ = options.moveTolerance;
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
      this.targetElement_ = this.targetChangeHandlerKeys_ = null;
      this.resizeObserver_ = new ResizeObserver(() => this.updateSize());
      this.controls = optionsInternal.controls || (0,require$_DOT__SLASH_control_SLASH_defaults_DOT_js.defaults)();
      this.interactions = optionsInternal.interactions || (0,require$_DOT__SLASH_interaction_SLASH_defaults_DOT_js.defaults)({onFocusOnly:!0});
      this.overlays_ = optionsInternal.overlays;
      this.overlayIdIndex_ = {};
      this.renderer_ = null;
      this.postRenderFunctions_ = [];
      this.tileQueue_ = new default$$require$_DOT__SLASH_TileQueue_DOT_js.default(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));
      this.addChangeListener(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.LAYERGROUP, this.handleLayerGroupChanged_);
      this.addChangeListener(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.VIEW, this.handleViewChanged_);
      this.addChangeListener(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.SIZE, this.handleSizeChanged_);
      this.addChangeListener(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.TARGET, this.handleTargetChanged_);
      this.setProperties(optionsInternal.values);
      const map = this;
      !options.view || options.view instanceof default$$require$_DOT__SLASH_View_DOT_js.default || options.view.then(function(viewOptions) {
        map.setView(new default$$require$_DOT__SLASH_View_DOT_js.default(viewOptions));
      });
      this.controls.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.ADD, event => {
        event.element.setMap(this);
      });
      this.controls.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.REMOVE, event => {
        event.element.setMap(null);
      });
      this.interactions.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.ADD, event => {
        event.element.setMap(this);
      });
      this.interactions.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.REMOVE, event => {
        event.element.setMap(null);
      });
      this.overlays_.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.ADD, event => {
        this.addOverlayInternal_(event.element);
      });
      this.overlays_.addEventListener(default$$require$_DOT__SLASH_CollectionEventType_DOT_js.default.REMOVE, event => {
        const id = event.element.getId();
        void 0 !== id && delete this.overlayIdIndex_[id.toString()];
        event.element.setMap(null);
      });
      this.controls.forEach(control => {
        control.setMap(this);
      });
      this.interactions.forEach(interaction => {
        interaction.setMap(this);
      });
      this.overlays_.forEach(this.addOverlayInternal_.bind(this));
    }
    addControl(control) {
      this.getControls().push(control);
    }
    addInteraction(interaction) {
      this.getInteractions().push(interaction);
    }
    addLayer(layer) {
      this.getLayerGroup().getLayers().push(layer);
    }
    handleLayerAdd_(event) {
      setLayerMapProperty(event.layer, this);
    }
    addOverlay(overlay) {
      this.getOverlays().push(overlay);
    }
    addOverlayInternal_(overlay) {
      const id = overlay.getId();
      void 0 !== id && (this.overlayIdIndex_[id.toString()] = overlay);
      overlay.setMap(this);
    }
    disposeInternal() {
      this.controls.clear();
      this.interactions.clear();
      this.overlays_.clear();
      this.resizeObserver_.disconnect();
      this.setTarget(null);
      super.disposeInternal();
    }
    forEachFeatureAtPixel(pixel, callback, options) {
      if (this.frameState_ && this.renderer_) {
        return pixel = this.getCoordinateFromPixelInternal(pixel), options = void 0 !== options ? options : {}, this.renderer_.forEachFeatureAtCoordinate(pixel, this.frameState_, void 0 !== options.hitTolerance ? options.hitTolerance : 0, !1 !== options.checkWrapped, callback, null, void 0 !== options.layerFilter ? options.layerFilter : require$_DOT__SLASH_functions_DOT_js.TRUE, null);
      }
    }
    getFeaturesAtPixel(pixel, options) {
      const features = [];
      this.forEachFeatureAtPixel(pixel, function(feature) {
        features.push(feature);
      }, options);
      return features;
    }
    getAllLayers() {
      function addLayersFrom(layerGroup) {
        layerGroup.forEach(function(layer) {
          layer instanceof default$$require$_DOT__SLASH_layer_SLASH_Group_DOT_js.default ? addLayersFrom(layer.getLayers()) : layers.push(layer);
        });
      }
      const layers = [];
      addLayersFrom(this.getLayers());
      return layers;
    }
    hasFeatureAtPixel(pixel, options) {
      if (!this.frameState_ || !this.renderer_) {
        return !1;
      }
      pixel = this.getCoordinateFromPixelInternal(pixel);
      options = void 0 !== options ? options : {};
      return this.renderer_.hasFeatureAtCoordinate(pixel, this.frameState_, void 0 !== options.hitTolerance ? options.hitTolerance : 0, !1 !== options.checkWrapped, void 0 !== options.layerFilter ? options.layerFilter : require$_DOT__SLASH_functions_DOT_js.TRUE, null);
    }
    getEventCoordinate(event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    }
    getEventCoordinateInternal(event) {
      return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
    }
    getEventPixel(event) {
      const viewportPosition = this.viewport_.getBoundingClientRect(), viewportSize = this.getSize();
      event = "changedTouches" in event ? event.changedTouches[0] : event;
      return [(event.clientX - viewportPosition.left) / (viewportPosition.width / viewportSize[0]), (event.clientY - viewportPosition.top) / (viewportPosition.height / viewportSize[1])];
    }
    getTarget() {
      return this.get(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.TARGET);
    }
    getTargetElement() {
      return this.targetElement_;
    }
    getCoordinateFromPixel(pixel) {
      return (0,require$_DOT__SLASH_proj_DOT_js.toUserCoordinate)(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
    }
    getCoordinateFromPixelInternal(pixel) {
      const frameState = this.frameState_;
      return frameState ? (0,require$_DOT__SLASH_transform_DOT_js.apply)(frameState.pixelToCoordinateTransform, pixel.slice()) : null;
    }
    getControls() {
      return this.controls;
    }
    getOverlays() {
      return this.overlays_;
    }
    getOverlayById(id) {
      id = this.overlayIdIndex_[id.toString()];
      return void 0 !== id ? id : null;
    }
    getInteractions() {
      return this.interactions;
    }
    getLayerGroup() {
      return this.get(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.LAYERGROUP);
    }
    setLayers(layers) {
      var group = this.getLayerGroup();
      layers instanceof default$$require$_DOT__SLASH_Collection_DOT_js.default ? group.setLayers(layers) : (group = group.getLayers(), group.clear(), group.extend(layers));
    }
    getLayers() {
      return this.getLayerGroup().getLayers();
    }
    getLoadingOrNotReady() {
      const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var state = layerStatesArray[i];
        if (!state.visible) {
          continue;
        }
        const renderer = state.layer.getRenderer();
        if (renderer && !renderer.ready || (state = state.layer.getSource()) && state.loading) {
          return !0;
        }
      }
      return !1;
    }
    getPixelFromCoordinate(coordinate) {
      coordinate = (0,require$_DOT__SLASH_proj_DOT_js.fromUserCoordinate)(coordinate, this.getView().getProjection());
      return this.getPixelFromCoordinateInternal(coordinate);
    }
    getPixelFromCoordinateInternal(coordinate) {
      const frameState = this.frameState_;
      return frameState ? (0,require$_DOT__SLASH_transform_DOT_js.apply)(frameState.coordinateToPixelTransform, coordinate.slice(0, 2)) : null;
    }
    getRenderer() {
      return this.renderer_;
    }
    getSize() {
      return this.get(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.SIZE);
    }
    getView() {
      return this.get(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.VIEW);
    }
    getViewport() {
      return this.viewport_;
    }
    getOverlayContainer() {
      return this.overlayContainer_;
    }
    getOverlayContainerStopEvent() {
      return this.overlayContainerStopEvent_;
    }
    getOwnerDocument() {
      const targetElement = this.getTargetElement();
      return targetElement ? targetElement.ownerDocument : document;
    }
    getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
      return (0,require$_DOT__SLASH_TileQueue_DOT_js.getTilePriority)(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
    }
    handleBrowserEvent(browserEvent, type) {
      type = type || browserEvent.type;
      browserEvent = new default$$require$_DOT__SLASH_MapBrowserEvent_DOT_js.default(type, this, browserEvent);
      this.handleMapBrowserEvent(browserEvent);
    }
    handleMapBrowserEvent(mapBrowserEvent) {
      if (this.frameState_) {
        var originalEvent = mapBrowserEvent.originalEvent, eventType = originalEvent.type;
        if (eventType === default$$require$_DOT__SLASH_pointer_SLASH_EventType_DOT_js.default.POINTERDOWN || eventType === default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.WHEEL || eventType === default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.KEYDOWN) {
          eventType = this.getOwnerDocument();
          var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : eventType;
          originalEvent = originalEvent.target;
          eventType = rootNode instanceof ShadowRoot ? rootNode.host === originalEvent ? rootNode.host.ownerDocument : rootNode : rootNode === eventType ? eventType.documentElement : rootNode;
          if (this.overlayContainerStopEvent_.contains(originalEvent) || !eventType.contains(originalEvent)) {
            return;
          }
        }
        mapBrowserEvent.frameState = this.frameState_;
        if (!1 !== this.dispatchEvent(mapBrowserEvent)) {
          for (originalEvent = this.getInteractions().getArray().slice(), eventType = originalEvent.length - 1; 0 <= eventType && (rootNode = originalEvent[eventType], rootNode.getMap() !== this || !rootNode.getActive() || !this.getTargetElement() || rootNode.handleEvent(mapBrowserEvent) && !mapBrowserEvent.propagationStopped); eventType--) {
          }
        }
      }
    }
    handlePostRender() {
      const frameState = this.frameState_;
      var tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        let maxTotalLoading = this.maxTilesLoading_;
        var maxNewLoads = maxTotalLoading;
        if (frameState) {
          const hints = frameState.viewHints;
          if (hints[default$$require$_DOT__SLASH_ViewHint_DOT_js.default.ANIMATING] || hints[default$$require$_DOT__SLASH_ViewHint_DOT_js.default.INTERACTING]) {
            maxTotalLoading = (maxNewLoads = 8 < Date.now() - frameState.time) ? 0 : 8, maxNewLoads = maxNewLoads ? 0 : 2;
          }
        }
        tileQueue.getTilesLoading() < maxTotalLoading && (tileQueue.reprioritize(), tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads));
      }
      frameState && this.renderer_ && !frameState.animate && (this.renderComplete_ ? (this.hasListener(default$$require$_DOT__SLASH_render_SLASH_EventType_DOT_js.default.RENDERCOMPLETE) && this.renderer_.dispatchRenderEvent(default$$require$_DOT__SLASH_render_SLASH_EventType_DOT_js.default.RENDERCOMPLETE, frameState), !1 === this.loaded_ && (this.loaded_ = !0, this.dispatchEvent(new default$$require$_DOT__SLASH_MapEvent_DOT_js.default(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.LOADEND, 
      this, frameState)))) : !0 === this.loaded_ && (this.loaded_ = !1, this.dispatchEvent(new default$$require$_DOT__SLASH_MapEvent_DOT_js.default(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.LOADSTART, this, frameState))));
      tileQueue = this.postRenderFunctions_;
      if (frameState) {
        for (let i = 0, ii = tileQueue.length; i < ii; ++i) {
          tileQueue[i](this, frameState);
        }
      }
      tileQueue.length = 0;
    }
    handleSizeChanged_() {
      this.getView() && !this.getView().getAnimating() && this.getView().resolveConstraints(0);
      this.render();
    }
    handleTargetChanged_() {
      if (this.mapBrowserEventHandler_) {
        for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {
          (0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.targetChangeHandlerKeys_[i]);
        }
        this.targetChangeHandlerKeys_ = null;
        this.viewport_.removeEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CONTEXTMENU, this.boundHandleBrowserEvent_);
        this.viewport_.removeEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.WHEEL, this.boundHandleBrowserEvent_);
        this.mapBrowserEventHandler_.dispose();
        this.mapBrowserEventHandler_ = null;
        this.viewport_.remove();
      }
      if (this.targetElement_) {
        this.resizeObserver_.unobserve(this.targetElement_);
        var rootNode = this.targetElement_.getRootNode();
        rootNode instanceof ShadowRoot && this.resizeObserver_.unobserve(rootNode.host);
        this.setSize(void 0);
      }
      rootNode = this.getTarget();
      if (this.targetElement_ = rootNode = "string" === typeof rootNode ? document.getElementById(rootNode) : rootNode) {
        rootNode.appendChild(this.viewport_);
        this.renderer_ || (this.renderer_ = new default$$require$_DOT__SLASH_renderer_SLASH_Composite_DOT_js.default(this));
        this.mapBrowserEventHandler_ = new default$$require$_DOT__SLASH_MapBrowserEventHandler_DOT_js.default(this, this.moveTolerance_);
        for (var key in default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default) {
          this.mapBrowserEventHandler_.addEventListener(default$$require$_DOT__SLASH_MapBrowserEventType_DOT_js.default[key], this.handleMapBrowserEvent.bind(this));
        }
        this.viewport_.addEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CONTEXTMENU, this.boundHandleBrowserEvent_, !1);
        this.viewport_.addEventListener(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.WHEEL, this.boundHandleBrowserEvent_, require$_DOT__SLASH_has_DOT_js.PASSIVE_EVENT_LISTENERS ? {passive:!1} : !1);
        this.keyboardEventTarget_ ? key = this.keyboardEventTarget_ : (key = rootNode.getRootNode(), key = key instanceof ShadowRoot ? key.host : rootNode);
        this.targetChangeHandlerKeys_ = [(0,require$_DOT__SLASH_events_DOT_js.listen)(key, default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.KEYDOWN, this.handleBrowserEvent, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(key, default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.KEYPRESS, this.handleBrowserEvent, this)];
        key = rootNode.getRootNode();
        key instanceof ShadowRoot && this.resizeObserver_.observe(key.host);
        this.resizeObserver_.observe(rootNode);
      } else {
        this.renderer_ && (clearTimeout(this.postRenderTimeoutHandle_), this.postRenderTimeoutHandle_ = void 0, this.postRenderFunctions_.length = 0, this.renderer_.dispose(), this.renderer_ = null), this.animationDelayKey_ && (cancelAnimationFrame(this.animationDelayKey_), this.animationDelayKey_ = void 0);
      }
      this.updateSize();
    }
    handleTileChange_() {
      this.render();
    }
    handleViewPropertyChanged_() {
      this.render();
    }
    handleViewChanged_() {
      this.viewPropertyListenerKey_ && ((0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.viewPropertyListenerKey_), this.viewPropertyListenerKey_ = null);
      this.viewChangeListenerKey_ && ((0,require$_DOT__SLASH_events_DOT_js.unlistenByKey)(this.viewChangeListenerKey_), this.viewChangeListenerKey_ = null);
      const view = this.getView();
      view && (this.updateViewportSize_(this.getSize()), this.viewPropertyListenerKey_ = (0,require$_DOT__SLASH_events_DOT_js.listen)(view, default$$require$_DOT__SLASH_ObjectEventType_DOT_js.default.PROPERTYCHANGE, this.handleViewPropertyChanged_, this), this.viewChangeListenerKey_ = (0,require$_DOT__SLASH_events_DOT_js.listen)(view, default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, this.handleViewPropertyChanged_, this), view.resolveConstraints(0));
      this.render();
    }
    handleLayerGroupChanged_() {
      this.layerGroupPropertyListenerKeys_ && (this.layerGroupPropertyListenerKeys_.forEach(require$_DOT__SLASH_events_DOT_js.unlistenByKey), this.layerGroupPropertyListenerKeys_ = null);
      const layerGroup = this.getLayerGroup();
      layerGroup && (this.handleLayerAdd_(new require$_DOT__SLASH_layer_SLASH_Group_DOT_js.GroupEvent("addlayer", layerGroup)), this.layerGroupPropertyListenerKeys_ = [(0,require$_DOT__SLASH_events_DOT_js.listen)(layerGroup, default$$require$_DOT__SLASH_ObjectEventType_DOT_js.default.PROPERTYCHANGE, this.render, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(layerGroup, default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE, this.render, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(layerGroup, 
      "addlayer", this.handleLayerAdd_, this), (0,require$_DOT__SLASH_events_DOT_js.listen)(layerGroup, "removelayer", this.handleLayerRemove_, this)]);
      this.render();
    }
    isRendered() {
      return !!this.frameState_;
    }
    animationDelay_() {
      this.animationDelayKey_ = void 0;
      this.renderFrame_(Date.now());
    }
    renderSync() {
      this.animationDelayKey_ && cancelAnimationFrame(this.animationDelayKey_);
      this.animationDelay_();
    }
    redrawText() {
      const layerStates = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStates.length; i < ii; ++i) {
        const layer = layerStates[i].layer;
        layer.hasRenderer() && layer.getRenderer().handleFontsChanged();
      }
    }
    render() {
      this.renderer_ && void 0 === this.animationDelayKey_ && (this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_));
    }
    removeControl(control) {
      return this.getControls().remove(control);
    }
    removeInteraction(interaction) {
      return this.getInteractions().remove(interaction);
    }
    removeLayer(layer) {
      return this.getLayerGroup().getLayers().remove(layer);
    }
    handleLayerRemove_(event) {
      removeLayerMapProperty(event.layer);
    }
    removeOverlay(overlay) {
      return this.getOverlays().remove(overlay);
    }
    renderFrame_(time) {
      const size = this.getSize();
      var view = this.getView();
      const previousFrameState = this.frameState_;
      var frameState = null;
      void 0 !== size && (0,require$_DOT__SLASH_size_DOT_js.hasArea)(size) && view && view.isDef() && (frameState = view.getHints(this.frameState_ ? this.frameState_.viewHints : void 0), view = view.getState(), frameState = {animate:!1, coordinateToPixelTransform:this.coordinateToPixelTransform_, declutter:null, extent:(0,require$_DOT__SLASH_extent_DOT_js.getForViewAndSize)(view.center, view.resolution, view.rotation, size), index:this.frameIndex_++, layerIndex:0, layerStatesArray:this.getLayerGroup().getLayerStatesArray(), 
      pixelRatio:this.pixelRatio_, pixelToCoordinateTransform:this.pixelToCoordinateTransform_, postRenderFunctions:[], size, tileQueue:this.tileQueue_, time, usedTiles:{}, viewState:view, viewHints:frameState, wantedTiles:{}, mapId:(0,require$_DOT__SLASH_util_DOT_js.getUid)(this), renderTargets:{}}, view.nextCenter && view.nextResolution && (time = isNaN(view.nextRotation) ? view.rotation : view.nextRotation, frameState.nextExtent = (0,require$_DOT__SLASH_extent_DOT_js.getForViewAndSize)(view.nextCenter, 
      view.nextResolution, time, size)));
      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);
      frameState && (frameState.animate && this.render(), Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions), !previousFrameState || this.previousExtent_ && ((0,require$_DOT__SLASH_extent_DOT_js.isEmpty)(this.previousExtent_) || (0,require$_DOT__SLASH_extent_DOT_js.equals)(frameState.extent, this.previousExtent_)) || (this.dispatchEvent(new default$$require$_DOT__SLASH_MapEvent_DOT_js.default(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.MOVESTART, this, 
      previousFrameState)), this.previousExtent_ = (0,require$_DOT__SLASH_extent_DOT_js.createOrUpdateEmpty)(this.previousExtent_)), !this.previousExtent_ || frameState.viewHints[default$$require$_DOT__SLASH_ViewHint_DOT_js.default.ANIMATING] || frameState.viewHints[default$$require$_DOT__SLASH_ViewHint_DOT_js.default.INTERACTING] || (0,require$_DOT__SLASH_extent_DOT_js.equals)(frameState.extent, this.previousExtent_) || (this.dispatchEvent(new default$$require$_DOT__SLASH_MapEvent_DOT_js.default(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.MOVEEND, 
      this, frameState)), (0,require$_DOT__SLASH_extent_DOT_js.clone)(frameState.extent, this.previousExtent_)));
      this.dispatchEvent(new default$$require$_DOT__SLASH_MapEvent_DOT_js.default(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.POSTRENDER, this, frameState));
      this.renderComplete_ = (this.hasListener(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.LOADSTART) || this.hasListener(default$$require$_DOT__SLASH_MapEventType_DOT_js.default.LOADEND) || this.hasListener(default$$require$_DOT__SLASH_render_SLASH_EventType_DOT_js.default.RENDERCOMPLETE)) && !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady();
      this.postRenderTimeoutHandle_ || (this.postRenderTimeoutHandle_ = setTimeout(() => {
        this.postRenderTimeoutHandle_ = void 0;
        this.handlePostRender();
      }, 0));
    }
    setLayerGroup(layerGroup) {
      const oldLayerGroup = this.getLayerGroup();
      oldLayerGroup && this.handleLayerRemove_(new require$_DOT__SLASH_layer_SLASH_Group_DOT_js.GroupEvent("removelayer", oldLayerGroup));
      this.set(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.LAYERGROUP, layerGroup);
    }
    setSize(size) {
      this.set(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.SIZE, size);
    }
    setTarget(target) {
      this.set(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.TARGET, target);
    }
    setView(view) {
      if (!view || view instanceof default$$require$_DOT__SLASH_View_DOT_js.default) {
        this.set(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.VIEW, view);
      } else {
        this.set(default$$require$_DOT__SLASH_MapProperty_DOT_js.default.VIEW, new default$$require$_DOT__SLASH_View_DOT_js.default());
        var map = this;
        view.then(function(viewOptions) {
          map.setView(new default$$require$_DOT__SLASH_View_DOT_js.default(viewOptions));
        });
      }
    }
    updateSize() {
      var targetElement = this.getTargetElement();
      let size = void 0;
      if (targetElement) {
        var computedStyle = getComputedStyle(targetElement);
        const width = targetElement.offsetWidth - parseFloat(computedStyle.borderLeftWidth) - parseFloat(computedStyle.paddingLeft) - parseFloat(computedStyle.paddingRight) - parseFloat(computedStyle.borderRightWidth);
        computedStyle = targetElement.offsetHeight - parseFloat(computedStyle.borderTopWidth) - parseFloat(computedStyle.paddingTop) - parseFloat(computedStyle.paddingBottom) - parseFloat(computedStyle.borderBottomWidth);
        isNaN(width) || isNaN(computedStyle) || (size = [Math.max(0, width), Math.max(0, computedStyle)], !(0,require$_DOT__SLASH_size_DOT_js.hasArea)(size) && (targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length) && (0,require$_DOT__SLASH_console_DOT_js.warn)("No map visible because the map container's width or height are 0."));
      }
      targetElement = this.getSize();
      !size || targetElement && (0,require$_DOT__SLASH_array_DOT_js.equals)(size, targetElement) || (this.setSize(size), this.updateViewportSize_(size));
    }
    updateViewportSize_(size) {
      const view = this.getView();
      view && view.setViewportSize(size);
    }
  }
  const $$default = Map;
};

//# sourceMappingURL=module$node_modules$ol$Map.js.map
