shadow$provide.module$node_modules$ol$interaction$PinchRotate = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__DOT__SLASH_rotationconstraint_DOT_js = require("module$node_modules$ol$rotationconstraint"), require$_DOT__SLASH_Pointer_DOT_js = require("module$node_modules$ol$interaction$Pointer");
  global = require.esmDefault(require$_DOT__SLASH_Pointer_DOT_js);
  class PinchRotate extends global.default {
    constructor(options) {
      const pointerOptions = options = options ? options : {};
      pointerOptions.stopDown || (pointerOptions.stopDown = require$_DOT__DOT__SLASH_functions_DOT_js.FALSE);
      super(pointerOptions);
      this.anchor_ = null;
      this.lastAngle_ = void 0;
      this.rotating_ = !1;
      this.rotationDelta_ = 0.0;
      this.threshold_ = void 0 !== options.threshold ? options.threshold : 0.3;
      this.duration_ = void 0 !== options.duration ? options.duration : 250;
    }
    handleDragEvent(mapBrowserEvent) {
      var rotationDelta = 0.0, touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];
      touch0 = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
      void 0 !== this.lastAngle_ && (rotationDelta = touch0 - this.lastAngle_, this.rotationDelta_ += rotationDelta, !this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_ && (this.rotating_ = !0));
      this.lastAngle_ = touch0;
      mapBrowserEvent = mapBrowserEvent.map;
      touch0 = mapBrowserEvent.getView();
      touch0.getConstraints().rotation !== require$_DOT__DOT__SLASH_rotationconstraint_DOT_js.disable && (this.anchor_ = mapBrowserEvent.getCoordinateFromPixelInternal(mapBrowserEvent.getEventPixel((0,require$_DOT__SLASH_Pointer_DOT_js.centroid)(this.targetPointers))), this.rotating_ && (mapBrowserEvent.render(), touch0.adjustRotationInternal(rotationDelta, this.anchor_)));
    }
    handleUpEvent(mapBrowserEvent) {
      return 2 > this.targetPointers.length ? (mapBrowserEvent.map.getView().endInteraction(this.duration_), !1) : !0;
    }
    handleDownEvent(mapBrowserEvent) {
      return 2 <= this.targetPointers.length ? (mapBrowserEvent = mapBrowserEvent.map, this.anchor_ = null, this.lastAngle_ = void 0, this.rotating_ = !1, this.rotationDelta_ = 0.0, this.handlingDownUpSequence || mapBrowserEvent.getView().beginInteraction(), !0) : !1;
    }
  }
  const $$default = PinchRotate;
};

//# sourceMappingURL=module$node_modules$ol$interaction$PinchRotate.js.map
