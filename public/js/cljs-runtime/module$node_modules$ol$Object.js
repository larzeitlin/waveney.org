shadow$provide.module$node_modules$ol$Object = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, ObjectEvent:{enumerable:!0, get:function() {
    return ObjectEvent;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$ObjectEventType");
  global = require("module$node_modules$ol$Observable");
  exports = require("module$node_modules$ol$events$Event");
  var require$_DOT__SLASH_obj_DOT_js = require("module$node_modules$ol$obj"), require$_DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util"), default$$require$_DOT__SLASH_ObjectEventType_DOT_js = require.esmDefault(module);
  module = require.esmDefault(exports);
  require = require.esmDefault(global);
  class ObjectEvent extends module.default {
    constructor(type, key, oldValue) {
      super(type);
      this.key = key;
      this.oldValue = oldValue;
    }
  }
  class BaseObject extends require.default {
    constructor(values) {
      super();
      this.on;
      this.once;
      this.un;
      (0,require$_DOT__SLASH_util_DOT_js.getUid)(this);
      this.values_ = null;
      void 0 !== values && this.setProperties(values);
    }
    get(key) {
      let value;
      this.values_ && this.values_.hasOwnProperty(key) && (value = this.values_[key]);
      return value;
    }
    getKeys() {
      return this.values_ && Object.keys(this.values_) || [];
    }
    getProperties() {
      return this.values_ && Object.assign({}, this.values_) || {};
    }
    getPropertiesInternal() {
      return this.values_;
    }
    hasProperties() {
      return !!this.values_;
    }
    notify(key, oldValue) {
      let eventType;
      eventType = `change:${key}`;
      this.hasListener(eventType) && this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      eventType = default$$require$_DOT__SLASH_ObjectEventType_DOT_js.default.PROPERTYCHANGE;
      this.hasListener(eventType) && this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
    }
    addChangeListener(key, listener) {
      this.addEventListener(`change:${key}`, listener);
    }
    removeChangeListener(key, listener) {
      this.removeEventListener(`change:${key}`, listener);
    }
    set(key, value, silent) {
      const values = this.values_ || (this.values_ = {});
      silent ? values[key] = value : (silent = values[key], values[key] = value, silent !== value && this.notify(key, silent));
    }
    setProperties(values, silent) {
      for (const key in values) {
        this.set(key, values[key], silent);
      }
    }
    applyProperties(source) {
      source.values_ && Object.assign(this.values_ || (this.values_ = {}), source.values_);
    }
    unset(key, silent) {
      if (this.values_ && key in this.values_) {
        const oldValue = this.values_[key];
        delete this.values_[key];
        (0,require$_DOT__SLASH_obj_DOT_js.isEmpty)(this.values_) && (this.values_ = null);
        silent || this.notify(key, oldValue);
      }
    }
  }
  const $$default = BaseObject;
};

//# sourceMappingURL=module$node_modules$ol$Object.js.map
