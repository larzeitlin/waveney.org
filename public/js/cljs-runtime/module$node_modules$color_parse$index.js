shadow$provide.module$node_modules$color_parse$index = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$color_name$index");
  var default$$require$color_name = require.esmDefault(global);
  const $$default = function(cstr) {
    var parts = [], alpha = 1;
    if ("number" === typeof cstr || "number" === typeof cstr) {
      return {space:"rgb", values:[cstr >>> 16, (cstr & 65280) >>> 8, cstr & 255], alpha:1};
    }
    cstr = String(cstr).toLowerCase();
    if (default$$require$color_name.default[cstr]) {
      parts = default$$require$color_name.default[cstr].slice();
      var space = "rgb";
    } else if ("transparent" === cstr) {
      alpha = 0, space = "rgb", parts = [0, 0, 0];
    } else if ("#" === cstr[0]) {
      var m = cstr.slice(1);
      cstr = m.length;
      alpha = 1;
      4 >= cstr ? (parts = [parseInt(m[0] + m[0], 16), parseInt(m[1] + m[1], 16), parseInt(m[2] + m[2], 16)], 4 === cstr && (alpha = parseInt(m[3] + m[3], 16) / 255)) : (parts = [parseInt(m[0] + m[1], 16), parseInt(m[2] + m[3], 16), parseInt(m[4] + m[5], 16)], 8 === cstr && (alpha = parseInt(m[6] + m[7], 16) / 255));
      parts[0] || (parts[0] = 0);
      parts[1] || (parts[1] = 0);
      parts[2] || (parts[2] = 0);
      space = "rgb";
    } else {
      (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\s*\(([^\)]*)\)/.exec(cstr)) ? (space = m[1].replace(/a$/, ""), alpha = "cmyk" === space ? 4 : "gray" === space ? 1 : 3, parts = m[2].trim().split(/\s*[,\/]\s*|\s+/), "color" === space && (space = parts.shift()), parts = parts.map(function(x, i) {
        if ("%" === x[x.length - 1]) {
          return x = parseFloat(x) / 100, 3 === i ? x : "rgb" === space ? 255 * x : "h" === space[0] || "l" === space[0] && !i ? 100 * x : "lab" === space ? 125 * x : "lch" === space ? 2 > i ? 150 * x : 360 * x : "o" !== space[0] || i ? "oklab" === space ? 0.4 * x : "oklch" === space ? 2 > i ? 0.4 * x : 360 * x : x : x;
        }
        if ("h" === space[i] || 2 === i && "h" === space[space.length - 1]) {
          if (void 0 !== baseHues[x]) {
            return baseHues[x];
          }
          if (x.endsWith("deg")) {
            return parseFloat(x);
          }
          if (x.endsWith("turn")) {
            return 360 * parseFloat(x);
          }
          if (x.endsWith("grad")) {
            return 360 * parseFloat(x) / 400;
          }
          if (x.endsWith("rad")) {
            return 180 * parseFloat(x) / Math.PI;
          }
        }
        return "none" === x ? 0 : parseFloat(x);
      }), alpha = parts.length > alpha ? parts.pop() : 1) : /[0-9](?:\s|\/|,)/.test(cstr) && (parts = cstr.match(/([0-9]+)/g).map(function(value) {
        return parseFloat(value);
      }), space = cstr.match(/([a-z])/ig)?.join("")?.toLowerCase() || "rgb");
    }
    return {space, values:parts, alpha};
  };
  var baseHues = {red:0, orange:60, yellow:120, green:180, blue:240, purple:300};
};

//# sourceMappingURL=module$node_modules$color_parse$index.js.map
