{
"version":3,
"file":"module$node_modules$ol$expr$expression.js",
"lineCount":413,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,GAA2D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAuDnGC,UAASA,SAAQ,CAACC,IAAD,CAAO;AACtB,UAAMC,QAAQ,EAAd;AACA,SAAK,MAAMC,SAAX,IAAwBC,UAAxB;AACMC,kBAAA,CAAaJ,IAAb,EAAmBE,SAAnB,CAAJ,IACED,KAAMI,CAAAA,IAAN,CAAWC,SAAA,CAAUJ,SAAV,CAAX,CADF;AADF;AAKA,WAAqB,CAArB,KAAID,KAAMM,CAAAA,MAAV,GACS,SADT,GAGmB,CAAnB,GAAIN,KAAMM,CAAAA,MAAV,GACSN,KAAMO,CAAAA,IAAN,CAAW,MAAX,CADT,GAGOP,KAAMQ,CAAAA,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAmBD,CAAAA,IAAnB,CAAwB,IAAxB,CAHP,GAGuC,OAHvC,GAGiDP,KAAA,CAAMA,KAAMM,CAAAA,MAAZ,GAAqB,CAArB,CANjD;AAPsB;AAexBH,UAASA,aAAY,CAACM,KAAD,EAAQC,QAAR,CAAkB;AACrC,YAAQD,KAAR,GAAgBC,QAAhB,MAA8BA,QAA9B;AADqC;AAGvCC,UAASA,aAAY,CAACC,OAAD,EAAUC,SAAV,CAAqB;AACxC,WAAO,CAAC,EAAED,OAAF,GAAYC,SAAZ,CAAR;AADwC;AAG1CC,UAASA,OAAM,CAACf,IAAD,EAAOgB,QAAP,CAAiB;AAC9B,WAAOhB,IAAP,KAAgBgB,QAAhB;AAD8B;AAmBhCC,UAASA,kBAAiB,EAAG;AAC3B,WAAO,CAACC,UAAU,IAAIC,GAAJ,EAAX,EAAsBC,WAAW,IAAID,GAAJ,EAAjC,EAA4CE,UAAU,CAAA,CAAtD,EAA6DC,aAAa,CAAA,CAA1E,EAAiFC,SAAS,CAAA,CAA1F,CAAP;AAD2B;AAG7BC,UAASA,MAAK,CAACC,OAAD,EAAUC,YAAV,EAAwBC,OAAxB,CAAiC;AAC7C,WAAO,MAAOF,QAAd;AACE,WAAK,SAAL;AAEI,YAAWC,YAAX,KAAyBE,UAAzB;AACE,iBAAO,IAAIC,iBAAJ,CAAsBD,UAAtB,EAAkCH,OAAA,GAAU,MAAV,GAAmB,OAArD,CAAP;AADF;AAGA,YAAI,CAACrB,YAAA,CAAasB,YAAb,EAA2BI,WAA3B,CAAL;AACE,gBAAUC,KAAJ,CAAW,+BAA8BhC,QAAA,CAAS2B,YAAT,CAA9B,EAAX,CAAN;AADF;AAGA,eAAO,IAAIG,iBAAJ,CAAsBC,WAAtB,EAAmCL,OAAnC,CAAP;AAEJ,WAAK,QAAL;AAEI,YAAWC,YAAX,KAAyBM,QAAzB;AACE,iBAAO,IAAIH,iBAAJ,CAAsBG,QAAtB,EAAgC,GAAGC,oCAAqCC,CAAAA,MAAxC,EAAgDT,OAAhD,CAAhC,CAAP;AADF;AAGA,YAAWC,YAAX,KAAyBI,WAAzB;AACE,iBAAO,IAAID,iBAAJ,CAAsBC,WAAtB,EAAmC,CAAC,CAACL,OAArC,CAAP;AADF;AAGA,YAAWC,YAAX,KAAyBE,UAAzB;AACE,iBAAO,IAAIC,iBAAJ,CAAsBD,UAAtB,EAAkCH,OAAQU,CAAAA,QAAR,EAAlC,CAAP;AADF;AAGA,YAAI,CAAC/B,YAAA,CAAasB,YAAb,EAA2BU,UAA3B,CAAL;AACE,gBAAUL,KAAJ,CAAW,8BAA6BhC,QAAA,CAAS2B,YAAT,CAA7B,EAAX,CAAN;AADF;AAGA,eAAO,IAAIG,iBAAJ,CAAsBO,UAAtB,EAAkCX,OAAlC,CAAP;AAEJ,WAAK,QAAL;AAEI,YAAWC,YAAX,KAAyBW,SAAzB;AACE,iBAAO,IAAIR,iBAAJ,CAAsBQ,SAAtB,EAAiC,GAAGC,qCAAsCC,CAAAA,UAAzC,EAAqDd,OAArD,CAAjC,CAAP;AADF;AAGA,YAAWC,YAAX,KAAyBI,WAAzB;AACE,iBAAO,IAAID,iBAAJ,CAAsBC,WAAtB,EAAmC,CAAC,CAACL,OAArC,CAAP;AADF;AAGA,YAAI,CAACrB,YAAA,CAAasB,YAAb,EAA2BE,UAA3B,CAAL;AACE,gBAAUG,KAAJ,CAAW,8BAA6BhC,QAAA,CAAS2B,YAAT,CAA7B,EAAX,CAAN;AADF;AAGA,eAAO,IAAIG,iBAAJ,CAAsBD,UAAtB,EAAkCH,OAAlC,CAAP;AAtCN;AA4CA,QAAI,CAACe,KAAMC,CAAAA,OAAN,CAAchB,OAAd,CAAL;AACE,YAAUM,KAAJ,CAAU,kDAAV,CAAN;AADF;AAGA,QAAuB,CAAvB,KAAIN,OAAQlB,CAAAA,MAAZ;AACE,YAAUwB,KAAJ,CAAU,kBAAV,CAAN;AADF;AAGA,QAA0B,QAA1B,KAAI,MAAON,QAAA,CAAQ,CAAR,CAAX,CAAoC;AAsSpC,UAAMiB,WArSuBjB,OAqSZ,CAAQ,CAAR,CAAjB;AACA,YAAMkB,SAASC,OAAA,CAAQF,QAAR,CAAf;AACA,UAAI,CAACC,MAAL;AACE,cAAUZ,KAAJ,CAAW,qBAAoBW,QAApB,EAAX,CAAN;AADF;AAvSE,aA0SKC,MAAA,CA1SsBlB,OA0StB,EA1S+BC,YA0S/B,EA1S6CC,OA0S7C,CA1SL;AADkC;AAGpC,SAAWkB,QAAX,IAAmBpB,OAAnB;AACE,UAAoB,QAApB,KAAI,MAAOoB,SAAX;AACE,cAAUd,KAAJ,CAAU,8BAAV,CAAN;AADF;AADF;AAKA,QAAWL,YAAX,KAAyBM,QAAzB,CAAoC;AAClC,UAAuB,CAAvB,KAAIP,OAAQlB,CAAAA,MAAZ;AACE,cAAUwB,KAAJ,CAAW,mDAAkDN,OAAQlB,CAAAA,MAA1D,EAAX,CAAN;AADF;AAGA,aAAO,IAAIsB,iBAAJ,CAAsBG,QAAtB,EAAgCP,OAAhC,CAAP;AAJkC;AAMpC,QAAWC,YAAX,KAAyBW,SAAzB,CAAqC;AACnC,UAAuB,CAAvB,KAAIZ,OAAQlB,CAAAA,MAAZ;AACE,eAAO,IAAIsB,iBAAJ,CAAsBQ,SAAtB,EAAiC,CAAC,GAAGZ,OAAJ,EAAa,CAAb,CAAjC,CAAP;AADF;AAGA,UAAuB,CAAvB,KAAIA,OAAQlB,CAAAA,MAAZ;AACE,eAAO,IAAIsB,iBAAJ,CAAsBQ,SAAtB,EAAiCZ,OAAjC,CAAP;AADF;AAGA,YAAUM,KAAJ,CAAW,uDAAsDN,OAAQlB,CAAAA,MAA9D,EAAX,CAAN;AAPmC;AASrC,QAAI,CAACH,YAAA,CAAasB,YAAb,EAA2BoB,eAA3B,CAAL;AACE,YAAUf,KAAJ,CAAW,yCAAwChC,QAAA,CAAS2B,YAAT,CAAxC,EAAX,CAAN;AADF;AAGA,WAAO,IAAIG,iBAAJ,CAAsBiB,eAAtB,EAAuCrB,OAAvC,CAAP;AA7E6C;AAyF/CsB,UAASA,YAAW,CAACtB,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC3CsB,cAAAA,GAAYxB,OAAQlB,CAAAA,MAApB0C,GAA6B,CAA7BA;AACN,UAAMC,OAAWV,KAAJ,CAAUS,UAAV,CAAb;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,UAApB,EAA+B,EAAEE,CAAjC,CAAoC;AAClC,YAAMC,MAAM3B,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAZ;AACA,aAAO,MAAOC,IAAd;AACE,aAAK,QAAL;AAEIF,cAAA,CAAKC,CAAL,CAAA,GAAU,IAAItB,iBAAJ,CAAsBO,UAAtB,EAAkCgB,GAAlC,CAAV;AACA;AAEJ,aAAK,QAAL;AAEIF,cAAA,CAAKC,CAAL,CAAA,GAAU,IAAItB,iBAAJ,CAAsBD,UAAtB,EAAkCwB,GAAlC,CAAV;AACA;AAEJ;AAEI,gBAAUrB,KAAJ,CAAW,yEAAwEqB,GAAxE,EAAX,CAAN;AAbN;AAgBU,OAAV,KAAID,CAAJ,IACExB,OAAQP,CAAAA,UAAWiC,CAAAA,GAAnB,CAAuBC,MAAA,CAAOF,GAAP,CAAvB,CADF;AAlBkC;AAsBpC,WAAOF,IAAP;AAzBiD;AAyCnDK,UAASA,aAAY,CAAC9B,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAClDA,WAAQJ,CAAAA,QAAR,GAAmB,CAAA,CAAnB;AADkD;AAGpDiC,UAASA,WAAU,CAAC/B,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC1C8B,cAAAA,GAAYhC,OAAA,CAAQ,CAAR,CAAZgC;AACN,QAAuB,CAAvB,KAAIhC,OAAQlB,CAAAA,MAAZ;AACE,YAAUwB,KAAJ,CAAW,6BAA4B0B,UAA5B,YAAX,CAAN;AADF;AAGA,WAAO,EAAP;AALgD;AAOlDC,UAASA,aAAY,CAACC,OAAD,EAAUC,OAAV,CAAmB;AACtC,WAAO,QAAQ,CAACnC,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACtC8B,gBAAAA,GAAYhC,OAAA,CAAQ,CAAR,CAAZgC;AACAI,aAAAA,GAAWpC,OAAQlB,CAAAA,MAAnBsD,GAA4B,CAA5BA;AACN,UAAIF,OAAJ,KAAgBC,OAAhB;AACE,YAAIC,OAAJ,KAAiBF,OAAjB;AAEE,gBAAU5B,KAAJ,CAAW,YAAW4B,OAAX,YADU,CAAZG,KAAAH,OAAAG,GAAgB,EAAhBA,GAAqB,GACnB,QAA4CL,UAA5C,SAA8DI,OAA9D,EAAX,CAAN;AAFF;AADF,YAKO,KAAIA,OAAJ,GAAeF,OAAf,IAA0BE,OAA1B,GAAqCD,OAArC;AAEL,cAAU7B,KAAJ,CAAW,YADSgC,QAAZC,KAAAJ,OAAAI,GAAwB,GAAEL,OAAF,UAAxBK,GAA+C,GAAEL,OAAF,OAAgBC,OAAhB,EAC5C,kBAAkCH,UAAlC,SAAoDI,OAApD,EAAX,CAAN;AAFK;AARqC,KAA9C;AADsC;AAexCI,UAASA,qBAAoB,CAACxC,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC1D,UAAMkC,WAAWpC,OAAQlB,CAAAA,MAAnBsD,GAA4B,CAAlC,EACMX,OAAWV,KAAJ,CAAUqB,QAAV,CADb;AAEA,SAAK,IAAIV,IAAI,CAAb,EAAgBA,CAAhB,GAAoBU,QAApB,EAA8B,EAAEV,CAAhC,CAAmC;AACjC,YAAMe,aAAa1C,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBH,UAAtB,EAAkCrB,OAAlC,CAAnB;AACAuB,UAAA,CAAKC,CAAL,CAAA,GAAUe,UAAV;AAFiC;AAInC,WAAOhB,IAAP;AAP0D;AAS5DiB,UAASA,eAAc,CAACC,OAAD,CAAU;AAC/B,WAAO,QAAQ,CAAC3C,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACtCkC,gBAAAA,GAAWpC,OAAQlB,CAAAA,MAAnBsD,GAA4B,CAA5BA;AACN,YAAMX,OAAWV,KAAJ,CAAUqB,UAAV,CAAb;AACA,WAAK,IAAIV,IAAI,CAAb,EAAgBA,CAAhB,GAAoBU,UAApB,EAA8B,EAAEV,CAAhC,CAAmC;AACjC,cAAMe,aAAa1C,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBiB,OAAtB,EAA+BzC,OAA/B,CAAnB;AACAuB,YAAA,CAAKC,CAAL,CAAA,GAAUe,UAAV;AAFiC;AAInC,aAAOhB,IAAP;AAP4C,KAA9C;AAD+B;AAkBjCmB,UAASA,YAAW,CAAC5C,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC3C8B,cAAAA,GAAYhC,OAAA,CAAQ,CAAR,CAAZgC;AACAI,WAAAA,GAAWpC,OAAQlB,CAAAA,MAAnBsD,GAA4B,CAA5BA;AACN,QAAqB,CAArB,KAAIA,OAAJ,GAAe,CAAf;AACE,YAAU9B,KAAJ,CAAW,sDAAqD0B,UAArD,SAAuEI,OAAvE,UAAX,CAAN;AADF;AAHiD;AAkJnDS,UAASA,2BAA0B,CAAC,GAAGC,UAAJ,CAAgB;AACjD,WAAO,QAAQ,CAAC9C,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC5C,YAAMe,WAAWjB,OAAA,CAAQ,CAAR,CAAjB;AACA,UAAIyB,IAAJ;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBoB,UAAWhE,CAAAA,MAA/B,EAAuC4C,CAAA,EAAvC,CAA4C;AAC1C,cAAMqB,SAASD,UAAA,CAAWpB,CAAX,CAAA,CAAc1B,OAAd,EAAuBuB,UAAvB,EAAmCrB,OAAnC,CAAf;AACA,YAAIwB,CAAJ,IAASoB,UAAWhE,CAAAA,MAApB,GAA6B,CAA7B,CAAgC;AAC9B,cAAI,CAACiE,MAAL;AACE,kBAAUzC,KAAJ,CAAU,4DAAV,CAAN;AADF;AAGAmB,cAAA,GAAOsB,MAAP;AAJ8B;AAFU;AAS5C,aAAO,IAAIC,cAAJ,CAAmBzB,UAAnB,EAA+BN,QAA/B,EAAyC,GAAGQ,IAA5C,CAAP;AAZ4C,KAA9C;AADiD;AAwBnDwB,UAASA,oBAAmB,CAACC,QAAD,CAAW;AACrC,QAAI,CAACA,QAAL;AACE,aAAO,EAAP;AADF;AAGA,UAAM3E,OAAO2E,QAASC,CAAAA,OAAT,EAAb;AACA,WAAO5E,IAAP;AACE,WAAK,OAAL;AACA,WAAK,YAAL;AACA,WAAK,SAAL;AACE,eAAOA,IAAP;AACF,WAAK,YAAL;AACA,WAAK,iBAAL;AACA,WAAK,cAAL;AACE,eAAOA,IAAK6E,CAAAA,SAAL,CAAe,CAAf,CAAP;AACF,WAAK,QAAL;AACE,eAAO,SAAP;AACF,WAAK,oBAAL;AACE,eAAOH,mBAAA,CAAoBC,QAASG,CAAAA,aAAT,EAAA,CAAyB,CAAzB,CAApB,CAAP;AACF;AACE,eAAO,EAAP;AAdJ;AALqC;AAjcvCC,QAAOC,CAAAA,gBAAP,CAAwBlF,OAAxB,EAAiC,CAACmF,WAAW,CAACC,WAAW,CAAA,CAAZ,EAAkBC,MAAM,CAAA,CAAxB,CAAZ,EAA2CC,QAAQ,CAACF,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACnH,WAAOD,OAAP;AADmH,GAAjC,CAAnD,EAE7BtD,YAAY,CAACoD,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC/C,WAAOvD,WAAP;AAD+C,GAAjC,CAFiB,EAI7B2C,eAAe,CAACS,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAClD,WAAOZ,cAAP;AADkD,GAAjC,CAJc,EAM7BpC,UAAU,CAAC6C,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC7C,WAAOhD,SAAP;AAD6C,GAAjC,CANmB,EAQ7BR,kBAAkB,CAACqD,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACrD,WAAOxD,iBAAP;AADqD,GAAjC,CARW,EAU7ByD,SAAS,CAACJ,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC5C,WA8BeC,CA9Bf;AAD4C,GAAjC,CAVoB,EAY7BxC,gBAAgB,CAACoC,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACnD,WAAOvC,eAAP;AADmD,GAAjC,CAZa,EAc7BV,WAAW,CAAC8C,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC9C,WAAOjD,UAAP;AAD8C,GAAjC,CAdkB,EAgB7BmD,IAAI,CAACL,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACvC,WAAOE,GAAP;AADuC,GAAjC,CAhByB,EAkB7BvD,SAAS,CAACkD,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC5C,WAAOrD,QAAP;AAD4C,GAAjC,CAlBoB,EAoB7BJ,WAAW,CAACsD,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC9C,WAAOzD,UAAP;AAD8C,GAAjC,CApBkB,EAsB7B8C,oBAAoB,CAACQ,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACvD,WAAOX,mBAAP;AADuD,GAAjC,CAtBS,EAwB7BtE,aAAa,CAAC8E,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAChD,WAAOjF,YAAP;AADgD,GAAjC,CAxBgB,EA0B7BW,OAAO,CAACmE,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC1C,WAAOtE,MAAP;AAD0C,GAAjC,CA1BsB,EA4B7BE,kBAAkB,CAACiE,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACrD,WAAOpE,iBAAP;AADqD,GAAjC,CA5BW,EA8B7BL,aAAa,CAACsE,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAChD,WAAOzE,YAAP;AADgD,GAAjC,CA9BgB,EAgC7BY,MAAM,CAAC0D,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AACzC,WAAO7D,KAAP;AADyC,GAAjC,CAhCuB,EAkC7BzB,SAAS,CAACmF,WAAW,CAAA,CAAZ,EAAkBG,IAAIA,QAAQ,EAAG;AAC5C,WAAOtF,QAAP;AAD4C,GAAjC,CAlCoB,CAAjC,CAAA;AAqCIyF,QAAAA,GAAwC5F,OAAA,CAAQ,8BAAR,CAAxC4F;AACJ,MAAIlD,wCAAwC1C,OAAA,CAAQ,8BAAR,CAA5C,EACIqC,uCAAuCrC,OAAA,CAAQ,6BAAR,CAD3C;AAEI6F,SAAAA,GAAW,CAAXA;AAEJ,QAAM3D,cAAc,CAAdA,IAAmB2D,OAAA,EAAzB,EACMrD,aAAa,CAAbA,IAAkBqD,OAAA,EADxB,EAEM7D,aAAa,CAAbA,IAAkB6D,OAAA,EAFxB,EAGMpD,YAAY,CAAZA,IAAiBoD,OAAA,EAHvB,EAIM3C,kBAAkB,CAAlBA,IAAuB2C,OAAA,EAJ7B,EAKMzD,WAAW,CAAXA,IAAgByD,OAAA,EALtB,EAMML,UAAUM,IAAKC,CAAAA,GAAL,CAAS,CAAT,EAAYF,OAAZ,CAAVL,GAAkC,CANxC,EAOM9E,YAAY,CAAC,CAACwB,WAAD,EAAc,SAAf,EAA0B,CAACM,UAAD,EAAa,QAAvC,EAAiD,CAACR,UAAD,EAAa,QAA9D,EAAwE,CAACS,SAAD,EAAY,OAApF,EAA6F,CAACS,eAAD,EAAkB,UAA/G,EAA2H,CAACd,QAAD,EAAW,MAAtI,CAPlB,EAQM7B,aAAa4E,MAAOa,CAAAA,IAAP,CAAYtF,SAAZ,CAAuBuF,CAAAA,GAAvB,CAA2BC,MAA3B,CAAmCC,CAAAA,IAAnC,CAAwCP,MAAsCQ,CAAAA,SAA9E,CARnB;AAoCA,OAAMnE,kBAAN;AACEoE,eAAW,CAACjG,IAAD,EAAOmF,KAAP,CAAc;AACvB,UAAI,EAAYnF,IAAZ,IA5BSM,SA4BT,CAAJ;AACE,cAAUyB,KAAJ,CAAW,sDAAqDhC,QAAA,CAASC,IAAT,CAArD,EAAX,CAAN;AADF;AAGA,UAAKA,CAAAA,IAAL,GAAYA,IAAZ;AACA,UAAKmF,CAAAA,KAAL,GAAaA,KAAb;AALuB;AAD3B;AASA,OAAMV,eAAN;AACEwB,eAAW,CAACjG,IAAD,EAAO0C,QAAP,EAAiB,GAAGQ,IAApB,CAA0B;AACnC,UAAKlD,CAAAA,IAAL,GAAYA,IAAZ;AACA,UAAK0C,CAAAA,QAAL,GAAgBA,QAAhB;AACA,UAAKQ,CAAAA,IAAL,GAAYA,IAAZ;AAHmC;AADvC;AAyFA,QAAMqC,MAAM,CAACW,IAAI,KAAL,EAAYC,IAAI,KAAhB,EAAuBC,OAAO,QAA9B,EAAwCC,aAAa,eAArD,EAAsEC,WAAW,aAAjF,EAAgGC,IAAI,KAApG,EAA2GC,IAAI,KAA/G,EAAsHC,IAAI,GAA1H,EAA+HC,WAAW,YAA1I,EAAwJC,KAAK,MAA7J,EAAqKC,KAAK,MAA1K,EAAkLC,MAAM,UAAxL,EAAoMC,SAAS,OAA7M,EAAsNC,YAAY,MAAlO,EAA0OC,qBAAqB,UAA/P,EAA2QC,SAAS,MAApR,EAA4RC,kBAAkB,UAA9S,EAA0TC,SAAS,GAAnU,EAAwUC,OAAO,GAA/U,EAAoVC,IAAI,GAAxV,EAA6VC,SAAS,GAAtW,EAA2WC,MAAM,OAAjX,EAA0XC,IAAI,GAA9X,EAAmYC,IAAI,GAAvY,EAA4YC,IAAI,KAAhZ,EAAuZC,MAAM,OAA7Z,EAAsaC,KAAK,MAA3a,EAAmbC,MAAM,OAAzb,EAAkcC,IAAI,KAAtc,EAA6cC,IAAI,KAAjd,EAAwdC,KAAK,MAA7d,EAAqeC,KAAK,MAA1e;AACZC,QAAM,OADM,EACGC,QAAQ,SADX,EACsBC,YAAY,aADlC,EACiDC,SAAS,UAD1D,EACsEC,KAAK,MAD3E,EACmFC,GAAG,IADtF,EAC4FzC,OAAO,QADnG,EAC6GxC,OAAO,QADpH,EAC8Hd,MAAM,OADpI,EAC6IgG,MAAM,OADnJ,EAC4JC,GAAG,IAD/J,EACqKC,KAAK,MAD1K,EACkLC,QAAQ,SAD1L,EACqMC,SAAS,WAD9M,EAC2NC,IAAI,KAD/N,CAAZ,EAEMjG,UAAU,CAAC,CAAC2C,GAAIW,CAAAA,GAAL,EAAU5B,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDhB,WAAtD,CAAX,EAA+E,CAACwC,GAAIY,CAAAA,GAAL,EAAU7B,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAmCzGoF,QAAoB,CAACrH,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC3CoH,WAAAA,GAAOtH,OAAA,CAAQ,CAAR,CAAPsH;AACN,QAAoB,QAApB,KAAI,MAAOA,QAAX;AACE,YAAUhH,KAAJ,CAAU,8CAAV,CAAN;AADF;AAGAJ,WAAQT,CAAAA,SAAUmC,CAAAA,GAAlB,CAAsB0F,OAAtB,CAAA;AACA,WAAO,CAAC,IAAIlH,iBAAJ,CAAsBD,UAAtB,EAAkCmH,OAAlC,CAAD,CAAP;AANiD,GAnCsD,CAAzF,EAAsJ,CAACxD,GAAIsD,CAAAA,GAAL,EAAUvE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDhB,WAAtD,CAAhK,EAAoO,CAACwC,GAAIkD,CAAAA,EAAL,EAASnE,0BAAA,CA2C7P0E,QAAsB,CAACvH,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACnDA,WAAQN,CAAAA,SAAR,GAAoB,CAAA,CAApB;AADmD,GA3CwM,EAA0CmC,UAA1C,CAA7O,EAAoS,CAAC+B,GAAIa,CAAAA,MAAL,EAAa9B,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAevC,UAAf,CAAtD,CAAjT,EAAqY,CAAC2D,GAAIc,CAAAA,YAAL,EAAmB/B,0BAAA,CA8Cxa2E,QAAyB,CAACxH,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACtDA,WAAQL,CAAAA,YAAR,GAAuB,CAAA,CAAvB;AADsD,GA9CgX,EAA6CkC,UAA7C,CAAxZ,EAAkd,CAAC+B,GAAIe,CAAAA,UAAL,EAAiBhC,0BAAA,CAA2Bd,UAA3B,CAAne,EAChB,CAAC+B,GAAImB,CAAAA,UAAL,EAAiBpC,0BAAA,CAA2Bf,YAA3B,EAAyCC,UAAzC,CADD,EACuD,CAAC+B,GAAIoB,CAAAA,IAAL,EAAWrC,0BAAA,CAA2Bf,YAA3B,EAAyCC,UAAzC,CADlE,EACwH,CAAC+B,GAAIqB,CAAAA,IAAL,EAAWtC,0BAAA,CAA2Bf,YAA3B,EAAyCC,UAAzC,CADnI,EACyL,CAAC+B,GAAIgB,CAAAA,GAAL,EAAUjC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAerC,WAAf,CAAtD,CADnM,EACwR,CAACyD,GAAIiB,CAAAA,GAAL,EAAUlC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAerC,WAAf,CAAtD,CADlS,EACuX,CAACyD,GAAIkB,CAAAA,GAAL,EAAUnC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb;AAAgB,GAAhB,CAA3B,EAA+CS,cAAA,CAAerC,WAAf,CAA/C,CADjY,EAC+c,CAACyD,GAAIsB,CAAAA,KAAL,EAAYvC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EACtgB,CADsgB,CAA3B,EACveS,cAAA,CAAeiB,OAAf,CADue,CAD3d,EAEe,CAACG,GAAIuB,CAAAA,QAAL,EAAexC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAeiB,OAAf,CAA/C,CAF9B,EAEwG,CAACG,GAAIwB,CAAAA,WAAL,EAAkBzC,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAF1H,EAEuM,CAACmD,GAAIyB,CAAAA,oBAAL,EAA2B1C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAFlO,EAE+S,CAACmD,GAAI0B,CAAAA,QAAL,EAAe3C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAF9T,EAE2Y,CAACmD,GAAI2B,CAAAA,iBAAL,EAAwB5C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb;AAAgB,GAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAFna,EAGb,CAACmD,GAAI4B,CAAAA,QAAL,EAAe7C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDE,oBAAtD,CAHF,EAGgF,CAACsB,GAAI8C,CAAAA,QAAL,EAAe/D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDE,oBAAtD,CAH/F,EAG6K,CAACsB,GAAI6B,CAAAA,MAAL,EAAa9C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAH1L,EAGuQ,CAACmD,GAAI8B,CAAAA,GAAL,EAAU/C,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAe/B,UAAf,CAAtD,CAHjR,EAGqW,CAACmD,GAAI+B,CAAAA,QAAL,EAAehD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAHpX,EAGic,CAACmD,GAAIgC,CAAAA,KAAL,EAAYjD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb;AACxf,GADwf,CAA3B,EACzdS,cAAA,CAAe/B,UAAf,CADyd,CAH7c,EAIkB,CAACmD,GAAIiC,CAAAA,GAAL,EAAUlD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAJ5B,EAIyG,CAACmD,GAAIkC,CAAAA,GAAL,EAAUnD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAJnH,EAIgM,CAACmD,GAAImC,CAAAA,GAAL,EAAUpD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAJ1M,EAIuR,CAACmD,GAAIoC,CAAAA,KAAL,EAAYrD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAJnS,EAIgX,CAACmD,GAAIqC,CAAAA,IAAL,EAAWtD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAJ3X,EAIwc,CAACmD,GAAIsC,CAAAA,KAAL,EAAYvD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb;AAC/f,GAD+f,CAA3B,EACheS,cAAA,CAAe/B,UAAf,CADge,CAJpd,EAKkB,CAACmD,GAAIuC,CAAAA,GAAL,EAAUxD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAL5B,EAKyG,CAACmD,GAAIwC,CAAAA,GAAL,EAAUzD,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CALnH,EAKgM,CAACmD,GAAIyC,CAAAA,IAAL,EAAW1D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAL3M,EAKwR,CAACmD,GAAI0C,CAAAA,IAAL,EAAW3D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CALnS,EAKgX,CAACmD,GAAI2C,CAAAA,KAAL,EAAY5D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDM,WAAtD,EAuG5Y6E,QAAsB,CAACzH,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACnD,UAAMsB,YAAYxB,OAAQlB,CAAAA,MAApB0C,GAA6B,CAAnC,EAEMkG,QAAQ3H,KAAA,CAAMC,OAAA,CAAQ,CAAR,CAAN,EADIG,UACJ,GADiBQ,UACjB,GAD8BN,WAC9B,EAA6BH,OAA7B,CAFd;AAGMyH,cAAAA,GAAW5H,KAAA,CAAMC,OAAA,CAAQA,OAAQlB,CAAAA,MAAhB,GAAyB,CAAzB,CAAN,EAAmCyC,UAAnC,EAA+CrB,OAA/C,CAAXyH;AACN,UAAMlG,OAAWV,KAAJ,CAAUS,SAAV,GAAsB,CAAtB,CAAb;AACA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,CAAhB,GAAoBF,SAApB,GAAgC,CAAhC,EAAmCE,CAAnC,IAAwC,CAAxC,CAA2C;AACzC,SAAI;AACF,cAAMkG,QAAQ7H,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBgG,KAAMnJ,CAAAA,IAA5B,EAAkC2B,OAAlC,CAAd;AACAuB,YAAA,CAAKC,CAAL,CAAA,GAAUkG,KAAV;AAFE,OAGF,QAAOC,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,GAA+B,CAA/B,yBAAyDmG,GAAIC,CAAAA,OAA7D,EAAX,CAAN;AADY;AAGd,SAAI;AACF,cAAMC,SAAShI,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBiG,UAASpJ,CAAAA,IAA/B,EAAqC2B,OAArC,CAAf;AACAuB,YAAA,CAAKC,CAAL,GAAS,CAAT,CAAA,GAAcqG,MAAd;AAFE,OAGF,QAAOF,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,GAA+B,CAA/B,yBAAyDmG,GAAIC,CAAAA,OAA7D,EAAX,CAAN;AADY;AAV2B;AAc3C,WAAO,CAACJ,KAAD,EAAQ,GAAGjG,IAAX,EAAiBkG,UAAjB,CAAP;AApBmD,GAvGuV,CAL5X,EAKgd,CAAC7D,GAAI4C,CAAAA,OAAL,EAAc7D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EACzgB,CADygB,CAA3B,EAC1eS,cAAA,CAAe/B,UAAf,CAD0e,CAL9d,EAMkB,CAACmD,GAAI6C,CAAAA,WAAL,EAAkB9D,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDM,WAAtD,EA4HpDoF,QAA4B,CAAChI,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACzD,QAAM+H,oBAAoBjI,OAAA,CAAQ,CAAR,CAA1B;AAEA,WAAOiI,iBAAA,CAAkB,CAAlB,CAAP;AACE,WAAK,QAAL;AACEC,yBAAA,GAAO,CAAP;AACA;AACF,WAAK,aAAL;AACQC,yBAAAA,GAAIF,iBAAA,CAAkB,CAAlB,CAAJE;AACN,YAAiB,QAAjB,KAAI,MAAOA,kBAAX,IAAkC,CAAlC,IAA6BA,iBAA7B;AACE,gBAAU7H,KAAJ,CAAW,sDAAX,GAAoE,SAAQ8H,IAAKC,CAAAA,SAAL,CAAeF,iBAAf,CAAR,UAApE,CAAN;AADF;AAIA;AACF;AACE,cAAU7H,KAAJ,CAAW,+BAA8B8H,IAAKC,CAAAA,SAAL,CAAeJ,iBAAf,CAA9B,EAAX,CAAN;AAZJ;AAcMK,qBAAAA,GAAgB,IAAIlI,iBAAJ,CAAsBO,UAAtB,EAAkCuH,iBAAlC,CAAhBI;AACN,QAAIZ,KAAJ;AACA,OAAI;AACFA,WAAA,GAAQ3H,KAAA,CAAMC,OAAA,CAAQ,CAAR,CAAN,EAAkBW,UAAlB,EAA8BT,OAA9B,CAAR;AADE,KAEF,QAAO2H,GAAP,CAAY;AACZ,YAAUvH,KAAJ,CAAW,yDAAwDuH,GAAIC,CAAAA,OAA5D,EAAX,CAAN;AADY;AAGd,UAAMrG,OAAWV,KAAJ,CAAUf,OAAQlB,CAAAA,MAAlB,GAA2B,CAA3B,CAAb;AACA,SAAK,IAAI4C,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,IAAK3C,CAAAA,MAAzB,EAAiC4C,CAAjC,IAAsC,CAAtC,CAAyC;AACvC,SAAI;AACF,cAAM6G,OAAOxI,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBf,UAAtB,EAAkCT,OAAlC,CAAb;AACAuB,YAAA,CAAKC,CAAL,CAAA,GAAU6G,IAAV;AAFE,OAGF,QAAOV,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,GAA+B,CAA/B,gCAAgEmG,GAAIC,CAAAA,OAApE,EAAX,CAAN;AADY;AAGd,SAAI;AACF,cAAMC,SAAShI,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBH,UAAtB,EAAkCrB,OAAlC,CAAf;AACAuB,YAAA,CAAKC,CAAL,GAAS,CAAT,CAAA,GAAcqG,MAAd;AAFE,OAGF,QAAOF,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,GAA+B,CAA/B,gCAAgEmG,GAAIC,CAAAA,OAApE,EAAX,CAAN;AADY;AAVyB;AAczC,WAAO,CAACQ,iBAAD,EAAgBZ,KAAhB,EAAuB,GAAGjG,IAA1B,CAAP;AAvCyD,GA5HP,CANpC,EAM8H,CAACqC,GAAI+C,CAAAA,IAAL,EAAWhE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAwFzJkG,QAAmB,CAACxI,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC1C8B,cAAAA,GAAYhC,OAAA,CAAQ,CAAR,CAAZgC;AACAI,WAAAA,GAAWpC,OAAQlB,CAAAA,MAAnBsD,GAA4B,CAA5BA;AACN,QAAqB,CAArB,KAAIA,OAAJ,GAAe,CAAf;AACE,YAAU9B,KAAJ,CAAW,2CAA0C0B,UAA1C,SAA4DI,OAA5D,UAAX,CAAN;AADF;AAHgD,GAxFuG,EAqKzJqG,QAAqB,CAACzI,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC5CyH,cAAAA,GAAW5H,KAAA,CAAMC,OAAA,CAAQA,OAAQlB,CAAAA,MAAhB,GAAyB,CAAzB,CAAN,EAAmCyC,UAAnC,EAA+CrB,OAA/C,CAAXyH;AACN,UAAMlG,OAAWV,KAAJ,CAAUf,OAAQlB,CAAAA,MAAlB,GAA2B,CAA3B,CAAb;AACA,SAAK,IAAI4C,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,IAAK3C,CAAAA,MAAzB,GAAkC,CAAlC,EAAqC4C,CAArC,IAA0C,CAA1C,CAA6C;AAC3C,SAAI;AACF,cAAMgH,YAAY3I,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBrB,WAAtB,EAAmCH,OAAnC,CAAlB;AACAuB,YAAA,CAAKC,CAAL,CAAA,GAAUgH,SAAV;AAFE,OAGF,QAAOb,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,wBAAoDmG,GAAIC,CAAAA,OAAxD,EAAX,CAAN;AADY;AAGd,SAAI;AACF,cAAMC,SAAShI,KAAA,CAAMC,OAAA,CAAQ0B,CAAR,GAAY,CAAZ,CAAN,EAAsBiG,UAASpJ,CAAAA,IAA/B,EAAqC2B,OAArC,CAAf;AACAuB,YAAA,CAAKC,CAAL,GAAS,CAAT,CAAA,GAAcqG,MAAd;AAFE,OAGF,QAAOF,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,4BAA2BoB,CAA3B,GAA+B,CAA/B,wBAAwDmG,GAAIC,CAAAA,OAA5D,EAAX,CAAN;AADY;AAV6B;AAc7CrG,QAAA,CAAKA,IAAK3C,CAAAA,MAAV,GAAmB,CAAnB,CAAA,GAAwB6I,UAAxB;AACA,WAAOlG,IAAP;AAlBkD,GArKqG,CANzI,EAM2N,CAACqC,GAAIgD,CAAAA,EAAL,EAASjE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAyLpP0G,QAAmB,CAAC3I,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AAC5C0I,cAAAA,GAAW5I,OAAA,CAAQ,CAAR,CAAX4I;AACJ,QAAI,CAAC7H,KAAMC,CAAAA,OAAN,CAAc4H,UAAd,CAAL;AACE,YAAUtI,KAAJ,CAAW,4DAAX,CAAN;AADF;AAGA,QAAIuI,UAAJ;AACA,QAA2B,QAA3B,KAAI,MAAOD,WAAA,CAAS,CAAT,CAAX,CAAqC;AACnC,UAAoB,SAApB,KAAIA,UAAA,CAAS,CAAT,CAAJ;AACE,cAAUtI,KAAJ,CAAW,kHAAX,CAAN;AADF;AAGA,UAAI,CAACS,KAAMC,CAAAA,OAAN,CAAc4H,UAAA,CAAS,CAAT,CAAd,CAAL;AACE,cAAUtI,KAAJ,CAAW,oFAAX,CAAN;AADF;AAGAsI,gBAAA,GAAWA,UAAA,CAAS,CAAT,CAAX;AACAC,gBAAA,GAAa1I,UAAb;AARmC,KAArC;AAUE0I,gBAAA,GAAalI,UAAb;AAVF;AAYA,UAAMc,OAAWV,KAAJ,CAAU6H,UAAS9J,CAAAA,MAAnB,CAAb;AACA,SAAK,IAAI4C,IAAI,CAAb,EAAgBA,CAAhB,GAAoBD,IAAK3C,CAAAA,MAAzB,EAAiC4C,CAAA,EAAjC;AACE,SAAI;AACF,cAAMoH,MAAM/I,KAAA,CAAM6I,UAAA,CAASlH,CAAT,CAAN,EAAmBmH,UAAnB,EAA+B3I,OAA/B,CAAZ;AACAuB,YAAA,CAAKC,CAAL,CAAA,GAAUoH,GAAV;AAFE,OAGF,QAAOjB,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,iCAAgCoB,CAAhC,yBAA0DmG,GAAIC,CAAAA,OAA9D,EAAX,CAAN;AADY;AAJhB;AASA,WAAO,CADQ/H,KAAAgJ,CAAM/I,OAAA,CAAQ,CAAR,CAAN+I,EAAkBF,UAAlBE,EAA8B7I,OAA9B6I,CACR,EAAS,GAAGtH,IAAZ,CAAP;AA5BgD,GAzLkM,CANpO,EAMgS,CAACqC,GAAIO,CAAAA,MAAL,EAAaxB,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAeiB,OAAf,CAAtD,CAN7S,EAM8X,CAACG,GAAIjC,CAAAA,MAAL,EAAagB,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgBK,QAAhB,CAA3B,EAAsDI,cAAA,CAAeiB,OAAf,CAAtD,CAN3Y,EAM4d,CAACG,GAAI/C,CAAAA,KAAL,EAAY8B,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EACnhBK,QADmhB,CAA3B,EAC7eI,cAAA,CAAe/B,UAAf,CAD6e,CANxe,EAOyB,CAACmD,GAAIiD,CAAAA,KAAL,EAAYlE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAPrC,EAOkH,CAACmD,GAAImD,CAAAA,IAAL,EAAWpE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAe/B,UAAf,CAA/C,CAP7H,EAO0M,CAACmD,GAAIoD,CAAAA,OAAL,EAAcrE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb;AAAgB,GAAhB,CAA3B,EAsNxO+G,QAAwB,CAAChJ,OAAD,EAAUuB,UAAV,EAAsBrB,OAAtB,CAA+B;AACrD,QAAI+I,KAAJ;AACA,OAAI;AACFA,WAAA,GAAQlJ,KAAA,CAAMC,OAAA,CAAQ,CAAR,CAAN,EAAkBW,UAAlB,EAA8BT,OAA9B,CAAR;AADE,KAEF,QAAO2H,GAAP,CAAY;AACZ,YAAUvH,KAAJ,CAAW,yDAAwDuH,GAAIC,CAAAA,OAA5D,EAAX,CAAN;AADY;AAGRoB,WAAAA,GAASlJ,OAAA,CAAQ,CAAR,CAATkJ;AACN,QAAI,CAACnI,KAAMC,CAAAA,OAAN,CAAckI,OAAd,CAAL;AACE,YAAU5I,KAAJ,CAAU,iDAAV,CAAN;AADF;AAGM6I,cAAAA,GAAmBpI,KAAJ,CAAUmI,OAAOpK,CAAAA,MAAjB,CAAfqK;AACN,SAAK,IAAIzH,IAAI,CAAb,EAAgBA,CAAhB,GAAoByH,UAAarK,CAAAA,MAAjC,EAAyC4C,CAAA,EAAzC,CAA8C;AAC5C,UAAI0H,KAAJ;AACA,SAAI;AACFA,aAAA,GAAQrJ,KAAA,CAAMmJ,OAAA,CAAOxH,CAAP,CAAN,EAAiBd,SAAjB,EAA4BV,OAA5B,CAAR;AADE,OAEF,QAAO2H,GAAP,CAAY;AACZ,cAAUvH,KAAJ,CAAW,kCAAiCoB,CAAjC,2BAA6DmG,GAAIC,CAAAA,OAAjE,EAAX,CAAN;AADY;AAGd,UAAI,EAAEsB,KAAF,YAAmBhJ,iBAAnB,CAAJ;AACE,cAAUE,KAAJ,CAAW,8BAA6BoB,CAA7B,0BAAX,CAAN;AADF;AAGAyH,gBAAA,CAAazH,CAAb,CAAA,GAAkB0H,KAAlB;AAV4C;AAY9C,WAAO,CAACH,KAAD,EAAQ,GAAGE,UAAX,CAAP;AAxBqD,GAtNiL,CAPxN,EAO0R,CAACrF,GAAIqD,CAAAA,QAAL,EAAetE,0BAAA,CAA2BZ,YAAA,CAAa,CAAb,EAAgB,CAAhB,CAA3B,EAA+CS,cAAA,CAAerC,WAAf,GAA6BM,UAA7B,GAA0CR,UAA1C,GAAuDS,SAAvD,CAA/C,CAPzS,CAFhB;AAjLmG,CAAnG;;",
"sources":["node_modules/ol/expr/expression.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$expr$expression\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, AnyType:{enumerable:true, get:function() {\n  return AnyType;\n}}, BooleanType:{enumerable:true, get:function() {\n  return BooleanType;\n}}, CallExpression:{enumerable:true, get:function() {\n  return CallExpression;\n}}, ColorType:{enumerable:true, get:function() {\n  return ColorType;\n}}, LiteralExpression:{enumerable:true, get:function() {\n  return LiteralExpression;\n}}, NoneType:{enumerable:true, get:function() {\n  return NoneType;\n}}, NumberArrayType:{enumerable:true, get:function() {\n  return NumberArrayType;\n}}, NumberType:{enumerable:true, get:function() {\n  return NumberType;\n}}, Ops:{enumerable:true, get:function() {\n  return Ops;\n}}, SizeType:{enumerable:true, get:function() {\n  return SizeType;\n}}, StringType:{enumerable:true, get:function() {\n  return StringType;\n}}, computeGeometryType:{enumerable:true, get:function() {\n  return computeGeometryType;\n}}, includesType:{enumerable:true, get:function() {\n  return includesType;\n}}, isType:{enumerable:true, get:function() {\n  return isType;\n}}, newParsingContext:{enumerable:true, get:function() {\n  return newParsingContext;\n}}, overlapsType:{enumerable:true, get:function() {\n  return overlapsType;\n}}, parse:{enumerable:true, get:function() {\n  return parse;\n}}, typeName:{enumerable:true, get:function() {\n  return typeName;\n}}});\nvar require$_DOT__DOT__SLASH_array_DOT_js = require(\"../array.js\");\nvar require$_DOT__DOT__SLASH_color_DOT_js = require(\"../color.js\");\nvar require$_DOT__DOT__SLASH_size_DOT_js = require(\"../size.js\");\nlet numTypes = 0;\nconst NoneType = 0;\nconst BooleanType = 1 << numTypes++;\nconst NumberType = 1 << numTypes++;\nconst StringType = 1 << numTypes++;\nconst ColorType = 1 << numTypes++;\nconst NumberArrayType = 1 << numTypes++;\nconst SizeType = 1 << numTypes++;\nconst AnyType = Math.pow(2, numTypes) - 1;\nconst typeNames = {[BooleanType]:\"boolean\", [NumberType]:\"number\", [StringType]:\"string\", [ColorType]:\"color\", [NumberArrayType]:\"number[]\", [SizeType]:\"size\",};\nconst namedTypes = Object.keys(typeNames).map(Number).sort(require$_DOT__DOT__SLASH_array_DOT_js.ascending);\nfunction isSpecific(type) {\n  return type in typeNames;\n}\nfunction typeName(type) {\n  const names = [];\n  for (const namedType of namedTypes) {\n    if (includesType(type, namedType)) {\n      names.push(typeNames[namedType]);\n    }\n  }\n  if (names.length === 0) {\n    return \"untyped\";\n  }\n  if (names.length < 3) {\n    return names.join(\" or \");\n  }\n  return names.slice(0, -1).join(\", \") + \", or \" + names[names.length - 1];\n}\nfunction includesType(broad, specific) {\n  return (broad & specific) === specific;\n}\nfunction overlapsType(oneType, otherType) {\n  return !!(oneType & otherType);\n}\nfunction isType(type, expected) {\n  return type === expected;\n}\nclass LiteralExpression {\n  constructor(type, value) {\n    if (!isSpecific(type)) {\n      throw new Error(`literal expressions must have a specific type, got ${typeName(type)}`,);\n    }\n    this.type = type;\n    this.value = value;\n  }\n}\nclass CallExpression {\n  constructor(type, operator, ...args) {\n    this.type = type;\n    this.operator = operator;\n    this.args = args;\n  }\n}\nfunction newParsingContext() {\n  return {variables:new Set(), properties:new Set(), featureId:false, geometryType:false, mapState:false,};\n}\nfunction parse(encoded, expectedType, context) {\n  switch(typeof encoded) {\n    case \"boolean\":\n      {\n        if (isType(expectedType, StringType)) {\n          return new LiteralExpression(StringType, encoded ? \"true\" : \"false\");\n        }\n        if (!includesType(expectedType, BooleanType)) {\n          throw new Error(`got a boolean, but expected ${typeName(expectedType)}`,);\n        }\n        return new LiteralExpression(BooleanType, encoded);\n      }\n    case \"number\":\n      {\n        if (isType(expectedType, SizeType)) {\n          return new LiteralExpression(SizeType, (0,require$_DOT__DOT__SLASH_size_DOT_js.toSize)(encoded));\n        }\n        if (isType(expectedType, BooleanType)) {\n          return new LiteralExpression(BooleanType, !!encoded);\n        }\n        if (isType(expectedType, StringType)) {\n          return new LiteralExpression(StringType, encoded.toString());\n        }\n        if (!includesType(expectedType, NumberType)) {\n          throw new Error(`got a number, but expected ${typeName(expectedType)}`);\n        }\n        return new LiteralExpression(NumberType, encoded);\n      }\n    case \"string\":\n      {\n        if (isType(expectedType, ColorType)) {\n          return new LiteralExpression(ColorType, (0,require$_DOT__DOT__SLASH_color_DOT_js.fromString)(encoded));\n        }\n        if (isType(expectedType, BooleanType)) {\n          return new LiteralExpression(BooleanType, !!encoded);\n        }\n        if (!includesType(expectedType, StringType)) {\n          throw new Error(`got a string, but expected ${typeName(expectedType)}`);\n        }\n        return new LiteralExpression(StringType, encoded);\n      }\n    default:\n      {\n      }\n  }\n  if (!Array.isArray(encoded)) {\n    throw new Error(\"expression must be an array or a primitive value\");\n  }\n  if (encoded.length === 0) {\n    throw new Error(\"empty expression\");\n  }\n  if (typeof encoded[0] === \"string\") {\n    return parseCallExpression(encoded, expectedType, context);\n  }\n  for (const item of encoded) {\n    if (typeof item !== \"number\") {\n      throw new Error(\"expected an array of numbers\");\n    }\n  }\n  if (isType(expectedType, SizeType)) {\n    if (encoded.length !== 2) {\n      throw new Error(`expected an array of two values for a size, got ${encoded.length}`,);\n    }\n    return new LiteralExpression(SizeType, encoded);\n  }\n  if (isType(expectedType, ColorType)) {\n    if (encoded.length === 3) {\n      return new LiteralExpression(ColorType, [...encoded, 1]);\n    }\n    if (encoded.length === 4) {\n      return new LiteralExpression(ColorType, encoded);\n    }\n    throw new Error(`expected an array of 3 or 4 values for a color, got ${encoded.length}`,);\n  }\n  if (!includesType(expectedType, NumberArrayType)) {\n    throw new Error(`got an array of numbers, but expected ${typeName(expectedType)}`,);\n  }\n  return new LiteralExpression(NumberArrayType, encoded);\n}\nconst Ops = {Get:\"get\", Var:\"var\", Concat:\"concat\", GeometryType:\"geometry-type\", LineMetric:\"line-metric\", Any:\"any\", All:\"all\", Not:\"!\", Resolution:\"resolution\", Zoom:\"zoom\", Time:\"time\", Equal:\"\\x3d\\x3d\", NotEqual:\"!\\x3d\", GreaterThan:\"\\x3e\", GreaterThanOrEqualTo:\"\\x3e\\x3d\", LessThan:\"\\x3c\", LessThanOrEqualTo:\"\\x3c\\x3d\", Multiply:\"*\", Divide:\"/\", Add:\"+\", Subtract:\"-\", Clamp:\"clamp\", Mod:\"%\", Pow:\"^\", Abs:\"abs\", Floor:\"floor\", Ceil:\"ceil\", Round:\"round\", Sin:\"sin\", Cos:\"cos\", Atan:\"atan\", Sqrt:\"sqrt\", \nMatch:\"match\", Between:\"between\", Interpolate:\"interpolate\", Coalesce:\"coalesce\", Case:\"case\", In:\"in\", Number:\"number\", String:\"string\", Array:\"array\", Color:\"color\", Id:\"id\", Band:\"band\", Palette:\"palette\", ToString:\"to-string\", Has:\"has\",};\nconst parsers = {[Ops.Get]:createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs), [Ops.Var]:createCallExpressionParser(hasArgsCount(1, 1), withVarArgs), [Ops.Has]:createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs), [Ops.Id]:createCallExpressionParser(usesFeatureId, withNoArgs), [Ops.Concat]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfType(StringType),), [Ops.GeometryType]:createCallExpressionParser(usesGeometryType, withNoArgs), [Ops.LineMetric]:createCallExpressionParser(withNoArgs), \n[Ops.Resolution]:createCallExpressionParser(usesMapState, withNoArgs), [Ops.Zoom]:createCallExpressionParser(usesMapState, withNoArgs), [Ops.Time]:createCallExpressionParser(usesMapState, withNoArgs), [Ops.Any]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfType(BooleanType),), [Ops.All]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfType(BooleanType),), [Ops.Not]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(BooleanType),), [Ops.Equal]:createCallExpressionParser(hasArgsCount(2, \n2), withArgsOfType(AnyType),), [Ops.NotEqual]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(AnyType),), [Ops.GreaterThan]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.GreaterThanOrEqualTo]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.LessThan]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.LessThanOrEqualTo]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),\n), [Ops.Multiply]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfReturnType,), [Ops.Coalesce]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfReturnType,), [Ops.Divide]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.Add]:createCallExpressionParser(hasArgsCount(2, Infinity), withArgsOfType(NumberType),), [Ops.Subtract]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.Clamp]:createCallExpressionParser(hasArgsCount(3, \n3), withArgsOfType(NumberType),), [Ops.Mod]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.Pow]:createCallExpressionParser(hasArgsCount(2, 2), withArgsOfType(NumberType),), [Ops.Abs]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Floor]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Ceil]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Round]:createCallExpressionParser(hasArgsCount(1, \n1), withArgsOfType(NumberType),), [Ops.Sin]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Cos]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Atan]:createCallExpressionParser(hasArgsCount(1, 2), withArgsOfType(NumberType),), [Ops.Sqrt]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(NumberType),), [Ops.Match]:createCallExpressionParser(hasArgsCount(4, Infinity), hasEvenArgs, withMatchArgs,), [Ops.Between]:createCallExpressionParser(hasArgsCount(3, \n3), withArgsOfType(NumberType),), [Ops.Interpolate]:createCallExpressionParser(hasArgsCount(6, Infinity), hasEvenArgs, withInterpolateArgs,), [Ops.Case]:createCallExpressionParser(hasArgsCount(3, Infinity), hasOddArgs, withCaseArgs,), [Ops.In]:createCallExpressionParser(hasArgsCount(2, 2), withInArgs), [Ops.Number]:createCallExpressionParser(hasArgsCount(1, Infinity), withArgsOfType(AnyType),), [Ops.String]:createCallExpressionParser(hasArgsCount(1, Infinity), withArgsOfType(AnyType),), [Ops.Array]:createCallExpressionParser(hasArgsCount(1, \nInfinity), withArgsOfType(NumberType),), [Ops.Color]:createCallExpressionParser(hasArgsCount(1, 4), withArgsOfType(NumberType),), [Ops.Band]:createCallExpressionParser(hasArgsCount(1, 3), withArgsOfType(NumberType),), [Ops.Palette]:createCallExpressionParser(hasArgsCount(2, 2), withPaletteArgs,), [Ops.ToString]:createCallExpressionParser(hasArgsCount(1, 1), withArgsOfType(BooleanType | NumberType | StringType | ColorType),),};\nfunction withGetArgs(encoded, returnType, context) {\n  const argsCount = encoded.length - 1;\n  const args = new Array(argsCount);\n  for (let i = 0; i < argsCount; ++i) {\n    const key = encoded[i + 1];\n    switch(typeof key) {\n      case \"number\":\n        {\n          args[i] = new LiteralExpression(NumberType, key);\n          break;\n        }\n      case \"string\":\n        {\n          args[i] = new LiteralExpression(StringType, key);\n          break;\n        }\n      default:\n        {\n          throw new Error(`expected a string key or numeric array index for a get operation, got ${key}`,);\n        }\n    }\n    if (i === 0) {\n      context.properties.add(String(key));\n    }\n  }\n  return args;\n}\nfunction withVarArgs(encoded, returnType, context) {\n  const name = encoded[1];\n  if (typeof name !== \"string\") {\n    throw new Error(\"expected a string argument for var operation\");\n  }\n  context.variables.add(name);\n  return [new LiteralExpression(StringType, name)];\n}\nfunction usesFeatureId(encoded, returnType, context) {\n  context.featureId = true;\n}\nfunction usesGeometryType(encoded, returnType, context) {\n  context.geometryType = true;\n}\nfunction usesMapState(encoded, returnType, context) {\n  context.mapState = true;\n}\nfunction withNoArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  if (encoded.length !== 1) {\n    throw new Error(`expected no arguments for ${operation} operation`);\n  }\n  return [];\n}\nfunction hasArgsCount(minArgs, maxArgs) {\n  return function(encoded, returnType, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (minArgs === maxArgs) {\n      if (argCount !== minArgs) {\n        const plural = minArgs === 1 ? \"\" : \"s\";\n        throw new Error(`expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`,);\n      }\n    } else if (argCount < minArgs || argCount > maxArgs) {\n      const range = maxArgs === Infinity ? `${minArgs} or more` : `${minArgs} to ${maxArgs}`;\n      throw new Error(`expected ${range} arguments for ${operation}, got ${argCount}`,);\n    }\n  };\n}\nfunction withArgsOfReturnType(encoded, returnType, context) {\n  const argCount = encoded.length - 1;\n  const args = new Array(argCount);\n  for (let i = 0; i < argCount; ++i) {\n    const expression = parse(encoded[i + 1], returnType, context);\n    args[i] = expression;\n  }\n  return args;\n}\nfunction withArgsOfType(argType) {\n  return function(encoded, returnType, context) {\n    const argCount = encoded.length - 1;\n    const args = new Array(argCount);\n    for (let i = 0; i < argCount; ++i) {\n      const expression = parse(encoded[i + 1], argType, context);\n      args[i] = expression;\n    }\n    return args;\n  };\n}\nfunction hasOddArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 0) {\n    throw new Error(`expected an odd number of arguments for ${operation}, got ${argCount} instead`,);\n  }\n}\nfunction hasEvenArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 1) {\n    throw new Error(`expected an even number of arguments for operation ${operation}, got ${argCount} instead`,);\n  }\n}\nfunction withMatchArgs(encoded, returnType, context) {\n  const argsCount = encoded.length - 1;\n  const inputType = StringType | NumberType | BooleanType;\n  const input = parse(encoded[1], inputType, context);\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\n  const args = new Array(argsCount - 2);\n  for (let i = 0; i < argsCount - 2; i += 2) {\n    try {\n      const match = parse(encoded[i + 2], input.type, context);\n      args[i] = match;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i + 1} of match expression: ${err.message}`,);\n    }\n    try {\n      const output = parse(encoded[i + 3], fallback.type, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i + 2} of match expression: ${err.message}`,);\n    }\n  }\n  return [input, ...args, fallback];\n}\nfunction withInterpolateArgs(encoded, returnType, context) {\n  const interpolationType = encoded[1];\n  let base;\n  switch(interpolationType[0]) {\n    case \"linear\":\n      base = 1;\n      break;\n    case \"exponential\":\n      const b = interpolationType[1];\n      if (typeof b !== \"number\" || b <= 0) {\n        throw new Error(`expected a number base for exponential interpolation` + `, got ${JSON.stringify(b)} instead`,);\n      }\n      base = b;\n      break;\n    default:\n      throw new Error(`invalid interpolation type: ${JSON.stringify(interpolationType)}`,);\n  }\n  const interpolation = new LiteralExpression(NumberType, base);\n  let input;\n  try {\n    input = parse(encoded[2], NumberType, context);\n  } catch (err) {\n    throw new Error(`failed to parse argument 1 in interpolate expression: ${err.message}`,);\n  }\n  const args = new Array(encoded.length - 3);\n  for (let i = 0; i < args.length; i += 2) {\n    try {\n      const stop = parse(encoded[i + 3], NumberType, context);\n      args[i] = stop;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i + 2} for interpolate expression: ${err.message}`,);\n    }\n    try {\n      const output = parse(encoded[i + 4], returnType, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i + 3} for interpolate expression: ${err.message}`,);\n    }\n  }\n  return [interpolation, input, ...args];\n}\nfunction withCaseArgs(encoded, returnType, context) {\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\n  const args = new Array(encoded.length - 1);\n  for (let i = 0; i < args.length - 1; i += 2) {\n    try {\n      const condition = parse(encoded[i + 1], BooleanType, context);\n      args[i] = condition;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i} of case expression: ${err.message}`,);\n    }\n    try {\n      const output = parse(encoded[i + 2], fallback.type, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(`failed to parse argument ${i + 1} of case expression: ${err.message}`,);\n    }\n  }\n  args[args.length - 1] = fallback;\n  return args;\n}\nfunction withInArgs(encoded, returnType, context) {\n  let haystack = encoded[2];\n  if (!Array.isArray(haystack)) {\n    throw new Error(`the second argument for the \"in\" operator must be an array`,);\n  }\n  let needleType;\n  if (typeof haystack[0] === \"string\") {\n    if (haystack[0] !== \"literal\") {\n      throw new Error(`for the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions`,);\n    }\n    if (!Array.isArray(haystack[1])) {\n      throw new Error(`failed to parse \"in\" expression: the literal operator must be followed by an array`,);\n    }\n    haystack = haystack[1];\n    needleType = StringType;\n  } else {\n    needleType = NumberType;\n  }\n  const args = new Array(haystack.length);\n  for (let i = 0; i < args.length; i++) {\n    try {\n      const arg = parse(haystack[i], needleType, context);\n      args[i] = arg;\n    } catch (err) {\n      throw new Error(`failed to parse haystack item ${i} for \"in\" expression: ${err.message}`,);\n    }\n  }\n  const needle = parse(encoded[1], needleType, context);\n  return [needle, ...args];\n}\nfunction withPaletteArgs(encoded, returnType, context) {\n  let index;\n  try {\n    index = parse(encoded[1], NumberType, context);\n  } catch (err) {\n    throw new Error(`failed to parse first argument in palette expression: ${err.message}`,);\n  }\n  const colors = encoded[2];\n  if (!Array.isArray(colors)) {\n    throw new Error(\"the second argument of palette must be an array\");\n  }\n  const parsedColors = new Array(colors.length);\n  for (let i = 0; i < parsedColors.length; i++) {\n    let color;\n    try {\n      color = parse(colors[i], ColorType, context);\n    } catch (err) {\n      throw new Error(`failed to parse color at index ${i} in palette expression: ${err.message}`,);\n    }\n    if (!(color instanceof LiteralExpression)) {\n      throw new Error(`the palette color at index ${i} must be a literal value`,);\n    }\n    parsedColors[i] = color;\n  }\n  return [index, ...parsedColors];\n}\nfunction createCallExpressionParser(...validators) {\n  return function(encoded, returnType, context) {\n    const operator = encoded[0];\n    let args;\n    for (let i = 0; i < validators.length; i++) {\n      const parsed = validators[i](encoded, returnType, context);\n      if (i == validators.length - 1) {\n        if (!parsed) {\n          throw new Error(\"expected last argument validator to return the parsed args\",);\n        }\n        args = parsed;\n      }\n    }\n    return new CallExpression(returnType, operator, ...args);\n  };\n}\nfunction parseCallExpression(encoded, returnType, context) {\n  const operator = encoded[0];\n  const parser = parsers[operator];\n  if (!parser) {\n    throw new Error(`unknown operator: ${operator}`);\n  }\n  return parser(encoded, returnType, context);\n}\nfunction computeGeometryType(geometry) {\n  if (!geometry) {\n    return \"\";\n  }\n  const type = geometry.getType();\n  switch(type) {\n    case \"Point\":\n    case \"LineString\":\n    case \"Polygon\":\n      return type;\n    case \"MultiPoint\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      return type.substring(5);\n    case \"Circle\":\n      return \"Polygon\";\n    case \"GeometryCollection\":\n      return computeGeometryType(geometry.getGeometries()[0],);\n    default:\n      return \"\";\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","typeName","type","names","namedType","namedTypes","includesType","push","typeNames","length","join","slice","broad","specific","overlapsType","oneType","otherType","isType","expected","newParsingContext","variables","Set","properties","featureId","geometryType","mapState","parse","encoded","expectedType","context","StringType","LiteralExpression","BooleanType","Error","SizeType","require$_DOT__DOT__SLASH_size_DOT_js","toSize","toString","NumberType","ColorType","require$_DOT__DOT__SLASH_color_DOT_js","fromString","Array","isArray","operator","parser","parsers","item","NumberArrayType","withGetArgs","returnType","argsCount","args","i","key","add","String","usesMapState","withNoArgs","operation","hasArgsCount","minArgs","maxArgs","argCount","plural","Infinity","range","withArgsOfReturnType","expression","withArgsOfType","argType","hasEvenArgs","createCallExpressionParser","validators","parsed","CallExpression","computeGeometryType","geometry","getType","substring","getGeometries","Object","defineProperties","__esModule","enumerable","value","AnyType","get","NoneType","Ops","require$_DOT__DOT__SLASH_array_DOT_js","numTypes","Math","pow","keys","map","Number","sort","ascending","constructor","Get","Var","Concat","GeometryType","LineMetric","Any","All","Not","Resolution","Zoom","Time","Equal","NotEqual","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Multiply","Divide","Add","Subtract","Clamp","Mod","Pow","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","Match","Between","Interpolate","Coalesce","Case","In","Color","Id","Band","Palette","ToString","Has","withVarArgs","name","usesFeatureId","usesGeometryType","withMatchArgs","input","fallback","match","err","message","output","withInterpolateArgs","interpolationType","base","b","JSON","stringify","interpolation","stop","hasOddArgs","withCaseArgs","condition","withInArgs","haystack","needleType","arg","needle","withPaletteArgs","index","colors","parsedColors","color"]
}
