shadow$provide.module$node_modules$ol$style$Stroke = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  class Stroke {
    constructor(options) {
      options = options || {};
      this.color_ = void 0 !== options.color ? options.color : null;
      this.lineCap_ = options.lineCap;
      this.lineDash_ = void 0 !== options.lineDash ? options.lineDash : null;
      this.lineDashOffset_ = options.lineDashOffset;
      this.lineJoin_ = options.lineJoin;
      this.miterLimit_ = options.miterLimit;
      this.width_ = options.width;
    }
    clone() {
      const color = this.getColor();
      return new Stroke({color:Array.isArray(color) ? color.slice() : color || void 0, lineCap:this.getLineCap(), lineDash:this.getLineDash() ? this.getLineDash().slice() : void 0, lineDashOffset:this.getLineDashOffset(), lineJoin:this.getLineJoin(), miterLimit:this.getMiterLimit(), width:this.getWidth()});
    }
    getColor() {
      return this.color_;
    }
    getLineCap() {
      return this.lineCap_;
    }
    getLineDash() {
      return this.lineDash_;
    }
    getLineDashOffset() {
      return this.lineDashOffset_;
    }
    getLineJoin() {
      return this.lineJoin_;
    }
    getMiterLimit() {
      return this.miterLimit_;
    }
    getWidth() {
      return this.width_;
    }
    setColor(color) {
      this.color_ = color;
    }
    setLineCap(lineCap) {
      this.lineCap_ = lineCap;
    }
    setLineDash(lineDash) {
      this.lineDash_ = lineDash;
    }
    setLineDashOffset(lineDashOffset) {
      this.lineDashOffset_ = lineDashOffset;
    }
    setLineJoin(lineJoin) {
      this.lineJoin_ = lineJoin;
    }
    setMiterLimit(miterLimit) {
      this.miterLimit_ = miterLimit;
    }
    setWidth(width) {
      this.width_ = width;
    }
  }
  const $$default = Stroke;
};

//# sourceMappingURL=module$node_modules$ol$style$Stroke.js.map
