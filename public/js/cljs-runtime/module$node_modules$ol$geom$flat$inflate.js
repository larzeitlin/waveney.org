shadow$provide.module$node_modules$ol$geom$flat$inflate = function(global, require, module, exports) {
  function inflateCoordinates(flatCoordinates, offset, end, stride, coordinates) {
    coordinates = void 0 !== coordinates ? coordinates : [];
    let i = 0;
    for (; offset < end; offset += stride) {
      coordinates[i++] = flatCoordinates.slice(offset, offset + stride);
    }
    coordinates.length = i;
    return coordinates;
  }
  function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatess) {
    coordinatess = void 0 !== coordinatess ? coordinatess : [];
    let i = 0;
    for (let j = 0, jj = ends.length; j < jj; ++j) {
      const end = ends[j];
      coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }
  function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, coordinatesss) {
    coordinatesss = void 0 !== coordinatesss ? coordinatesss : [];
    let i = 0;
    for (let j = 0, jj = endss.length; j < jj; ++j) {
      const ends = endss[j];
      coordinatesss[i++] = 1 === ends.length && ends[0] === offset ? [] : inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, inflateCoordinates:{enumerable:!0, get:function() {
    return inflateCoordinates;
  }}, inflateCoordinatesArray:{enumerable:!0, get:function() {
    return inflateCoordinatesArray;
  }}, inflateMultiCoordinatesArray:{enumerable:!0, get:function() {
    return inflateMultiCoordinatesArray;
  }}});
};

//# sourceMappingURL=module$node_modules$ol$geom$flat$inflate.js.map
