shadow$provide.module$node_modules$ol$style$Style = function(global, require, module, exports) {
  function toFunction(obj) {
    if ("function" !== typeof obj) {
      let styles;
      Array.isArray(obj) ? styles = obj : ((0,require$_DOT__DOT__SLASH_asserts_DOT_js.assert)("function" === typeof obj.getZIndex, "Expected an `Style` or an array of `Style`"), styles = [obj]);
      obj = function() {
        return styles;
      };
    }
    return obj;
  }
  function createDefaultStyle(feature, resolution) {
    defaultStyles || (feature = new default$$require$_DOT__SLASH_Fill_DOT_js.default({color:"rgba(255,255,255,0.4)"}), resolution = new default$$require$_DOT__SLASH_Stroke_DOT_js.default({color:"#3399CC", width:1.25}), defaultStyles = [new Style({image:new default$$require$_DOT__SLASH_Circle_DOT_js.default({fill:feature, stroke:resolution, radius:5}), fill:feature, stroke:resolution})]);
    return defaultStyles;
  }
  function createEditingStyle() {
    const styles = {}, white = [255, 255, 255, 1], blue = [0, 153, 255, 1];
    styles.Polygon = [new Style({fill:new default$$require$_DOT__SLASH_Fill_DOT_js.default({color:[255, 255, 255, 0.5]})})];
    styles.MultiPolygon = styles.Polygon;
    styles.LineString = [new Style({stroke:new default$$require$_DOT__SLASH_Stroke_DOT_js.default({color:white, width:5})}), new Style({stroke:new default$$require$_DOT__SLASH_Stroke_DOT_js.default({color:blue, width:3})})];
    styles.MultiLineString = styles.LineString;
    styles.Circle = styles.Polygon.concat(styles.LineString);
    styles.Point = [new Style({image:new default$$require$_DOT__SLASH_Circle_DOT_js.default({radius:6, fill:new default$$require$_DOT__SLASH_Fill_DOT_js.default({color:blue}), stroke:new default$$require$_DOT__SLASH_Stroke_DOT_js.default({color:white, width:1.5})}), zIndex:Infinity})];
    styles.MultiPoint = styles.Point;
    styles.GeometryCollection = styles.Polygon.concat(styles.LineString, styles.Point);
    return styles;
  }
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, createDefaultStyle:{enumerable:!0, get:function() {
    return createDefaultStyle;
  }}, createEditingStyle:{enumerable:!0, get:function() {
    return createEditingStyle;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, toFunction:{enumerable:!0, get:function() {
    return toFunction;
  }}});
  var require$_DOT__DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts");
  global = require("module$node_modules$ol$style$Circle");
  module = require("module$node_modules$ol$style$Fill");
  exports = require("module$node_modules$ol$style$Stroke");
  var default$$require$_DOT__SLASH_Circle_DOT_js = require.esmDefault(global), default$$require$_DOT__SLASH_Stroke_DOT_js = require.esmDefault(exports), default$$require$_DOT__SLASH_Fill_DOT_js = require.esmDefault(module);
  class Style {
    constructor(options) {
      options = options || {};
      this.geometry_ = null;
      this.geometryFunction_ = defaultGeometryFunction;
      void 0 !== options.geometry && this.setGeometry(options.geometry);
      this.fill_ = void 0 !== options.fill ? options.fill : null;
      this.image_ = void 0 !== options.image ? options.image : null;
      this.renderer_ = void 0 !== options.renderer ? options.renderer : null;
      this.hitDetectionRenderer_ = void 0 !== options.hitDetectionRenderer ? options.hitDetectionRenderer : null;
      this.stroke_ = void 0 !== options.stroke ? options.stroke : null;
      this.text_ = void 0 !== options.text ? options.text : null;
      this.zIndex_ = options.zIndex;
    }
    clone() {
      let geometry = this.getGeometry();
      geometry && "object" === typeof geometry && (geometry = geometry.clone());
      return new Style({geometry:geometry ?? void 0, fill:this.getFill() ? this.getFill().clone() : void 0, image:this.getImage() ? this.getImage().clone() : void 0, renderer:this.getRenderer() ?? void 0, stroke:this.getStroke() ? this.getStroke().clone() : void 0, text:this.getText() ? this.getText().clone() : void 0, zIndex:this.getZIndex()});
    }
    getRenderer() {
      return this.renderer_;
    }
    setRenderer(renderer) {
      this.renderer_ = renderer;
    }
    setHitDetectionRenderer(renderer) {
      this.hitDetectionRenderer_ = renderer;
    }
    getHitDetectionRenderer() {
      return this.hitDetectionRenderer_;
    }
    getGeometry() {
      return this.geometry_;
    }
    getGeometryFunction() {
      return this.geometryFunction_;
    }
    getFill() {
      return this.fill_;
    }
    setFill(fill) {
      this.fill_ = fill;
    }
    getImage() {
      return this.image_;
    }
    setImage(image) {
      this.image_ = image;
    }
    getStroke() {
      return this.stroke_;
    }
    setStroke(stroke) {
      this.stroke_ = stroke;
    }
    getText() {
      return this.text_;
    }
    setText(text) {
      this.text_ = text;
    }
    getZIndex() {
      return this.zIndex_;
    }
    setGeometry(geometry) {
      "function" === typeof geometry ? this.geometryFunction_ = geometry : "string" === typeof geometry ? this.geometryFunction_ = function(feature) {
        return feature.get(geometry);
      } : geometry ? void 0 !== geometry && (this.geometryFunction_ = function() {
        return geometry;
      }) : this.geometryFunction_ = defaultGeometryFunction;
      this.geometry_ = geometry;
    }
    setZIndex(zIndex) {
      this.zIndex_ = zIndex;
    }
  }
  let defaultStyles = null;
  const $$default = Style;
};

//# sourceMappingURL=module$node_modules$ol$style$Style.js.map
