shadow$provide.module$node_modules$ol$events$Target = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$Disposable");
  var require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__DOT__SLASH_obj_DOT_js = require("module$node_modules$ol$obj");
  global = require("module$node_modules$ol$events$Event");
  module = require.esmDefault(module);
  var default$$require$_DOT__SLASH_Event_DOT_js = require.esmDefault(global);
  class Target extends module.default {
    constructor(target) {
      super();
      this.eventTarget_ = target;
      this.listeners_ = this.dispatching_ = this.pendingRemovals_ = null;
    }
    addEventListener(type, listener) {
      if (type && listener) {
        var listeners = this.listeners_ || (this.listeners_ = {});
        type = listeners[type] || (listeners[type] = []);
        type.includes(listener) || type.push(listener);
      }
    }
    dispatchEvent(event) {
      var isString = "string" === typeof event;
      const type = isString ? event : event.type;
      var listeners = this.listeners_ && this.listeners_[type];
      if (listeners) {
        var evt = isString ? new default$$require$_DOT__SLASH_Event_DOT_js.default(event) : event;
        evt.target || (evt.target = this.eventTarget_ || this);
        event = this.dispatching_ || (this.dispatching_ = {});
        isString = this.pendingRemovals_ || (this.pendingRemovals_ = {});
        type in event || (event[type] = 0, isString[type] = 0);
        ++event[type];
        for (let i = 0, ii = listeners.length; i < ii; ++i) {
          var propagate = "handleEvent" in listeners[i] ? listeners[i].handleEvent(evt) : listeners[i].call(this, evt);
          if (!1 === propagate || evt.propagationStopped) {
            propagate = !1;
            break;
          }
        }
        if (0 === --event[type]) {
          listeners = isString[type];
          for (delete isString[type]; listeners--;) {
            this.removeEventListener(type, require$_DOT__DOT__SLASH_functions_DOT_js.VOID);
          }
          delete event[type];
        }
        return propagate;
      }
    }
    disposeInternal() {
      this.listeners_ && (0,require$_DOT__DOT__SLASH_obj_DOT_js.clear)(this.listeners_);
    }
    getListeners(type) {
      return this.listeners_ && this.listeners_[type] || void 0;
    }
    hasListener(type) {
      return this.listeners_ ? type ? type in this.listeners_ : 0 < Object.keys(this.listeners_).length : !1;
    }
    removeEventListener(type, listener) {
      if (this.listeners_) {
        var listeners = this.listeners_[type];
        listeners && (listener = listeners.indexOf(listener), -1 !== listener && (this.pendingRemovals_ && type in this.pendingRemovals_ ? (listeners[listener] = require$_DOT__DOT__SLASH_functions_DOT_js.VOID, ++this.pendingRemovals_[type]) : (listeners.splice(listener, 1), 0 === listeners.length && delete this.listeners_[type])));
      }
    }
  }
  const $$default = Target;
};

//# sourceMappingURL=module$node_modules$ol$events$Target.js.map
