shadow$provide.module$node_modules$ol$interaction$DragBox = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, DragBoxEvent:{enumerable:!0, get:function() {
    return DragBoxEvent;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  exports = require("module$node_modules$ol$events$Event");
  var require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js = require("module$node_modules$ol$events$condition");
  global = require("module$node_modules$ol$render$Box");
  module = require("module$node_modules$ol$interaction$Pointer");
  exports = require.esmDefault(exports);
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_render_SLASH_Box_DOT_js = require.esmDefault(global);
  class DragBoxEvent extends exports.default {
    constructor(type, coordinate, mapBrowserEvent) {
      super(type);
      this.coordinate = coordinate;
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }
  class DragBox extends module.default {
    constructor(options) {
      super();
      this.on;
      this.once;
      this.un;
      options = options ?? {};
      this.box_ = new default$$require$_DOT__DOT__SLASH_render_SLASH_Box_DOT_js.default(options.className || "ol-dragbox");
      this.minArea_ = options.minArea ?? 64;
      options.onBoxEnd && (this.onBoxEnd = options.onBoxEnd);
      this.startPixel_ = null;
      this.condition_ = options.condition ?? require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.mouseActionButton;
      this.boxEndCondition_ = options.boxEndCondition ?? this.defaultBoxEndCondition;
    }
    defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
      mapBrowserEvent = endPixel[0] - startPixel[0];
      startPixel = endPixel[1] - startPixel[1];
      return mapBrowserEvent * mapBrowserEvent + startPixel * startPixel >= this.minArea_;
    }
    getGeometry() {
      return this.box_.getGeometry();
    }
    handleDragEvent(mapBrowserEvent) {
      this.startPixel_ && (this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel), this.dispatchEvent(new DragBoxEvent("boxdrag", mapBrowserEvent.coordinate, mapBrowserEvent)));
    }
    handleUpEvent(mapBrowserEvent) {
      if (!this.startPixel_) {
        return !1;
      }
      const completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);
      if (completeBox) {
        this.onBoxEnd(mapBrowserEvent);
      }
      this.dispatchEvent(new DragBoxEvent(completeBox ? "boxend" : "boxcancel", mapBrowserEvent.coordinate, mapBrowserEvent));
      this.box_.setMap(null);
      this.startPixel_ = null;
      return !1;
    }
    handleDownEvent(mapBrowserEvent) {
      return this.condition_(mapBrowserEvent) ? (this.startPixel_ = mapBrowserEvent.pixel, this.box_.setMap(mapBrowserEvent.map), this.box_.setPixels(this.startPixel_, this.startPixel_), this.dispatchEvent(new DragBoxEvent("boxstart", mapBrowserEvent.coordinate, mapBrowserEvent)), !0) : !1;
    }
    onBoxEnd(event) {
    }
    setActive(active) {
      active || (this.box_.setMap(null), this.startPixel_ && (this.dispatchEvent(new DragBoxEvent("boxcancel", this.startPixel_, null)), this.startPixel_ = null));
      super.setActive(active);
    }
    setMap(map) {
      this.getMap() && (this.box_.setMap(null), this.startPixel_ && (this.dispatchEvent(new DragBoxEvent("boxcancel", this.startPixel_, null)), this.startPixel_ = null));
      super.setMap(map);
    }
  }
  const $$default = DragBox;
};

//# sourceMappingURL=module$node_modules$ol$interaction$DragBox.js.map
