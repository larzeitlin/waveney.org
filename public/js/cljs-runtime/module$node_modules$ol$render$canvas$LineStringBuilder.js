shadow$provide.module$node_modules$ol$render$canvas$LineStringBuilder = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_canvas_DOT_js = require("module$node_modules$ol$render$canvas");
  global = require("module$node_modules$ol$render$canvas$Builder");
  var require$_DOT__SLASH_Instruction_DOT_js = require("module$node_modules$ol$render$canvas$Instruction"), default$$require$_DOT__SLASH_Instruction_DOT_js = require.esmDefault(require$_DOT__SLASH_Instruction_DOT_js);
  require = require.esmDefault(global);
  class CanvasLineStringBuilder extends require.default {
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }
    drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
      var myBegin = this.coordinates.length;
      flatCoordinates = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, !1, !1);
      myBegin = [default$$require$_DOT__SLASH_Instruction_DOT_js.default.MOVE_TO_LINE_TO, myBegin, flatCoordinates];
      this.instructions.push(myBegin);
      this.hitDetectionInstructions.push(myBegin);
      return end;
    }
    drawLineString(lineStringGeometry, feature, index) {
      const state = this.state, lineWidth = state.lineWidth;
      void 0 !== state.strokeStyle && void 0 !== lineWidth && (this.updateStrokeStyle(state, this.applyStroke), this.beginGeometry(lineStringGeometry, feature, index), this.hitDetectionInstructions.push([default$$require$_DOT__SLASH_Instruction_DOT_js.default.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, require$_DOT__DOT__SLASH_canvas_DOT_js.defaultLineDash, require$_DOT__DOT__SLASH_canvas_DOT_js.defaultLineDashOffset], require$_DOT__SLASH_Instruction_DOT_js.beginPathInstruction), 
      index = lineStringGeometry.getFlatCoordinates(), lineStringGeometry = lineStringGeometry.getStride(), this.drawFlatCoordinates_(index, 0, index.length, lineStringGeometry), this.hitDetectionInstructions.push(require$_DOT__SLASH_Instruction_DOT_js.strokeInstruction), this.endGeometry(feature));
    }
    drawMultiLineString(multiLineStringGeometry, feature, index) {
      var state = this.state, lineWidth = state.lineWidth;
      if (void 0 !== state.strokeStyle && void 0 !== lineWidth) {
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(multiLineStringGeometry, feature, index);
        this.hitDetectionInstructions.push([default$$require$_DOT__SLASH_Instruction_DOT_js.default.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, require$_DOT__DOT__SLASH_canvas_DOT_js.defaultLineDash, require$_DOT__DOT__SLASH_canvas_DOT_js.defaultLineDashOffset], require$_DOT__SLASH_Instruction_DOT_js.beginPathInstruction);
        index = multiLineStringGeometry.getEnds();
        state = multiLineStringGeometry.getFlatCoordinates();
        multiLineStringGeometry = multiLineStringGeometry.getStride();
        lineWidth = 0;
        for (let i = 0, ii = index.length; i < ii; ++i) {
          lineWidth = this.drawFlatCoordinates_(state, lineWidth, index[i], multiLineStringGeometry);
        }
        this.hitDetectionInstructions.push(require$_DOT__SLASH_Instruction_DOT_js.strokeInstruction);
        this.endGeometry(feature);
      }
    }
    finish() {
      const state = this.state;
      void 0 != state.lastStroke && state.lastStroke != this.coordinates.length && this.instructions.push(require$_DOT__SLASH_Instruction_DOT_js.strokeInstruction);
      this.reverseHitDetectionInstructions();
      this.state = null;
      return super.finish();
    }
    applyStroke(state) {
      void 0 != state.lastStroke && state.lastStroke != this.coordinates.length && (this.instructions.push(require$_DOT__SLASH_Instruction_DOT_js.strokeInstruction), state.lastStroke = this.coordinates.length);
      state.lastStroke = 0;
      super.applyStroke(state);
      this.instructions.push(require$_DOT__SLASH_Instruction_DOT_js.beginPathInstruction);
    }
  }
  const $$default = CanvasLineStringBuilder;
};

//# sourceMappingURL=module$node_modules$ol$render$canvas$LineStringBuilder.js.map
