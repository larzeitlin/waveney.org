shadow$provide.module$node_modules$ol$style$Circle = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$style$RegularShape");
  require = require.esmDefault(global);
  class CircleStyle extends require.default {
    constructor(options) {
      options = options ? options : {radius:5};
      super({points:Infinity, fill:options.fill, radius:options.radius, stroke:options.stroke, scale:void 0 !== options.scale ? options.scale : 1, rotation:void 0 !== options.rotation ? options.rotation : 0, rotateWithView:void 0 !== options.rotateWithView ? options.rotateWithView : !1, displacement:void 0 !== options.displacement ? options.displacement : [0, 0], declutterMode:options.declutterMode});
    }
    clone() {
      var scale = this.getScale();
      scale = new CircleStyle({fill:this.getFill() ? this.getFill().clone() : void 0, stroke:this.getStroke() ? this.getStroke().clone() : void 0, radius:this.getRadius(), scale:Array.isArray(scale) ? scale.slice() : scale, rotation:this.getRotation(), rotateWithView:this.getRotateWithView(), displacement:this.getDisplacement().slice(), declutterMode:this.getDeclutterMode()});
      scale.setOpacity(this.getOpacity());
      return scale;
    }
    setRadius(radius) {
      this.radius = radius;
      this.render();
    }
  }
  const $$default = CircleStyle;
};

//# sourceMappingURL=module$node_modules$ol$style$Circle.js.map
