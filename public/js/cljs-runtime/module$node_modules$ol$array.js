shadow$provide.module$node_modules$ol$array = function(global, require, module, exports) {
  function binarySearch(haystack, needle, comparator) {
    let mid, cmp;
    comparator = comparator || ascending;
    let low = 0, high = haystack.length, found = !1;
    for (; low < high;) {
      mid = low + (high - low >> 1), cmp = +comparator(haystack[mid], needle), 0.0 > cmp ? low = mid + 1 : (high = mid, found = !cmp);
    }
    return found ? low : ~low;
  }
  function ascending(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  function descending(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }
  function linearFindNearest(arr, target, direction) {
    if (arr[0] <= target) {
      return 0;
    }
    const n = arr.length;
    if (target <= arr[n - 1]) {
      return n - 1;
    }
    if ("function" === typeof direction) {
      for (let i = 1; i < n; ++i) {
        const candidate = arr[i];
        if (candidate === target) {
          return i;
        }
        if (candidate < target) {
          return 0 < direction(target, arr[i - 1], candidate) ? i - 1 : i;
        }
      }
      return n - 1;
    }
    if (0 < direction) {
      for (direction = 1; direction < n; ++direction) {
        if (arr[direction] < target) {
          return direction - 1;
        }
      }
      return n - 1;
    }
    if (0 > direction) {
      for (direction = 1; direction < n; ++direction) {
        if (arr[direction] <= target) {
          return direction;
        }
      }
      return n - 1;
    }
    for (direction = 1; direction < n; ++direction) {
      if (arr[direction] == target) {
        return direction;
      }
      if (arr[direction] < target) {
        return arr[direction - 1] - target < target - arr[direction] ? direction - 1 : direction;
      }
    }
    return n - 1;
  }
  function reverseSubArray(arr, begin, end) {
    for (; begin < end;) {
      const tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }
  function extend(arr, data) {
    data = Array.isArray(data) ? data : [data];
    const length = data.length;
    for (let i = 0; i < length; i++) {
      arr[arr.length] = data[i];
    }
  }
  function remove(arr, obj) {
    obj = arr.indexOf(obj);
    const found = -1 < obj;
    found && arr.splice(obj, 1);
    return found;
  }
  function equals(arr1, arr2) {
    const len1 = arr1.length;
    if (len1 !== arr2.length) {
      return !1;
    }
    for (let i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return !1;
      }
    }
    return !0;
  }
  function stableSort(arr, compareFnc) {
    const length = arr.length, tmp = Array(arr.length);
    let i;
    for (i = 0; i < length; i++) {
      tmp[i] = {index:i, value:arr[i]};
    }
    tmp.sort(function(a, b) {
      return compareFnc(a.value, b.value) || a.index - b.index;
    });
    for (i = 0; i < arr.length; i++) {
      arr[i] = tmp[i].value;
    }
  }
  function isSorted(arr, func, strict) {
    const compare = func || ascending;
    return arr.every(function(currentVal, index) {
      if (0 === index) {
        return !0;
      }
      currentVal = compare(arr[index - 1], currentVal);
      return !(0 < currentVal || strict && 0 === currentVal);
    });
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, ascending:{enumerable:!0, get:function() {
    return ascending;
  }}, binarySearch:{enumerable:!0, get:function() {
    return binarySearch;
  }}, descending:{enumerable:!0, get:function() {
    return descending;
  }}, equals:{enumerable:!0, get:function() {
    return equals;
  }}, extend:{enumerable:!0, get:function() {
    return extend;
  }}, isSorted:{enumerable:!0, get:function() {
    return isSorted;
  }}, linearFindNearest:{enumerable:!0, get:function() {
    return linearFindNearest;
  }}, remove:{enumerable:!0, get:function() {
    return remove;
  }}, reverseSubArray:{enumerable:!0, get:function() {
    return reverseSubArray;
  }}, stableSort:{enumerable:!0, get:function() {
    return stableSort;
  }}});
};

//# sourceMappingURL=module$node_modules$ol$array.js.map
