shadow$provide.module$node_modules$ol$render$Feature = function(global, require, module, exports) {
  function toGeometry(renderFeature) {
    var geometryType = renderFeature.getType();
    switch(geometryType) {
      case "Point":
        return new require$_DOT__DOT__SLASH_geom_DOT_js.Point(renderFeature.getFlatCoordinates());
      case "MultiPoint":
        return new require$_DOT__DOT__SLASH_geom_DOT_js.MultiPoint(renderFeature.getFlatCoordinates(), "XY");
      case "LineString":
        return new require$_DOT__DOT__SLASH_geom_DOT_js.LineString(renderFeature.getFlatCoordinates(), "XY");
      case "MultiLineString":
        return new require$_DOT__DOT__SLASH_geom_DOT_js.MultiLineString(renderFeature.getFlatCoordinates(), "XY", renderFeature.getEnds());
      case "Polygon":
        geometryType = renderFeature.getFlatCoordinates();
        renderFeature = renderFeature.getEnds();
        const endss = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_orient_DOT_js.inflateEnds)(geometryType, renderFeature);
        return 1 < endss.length ? new require$_DOT__DOT__SLASH_geom_DOT_js.MultiPolygon(geometryType, "XY", endss) : new require$_DOT__DOT__SLASH_geom_DOT_js.Polygon(geometryType, "XY", renderFeature);
      default:
        throw Error("Invalid geometry type:" + geometryType);
    }
  }
  function toFeature(renderFeature, geometryName) {
    const id = renderFeature.getId(), geometry = toGeometry(renderFeature);
    renderFeature = renderFeature.getProperties();
    const feature = new default$$require$_DOT__DOT__SLASH_Feature_DOT_js.default();
    void 0 !== geometryName && feature.setGeometryName(geometryName);
    feature.setGeometry(geometry);
    void 0 !== id && feature.setId(id);
    feature.setProperties(renderFeature, !0);
    return feature;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}, toFeature:{enumerable:!0, get:function() {
    return toFeature;
  }}, toGeometry:{enumerable:!0, get:function() {
    return toGeometry;
  }}});
  global = require("module$node_modules$ol$Feature");
  var require$_DOT__DOT__SLASH_array_DOT_js = require("module$node_modules$ol$array"), require$_DOT__DOT__SLASH_extent_DOT_js = require("module$node_modules$ol$extent"), require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_center_DOT_js = require("module$node_modules$ol$geom$flat$center"), require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interiorpoint_DOT_js = require("module$node_modules$ol$geom$flat$interiorpoint"), 
  require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interpolate_DOT_js = require("module$node_modules$ol$geom$flat$interpolate"), require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_orient_DOT_js = require("module$node_modules$ol$geom$flat$orient"), require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_simplify_DOT_js = require("module$node_modules$ol$geom$flat$simplify"), require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_transform_DOT_js = require("module$node_modules$ol$geom$flat$transform"), require$_DOT__DOT__SLASH_geom_DOT_js = 
  require("module$node_modules$ol$geom"), require$_DOT__DOT__SLASH_proj_DOT_js = require("module$node_modules$ol$proj"), require$_DOT__DOT__SLASH_transform_DOT_js = require("module$node_modules$ol$transform"), default$$require$_DOT__DOT__SLASH_Feature_DOT_js = require.esmDefault(global);
  const tmpTransform = (0,require$_DOT__DOT__SLASH_transform_DOT_js.create)();
  class RenderFeature {
    constructor(type, flatCoordinates, ends, stride, properties, id) {
      this.styleFunction;
      this.extent_;
      this.id_ = id;
      this.type_ = type;
      this.flatCoordinates_ = flatCoordinates;
      this.flatMidpoints_ = this.flatInteriorPoints_ = null;
      this.ends_ = ends || null;
      this.properties_ = properties;
      this.squaredTolerance_;
      this.stride_ = stride;
      this.simplifiedGeometry_;
    }
    get(key) {
      return this.properties_[key];
    }
    getExtent() {
      this.extent_ || (this.extent_ = "Point" === this.type_ ? (0,require$_DOT__DOT__SLASH_extent_DOT_js.createOrUpdateFromCoordinate)(this.flatCoordinates_) : (0,require$_DOT__DOT__SLASH_extent_DOT_js.createOrUpdateFromFlatCoordinates)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2));
      return this.extent_;
    }
    getFlatInteriorPoint() {
      if (!this.flatInteriorPoints_) {
        const flatCenter = (0,require$_DOT__DOT__SLASH_extent_DOT_js.getCenter)(this.getExtent());
        this.flatInteriorPoints_ = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interiorpoint_DOT_js.getInteriorPointOfArray)(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);
      }
      return this.flatInteriorPoints_;
    }
    getFlatInteriorPoints() {
      if (!this.flatInteriorPoints_) {
        const ends = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_orient_DOT_js.inflateEnds)(this.flatCoordinates_, this.ends_), flatCenters = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_center_DOT_js.linearRingss)(this.flatCoordinates_, 0, ends, 2);
        this.flatInteriorPoints_ = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interiorpoint_DOT_js.getInteriorPointsOfMultiArray)(this.flatCoordinates_, 0, ends, 2, flatCenters);
      }
      return this.flatInteriorPoints_;
    }
    getFlatMidpoint() {
      this.flatMidpoints_ || (this.flatMidpoints_ = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interpolate_DOT_js.interpolatePoint)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5));
      return this.flatMidpoints_;
    }
    getFlatMidpoints() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = [];
        const flatCoordinates = this.flatCoordinates_;
        var offset = 0;
        const ends = this.ends_;
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          const end = ends[i];
          offset = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_interpolate_DOT_js.interpolatePoint)(flatCoordinates, offset, end, 2, 0.5);
          (0,require$_DOT__DOT__SLASH_array_DOT_js.extend)(this.flatMidpoints_, offset);
          offset = end;
        }
      }
      return this.flatMidpoints_;
    }
    getId() {
      return this.id_;
    }
    getOrientedFlatCoordinates() {
      return this.flatCoordinates_;
    }
    getGeometry() {
      return this;
    }
    getSimplifiedGeometry(squaredTolerance) {
      return this;
    }
    simplifyTransformed(squaredTolerance, transform) {
      return this;
    }
    getProperties() {
      return this.properties_;
    }
    getPropertiesInternal() {
      return this.properties_;
    }
    getStride() {
      return this.stride_;
    }
    getStyleFunction() {
      return this.styleFunction;
    }
    getType() {
      return this.type_;
    }
    transform(projection) {
      projection = (0,require$_DOT__DOT__SLASH_proj_DOT_js.get)(projection);
      var pixelExtent = projection.getExtent();
      projection = projection.getWorldExtent();
      pixelExtent && projection && (pixelExtent = (0,require$_DOT__DOT__SLASH_extent_DOT_js.getHeight)(projection) / (0,require$_DOT__DOT__SLASH_extent_DOT_js.getHeight)(pixelExtent), (0,require$_DOT__DOT__SLASH_transform_DOT_js.compose)(tmpTransform, projection[0], projection[3], pixelExtent, -pixelExtent, 0, 0, 0), (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_transform_DOT_js.transform2D)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_));
    }
    applyTransform(transformFn) {
      transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);
    }
    clone() {
      return new RenderFeature(this.type_, this.flatCoordinates_.slice(), this.ends_?.slice(), this.stride_, Object.assign({}, this.properties_), this.id_);
    }
    getEnds() {
      return this.ends_;
    }
    enableSimplifyTransformed() {
      this.simplifyTransformed = (0,require$_DOT__DOT__SLASH_functions_DOT_js.memoizeOne)((squaredTolerance, transform) => {
        if (squaredTolerance === this.squaredTolerance_) {
          return this.simplifiedGeometry_;
        }
        this.simplifiedGeometry_ = this.clone();
        transform && this.simplifiedGeometry_.applyTransform(transform);
        transform = this.simplifiedGeometry_.getFlatCoordinates();
        let simplifiedEnds;
        switch(this.type_) {
          case "LineString":
            transform.length = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_simplify_DOT_js.douglasPeucker)(transform, 0, this.simplifiedGeometry_.flatCoordinates_.length, this.simplifiedGeometry_.stride_, squaredTolerance, transform, 0);
            simplifiedEnds = [transform.length];
            break;
          case "MultiLineString":
            simplifiedEnds = [];
            transform.length = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_simplify_DOT_js.douglasPeuckerArray)(transform, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, squaredTolerance, transform, 0, simplifiedEnds);
            break;
          case "Polygon":
            simplifiedEnds = [], transform.length = (0,require$_DOT__DOT__SLASH_geom_SLASH_flat_SLASH_simplify_DOT_js.quantizeArray)(transform, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, Math.sqrt(squaredTolerance), transform, 0, simplifiedEnds);
        }
        simplifiedEnds && (this.simplifiedGeometry_ = new RenderFeature(this.type_, transform, simplifiedEnds, 2, this.properties_, this.id_));
        this.squaredTolerance_ = squaredTolerance;
        return this.simplifiedGeometry_;
      });
      return this;
    }
  }
  RenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;
  const $$default = RenderFeature;
};

//# sourceMappingURL=module$node_modules$ol$render$Feature.js.map
