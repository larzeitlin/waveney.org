shadow$provide.module$node_modules$ol$transform = function(global, require, module, exports) {
  function create() {
    return [1, 0, 0, 1, 0, 0];
  }
  function reset(transform) {
    return set(transform, 1, 0, 0, 1, 0, 0);
  }
  function multiply(transform1, transform2) {
    const a1 = transform1[0], b1 = transform1[1], c1 = transform1[2], d1 = transform1[3], e1 = transform1[4], f1 = transform1[5], a2 = transform2[0], b2 = transform2[1], c2 = transform2[2], d2 = transform2[3], e2 = transform2[4];
    transform2 = transform2[5];
    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * transform2 + e1;
    transform1[5] = b1 * e2 + d1 * transform2 + f1;
    return transform1;
  }
  function set(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
  }
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }
  function apply(transform, coordinate) {
    const x = coordinate[0], y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }
  function rotate(transform, angle) {
    const cos = Math.cos(angle);
    angle = Math.sin(angle);
    return multiply(transform, set(tmp_, cos, angle, -angle, cos, 0, 0));
  }
  function scale(transform, x, y) {
    return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
  }
  function makeScale(target, x, y) {
    return set(target, x, 0, 0, y, 0, 0);
  }
  function translate(transform, dx, dy) {
    return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
  }
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    const sin = Math.sin(angle);
    angle = Math.cos(angle);
    transform[0] = sx * angle;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * angle;
    transform[4] = dx2 * sx * angle - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * angle + dy1;
    return transform;
  }
  function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {
    return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));
  }
  function invert(source) {
    return makeInverse(source, source);
  }
  function makeInverse(target, source) {
    const det = determinant(source);
    (0,require$_DOT__SLASH_asserts_DOT_js.assert)(0 !== det, "Transformation matrix cannot be inverted");
    const a = source[0], b = source[1], c = source[2], d = source[3], e = source[4];
    source = source[5];
    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * source - d * e) / det;
    target[5] = -(a * source - b * e) / det;
    return target;
  }
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }
  function toString(mat) {
    return "matrix(" + mat.map((value, i) => Math.round(value * matrixPrecision[i]) / matrixPrecision[i]).join(", ") + ")";
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, apply:{enumerable:!0, get:function() {
    return apply;
  }}, compose:{enumerable:!0, get:function() {
    return compose;
  }}, composeCssTransform:{enumerable:!0, get:function() {
    return composeCssTransform;
  }}, create:{enumerable:!0, get:function() {
    return create;
  }}, determinant:{enumerable:!0, get:function() {
    return determinant;
  }}, invert:{enumerable:!0, get:function() {
    return invert;
  }}, makeInverse:{enumerable:!0, get:function() {
    return makeInverse;
  }}, makeScale:{enumerable:!0, get:function() {
    return makeScale;
  }}, multiply:{enumerable:!0, get:function() {
    return multiply;
  }}, reset:{enumerable:!0, get:function() {
    return reset;
  }}, rotate:{enumerable:!0, get:function() {
    return rotate;
  }}, scale:{enumerable:!0, get:function() {
    return scale;
  }}, set:{enumerable:!0, get:function() {
    return set;
  }}, setFromArray:{enumerable:!0, get:function() {
    return setFromArray;
  }}, toString:{enumerable:!0, get:function() {
    return toString;
  }}, translate:{enumerable:!0, get:function() {
    return translate;
  }}});
  var require$_DOT__SLASH_asserts_DOT_js = require("module$node_modules$ol$asserts");
  const tmp_ = Array(6), matrixPrecision = [1e6, 1e6, 1e6, 1e6, 2, 2];
};

//# sourceMappingURL=module$node_modules$ol$transform.js.map
