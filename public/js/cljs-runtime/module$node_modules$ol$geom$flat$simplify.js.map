{
"version":3,
"file":"module$node_modules$ol$geom$flat$simplify.js",
"lineCount":144,
"mappings":"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",
"sources":["node_modules/ol/geom/flat/simplify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ol$geom$flat$simplify\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, douglasPeucker:{enumerable:true, get:function() {\n  return douglasPeucker;\n}}, douglasPeuckerArray:{enumerable:true, get:function() {\n  return douglasPeuckerArray;\n}}, douglasPeuckerMultiArray:{enumerable:true, get:function() {\n  return douglasPeuckerMultiArray;\n}}, quantize:{enumerable:true, get:function() {\n  return quantize;\n}}, quantizeArray:{enumerable:true, get:function() {\n  return quantizeArray;\n}}, quantizeMultiArray:{enumerable:true, get:function() {\n  return quantizeMultiArray;\n}}, radialDistance:{enumerable:true, get:function() {\n  return radialDistance;\n}}, simplifyLineString:{enumerable:true, get:function() {\n  return simplifyLineString;\n}}, snap:{enumerable:true, get:function() {\n  return snap;\n}}});\nvar require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js = require(\"../../math.js\");\nfunction simplifyLineString(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, simplifiedFlatCoordinates,) {\n  simplifiedFlatCoordinates = simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0,);\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0,);\n  return simplifiedFlatCoordinates;\n}\nfunction douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset,) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = (0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredSegmentDistance)(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\nfunction douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds,) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset,);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\nfunction douglasPeuckerMultiArray(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss,) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds,);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\nfunction radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset,) {\n  if (end <= offset + stride) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if ((0,require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js.squaredDistance)(x1, y1, x2, y2) > squaredTolerance) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\nfunction snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\nfunction quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset,) {\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\nfunction quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds,) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset,);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\nfunction quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss,) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds,);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","simplifyLineString","flatCoordinates","offset","end","stride","squaredTolerance","highQuality","simplifiedFlatCoordinates","undefined","radialDistance","length","douglasPeucker","simplifiedOffset","n","markers","Array","stack","index","last","pop","first","maxSquaredDistance","x1","y1","x2","y2","i","squaredDistance","require$_DOT__DOT__SLASH__DOT__DOT__SLASH_math_DOT_js","squaredSegmentDistance","x","y","push","douglasPeuckerArray","ends","simplifiedEnds","ii","douglasPeuckerMultiArray","endss","simplifiedEndss","snap","value","tolerance","Math","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizeArray","quantizeMultiArray","Object","defineProperties","__esModule","enumerable","get"]
}
