shadow$provide.module$node_modules$ol$render$Box = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$Disposable");
  global = require("module$node_modules$ol$geom$Polygon");
  module = require.esmDefault(module);
  var default$$require$_DOT__DOT__SLASH_geom_SLASH_Polygon_DOT_js = require.esmDefault(global);
  class RenderBox extends module.default {
    constructor(className) {
      super();
      this.geometry_ = null;
      this.element_ = document.createElement("div");
      this.element_.style.position = "absolute";
      this.element_.style.pointerEvents = "auto";
      this.element_.className = "ol-box " + className;
      this.endPixel_ = this.startPixel_ = this.map_ = null;
    }
    disposeInternal() {
      this.setMap(null);
    }
    render_() {
      const startPixel = this.startPixel_, endPixel = this.endPixel_, style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + "px";
      style.top = Math.min(startPixel[1], endPixel[1]) + "px";
      style.width = Math.abs(endPixel[0] - startPixel[0]) + "px";
      style.height = Math.abs(endPixel[1] - startPixel[1]) + "px";
    }
    setMap(map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        const style = this.element_.style;
        style.left = "inherit";
        style.top = "inherit";
        style.width = "inherit";
        style.height = "inherit";
      }
      (this.map_ = map) && this.map_.getOverlayContainer().appendChild(this.element_);
    }
    setPixels(startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    }
    createOrUpdateGeometry() {
      if (this.map_) {
        var startPixel = this.startPixel_, endPixel = this.endPixel_;
        startPixel = [startPixel, [startPixel[0], endPixel[1]], endPixel, [endPixel[0], startPixel[1]]].map(this.map_.getCoordinateFromPixelInternal, this.map_);
        startPixel[4] = startPixel[0].slice();
        this.geometry_ ? this.geometry_.setCoordinates([startPixel]) : this.geometry_ = new default$$require$_DOT__DOT__SLASH_geom_SLASH_Polygon_DOT_js.default([startPixel]);
      }
    }
    getGeometry() {
      return this.geometry_;
    }
  }
  const $$default = RenderBox;
};

//# sourceMappingURL=module$node_modules$ol$render$Box.js.map
