shadow$provide.module$node_modules$ol$interaction$DragPan = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  var require$_DOT__DOT__SLASH_coordinate_DOT_js = require("module$node_modules$ol$coordinate"), require$_DOT__DOT__SLASH_easing_DOT_js = require("module$node_modules$ol$easing"), require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js = require("module$node_modules$ol$events$condition"), require$_DOT__DOT__SLASH_functions_DOT_js = require("module$node_modules$ol$functions"), require$_DOT__SLASH_Pointer_DOT_js = require("module$node_modules$ol$interaction$Pointer");
  global = require.esmDefault(require$_DOT__SLASH_Pointer_DOT_js);
  class DragPan extends global.default {
    constructor(options) {
      super({stopDown:require$_DOT__DOT__SLASH_functions_DOT_js.FALSE});
      options = options ? options : {};
      this.kinetic_ = options.kinetic;
      this.lastCentroid = null;
      this.lastPointersCount_;
      this.panning_ = !1;
      const condition = options.condition ? options.condition : (0,require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.all)(require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.noModifierKeys, require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.primaryAction);
      this.condition_ = options.onFocusOnly ? (0,require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.all)(require$_DOT__DOT__SLASH_events_SLASH_condition_DOT_js.focusWithTabindex, condition) : condition;
      this.noKinetic_ = !1;
    }
    handleDragEvent(mapBrowserEvent) {
      var map = mapBrowserEvent.map;
      this.panning_ || (this.panning_ = !0, map.getView().beginInteraction());
      const targetPointers = this.targetPointers;
      map = map.getEventPixel((0,require$_DOT__SLASH_Pointer_DOT_js.centroid)(targetPointers));
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_ && this.kinetic_.update(map[0], map[1]), this.lastCentroid) {
          const delta = [this.lastCentroid[0] - map[0], map[1] - this.lastCentroid[1]], view = mapBrowserEvent.map.getView();
          (0,require$_DOT__DOT__SLASH_coordinate_DOT_js.scale)(delta, view.getResolution());
          (0,require$_DOT__DOT__SLASH_coordinate_DOT_js.rotate)(delta, view.getRotation());
          view.adjustCenterInternal(delta);
        }
      } else {
        this.kinetic_ && this.kinetic_.begin();
      }
      this.lastCentroid = map;
      this.lastPointersCount_ = targetPointers.length;
      mapBrowserEvent.originalEvent.preventDefault();
    }
    handleUpEvent(mapBrowserEvent) {
      var map = mapBrowserEvent.map;
      mapBrowserEvent = map.getView();
      if (0 === this.targetPointers.length) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          const distance = this.kinetic_.getDistance(), angle = this.kinetic_.getAngle();
          var center = mapBrowserEvent.getCenterInternal();
          center = map.getPixelFromCoordinateInternal(center);
          map = map.getCoordinateFromPixelInternal([center[0] - distance * Math.cos(angle), center[1] - distance * Math.sin(angle)]);
          mapBrowserEvent.animateInternal({center:mapBrowserEvent.getConstrainedCenter(map), duration:500, easing:require$_DOT__DOT__SLASH_easing_DOT_js.easeOut});
        }
        this.panning_ && (this.panning_ = !1, mapBrowserEvent.endInteraction());
        return !1;
      }
      this.kinetic_ && this.kinetic_.begin();
      this.lastCentroid = null;
      return !0;
    }
    handleDownEvent(mapBrowserEvent) {
      return 0 < this.targetPointers.length && this.condition_(mapBrowserEvent) ? (mapBrowserEvent = mapBrowserEvent.map.getView(), this.lastCentroid = null, mapBrowserEvent.getAnimating() && mapBrowserEvent.cancelAnimations(), this.kinetic_ && this.kinetic_.begin(), this.noKinetic_ = 1 < this.targetPointers.length, !0) : !1;
    }
  }
  const $$default = DragPan;
};

//# sourceMappingURL=module$node_modules$ol$interaction$DragPan.js.map
