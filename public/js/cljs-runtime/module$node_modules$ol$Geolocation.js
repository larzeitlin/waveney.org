shadow$provide.module$node_modules$ol$Geolocation = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, GeolocationError:{enumerable:!0, get:function() {
    return GeolocationError;
  }}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  module = require("module$node_modules$ol$Object");
  global = require("module$node_modules$ol$events$Event");
  var require$_DOT__SLASH_geom_SLASH_Polygon_DOT_js = require("module$node_modules$ol$geom$Polygon"), require$_DOT__SLASH_math_DOT_js = require("module$node_modules$ol$math"), require$_DOT__SLASH_proj_DOT_js = require("module$node_modules$ol$proj");
  module = require.esmDefault(module);
  require = require.esmDefault(global);
  class GeolocationError extends require.default {
    constructor(error) {
      super("error");
      this.code = error.code;
      this.message = error.message;
    }
  }
  class Geolocation extends module.default {
    constructor(options) {
      super();
      this.on;
      this.once;
      this.un;
      options = options || {};
      this.position_ = null;
      this.transform_ = require$_DOT__SLASH_proj_DOT_js.identityTransform;
      this.watchId_ = void 0;
      this.addChangeListener("projection", this.handleProjectionChanged_);
      this.addChangeListener("tracking", this.handleTrackingChanged_);
      void 0 !== options.projection && this.setProjection(options.projection);
      void 0 !== options.trackingOptions && this.setTrackingOptions(options.trackingOptions);
      this.setTracking(void 0 !== options.tracking ? options.tracking : !1);
    }
    disposeInternal() {
      this.setTracking(!1);
      super.disposeInternal();
    }
    handleProjectionChanged_() {
      const projection = this.getProjection();
      projection && (this.transform_ = (0,require$_DOT__SLASH_proj_DOT_js.getTransformFromProjections)((0,require$_DOT__SLASH_proj_DOT_js.get)("EPSG:4326"), projection), this.position_ && this.set("position", this.transform_(this.position_)));
    }
    handleTrackingChanged_() {
      if ("geolocation" in navigator) {
        const tracking = this.getTracking();
        tracking && void 0 === this.watchId_ ? this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions()) : tracking || void 0 === this.watchId_ || (navigator.geolocation.clearWatch(this.watchId_), this.watchId_ = void 0);
      }
    }
    positionChange_(position) {
      position = position.coords;
      this.set("accuracy", position.accuracy);
      this.set("altitude", null === position.altitude ? void 0 : position.altitude);
      this.set("altitudeAccuracy", null === position.altitudeAccuracy ? void 0 : position.altitudeAccuracy);
      this.set("heading", null === position.heading ? void 0 : (0,require$_DOT__SLASH_math_DOT_js.toRadians)(position.heading));
      this.position_ ? (this.position_[0] = position.longitude, this.position_[1] = position.latitude) : this.position_ = [position.longitude, position.latitude];
      const projectedPosition = this.transform_(this.position_);
      this.set("position", projectedPosition.slice());
      this.set("speed", null === position.speed ? void 0 : position.speed);
      position = (0,require$_DOT__SLASH_geom_SLASH_Polygon_DOT_js.circular)(this.position_, position.accuracy);
      position.applyTransform(this.transform_);
      this.set("accuracyGeometry", position);
      this.changed();
    }
    positionError_(error) {
      this.dispatchEvent(new GeolocationError(error));
    }
    getAccuracy() {
      return this.get("accuracy");
    }
    getAccuracyGeometry() {
      return this.get("accuracyGeometry") || null;
    }
    getAltitude() {
      return this.get("altitude");
    }
    getAltitudeAccuracy() {
      return this.get("altitudeAccuracy");
    }
    getHeading() {
      return this.get("heading");
    }
    getPosition() {
      return this.get("position");
    }
    getProjection() {
      return this.get("projection");
    }
    getSpeed() {
      return this.get("speed");
    }
    getTracking() {
      return this.get("tracking");
    }
    getTrackingOptions() {
      return this.get("trackingOptions");
    }
    setProjection(projection) {
      this.set("projection", (0,require$_DOT__SLASH_proj_DOT_js.get)(projection));
    }
    setTracking(tracking) {
      this.set("tracking", tracking);
    }
    setTrackingOptions(options) {
      this.set("trackingOptions", options);
    }
  }
  const $$default = Geolocation;
};

//# sourceMappingURL=module$node_modules$ol$Geolocation.js.map
