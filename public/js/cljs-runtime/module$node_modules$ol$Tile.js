shadow$provide.module$node_modules$ol$Tile = function(global, require, module, exports) {
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, default:{enumerable:!0, get:function() {
    return $$default;
  }}});
  global = require("module$node_modules$ol$TileState");
  var require$_DOT__SLASH_easing_DOT_js = require("module$node_modules$ol$easing");
  module = require("module$node_modules$ol$events$EventType");
  exports = require("module$node_modules$ol$events$Target");
  var require$_DOT__SLASH_util_DOT_js = require("module$node_modules$ol$util");
  exports = require.esmDefault(exports);
  var default$$require$_DOT__SLASH_TileState_DOT_js = require.esmDefault(global), default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js = require.esmDefault(module);
  class Tile extends exports.default {
    constructor(tileCoord, state, options) {
      super();
      options = options ? options : {};
      this.tileCoord = tileCoord;
      this.state = state;
      this.key = "";
      this.transition_ = void 0 === options.transition ? 250 : options.transition;
      this.transitionStarts_ = {};
      this.interpolate = !!options.interpolate;
    }
    changed() {
      this.dispatchEvent(default$$require$_DOT__SLASH_events_SLASH_EventType_DOT_js.default.CHANGE);
    }
    release() {
      this.setState(default$$require$_DOT__SLASH_TileState_DOT_js.default.EMPTY);
    }
    getKey() {
      return this.key + "/" + this.tileCoord;
    }
    getTileCoord() {
      return this.tileCoord;
    }
    getState() {
      return this.state;
    }
    setState(state) {
      if (this.state !== default$$require$_DOT__SLASH_TileState_DOT_js.default.EMPTY) {
        if (this.state !== default$$require$_DOT__SLASH_TileState_DOT_js.default.ERROR && this.state > state) {
          throw Error("Tile load sequence violation");
        }
        this.state = state;
        this.changed();
      }
    }
    load() {
      (0,require$_DOT__SLASH_util_DOT_js.abstract)();
    }
    getAlpha(id, time) {
      if (!this.transition_) {
        return 1;
      }
      let start = this.transitionStarts_[id];
      if (!start) {
        start = time, this.transitionStarts_[id] = start;
      } else if (-1 === start) {
        return 1;
      }
      id = time - start + 1000 / 60;
      return id >= this.transition_ ? 1 : (0,require$_DOT__SLASH_easing_DOT_js.easeIn)(id / this.transition_);
    }
    inTransition(id) {
      return this.transition_ ? -1 !== this.transitionStarts_[id] : !1;
    }
    endTransition(id) {
      this.transition_ && (this.transitionStarts_[id] = -1);
    }
    disposeInternal() {
      this.release();
      super.disposeInternal();
    }
  }
  const $$default = Tile;
};

//# sourceMappingURL=module$node_modules$ol$Tile.js.map
